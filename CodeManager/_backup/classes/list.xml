<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef LIST_INCLUDED
#define LIST_INCLUDED

#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;

/**
 * Functions, which are common for all types of lists.
 *
 * @author Petr Kozler (A13B0359P)
 */

bool equalsList(void *ptr, int32_t (*sizePtr)(void *), void *(*getPtr)(void *, int32_t), 
        void *o, int32_t (*sizeO)(void *), void *(*getO)(void *, int32_t), 
        bool (*equals)(const void *, const void *));

#endif	/* LIST_INCLUDED */



#include "List.h"

#include &lt;stddef.h&gt;

/**
 * Compares the one specified list with another for equality.
 *
 * @param ptr The one list to be compared for equality
 * @param sizePtr The list size function
 * @param getPtr The list get function
 * @param o The other list to be compared for equality
 * @param sizeO The other list size function
 * @param getO The other list get function
 * @param equals The list element equals function
 * @return true if the one specified list is equal to the other
 */
bool equalsList(void *ptr, int32_t (*sizePtr)(void *), void *(*getPtr)(void *, int32_t), 
        void *o, int32_t (*sizeO)(void *), void *(*getO)(void *, int32_t), 
        bool (*equals)(const void *, const void *)) {
    // comparing pointers
    if (ptr == o) {
        return true;
    }
    
    // testing the pointer for a NULL value
    if (o == NULL) {
        return false;
    }
    
    int length = sizePtr(ptr);
    
    // comparing the list sizes
    if (sizeO(o) != length) {
        return false;
    }
    
    // comparing the corresponding elements of the lists
    int32_t i;
    for (i = 0; i &lt; length; i++) {
        void *o1 = getPtr(ptr, i);
        void *o2 = getO(o, i);
        bool e = o1 == NULL ? o2 == NULL : equals(o1, o2);
        
        if (!e) {
            return false;
        }
    }
    
    return true;
}</code>
<code lang="C++">#ifndef LIST_INCLUDED
#define LIST_INCLUDED

#include "String_.h"
#include &lt;string&gt;
#include "System.h"

/**
 * An ordered collection (also known as a sequence).
 *
 * @param E the type of elements in this list
 * @author Petr Kozler (A13B0359P)
 */
template &lt;class E&gt; class List : public Object {
public:
    virtual bool add(E *e) = 0;
    virtual void add(int32_t index, E *element) = 0;
    bool equals(Object *o);
    virtual E *get(int32_t index) = 0;
    virtual E *set(int32_t index, E *element) = 0;
    virtual E *remove(int32_t index) = 0;
    virtual int32_t size() = 0;
    virtual bool isEmpty();
    virtual void clear() = 0;
    virtual String *toString() = 0;
};

/**
 * Compares the specified object with this list for equality.
 *
 * @param o the object to be compared for equality with this list
 * @return true if the specified object is equal to this list
 */
template &lt;class E&gt; bool List&lt;E&gt;::equals(Object *o) {
    // comparing pointers
    if (this == o) {
        return true;
    }

    // testing the pointer for a NULL value
    if (o == nullptr) {
        return false;
    }

    List&lt;E&gt; *other = (List&lt;E&gt; *) o;
    int32_t length = size();

    // comparing the list sizes
    if (other-&gt;size() != length) {
        return false;
    }
    
    int32_t i;
    // comparing the corresponding elements of the lists
    for (i = 0; i &lt; length; i++) {
        Object *o1 = (Object *) get(i);
        Object *o2 = (Object *) other-&gt;get(i);
        
        bool equals = o1 == nullptr ? o2 == nullptr : o1-&gt;equals(o2);

        if (!equals) {
            return false;
        }
    }

    return true;
}

/**
 * Returns true if this list contains no elements.
 *
 * @return true if this list contains no elements
 */
template &lt;class E&gt; bool List&lt;E&gt;::isEmpty() {
    return size() == 0;
}

#endif	// LIST_INCLUDED


#include "List.h"
// for future purposes</code>
<code lang="C#">ï»¿namespace JavaClasses
{

    /// &lt;summary&gt;
    /// An ordered collection (also known as a sequence).
    /// &lt;/summary&gt;
    /// &lt;typeparam name="E"&gt;the type of elements in this list&lt;/typeparam&gt;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;
    public abstract class List&lt;E&gt; : Object where E : Object
    {
        
        public abstract bool add(E e);
        
        public abstract void add(int index, E element);

        /// &lt;summary&gt;
        /// Compares the specified object with this list for equality.
        /// &lt;/summary&gt;
        /// &lt;param name="o"&gt;the object to be compared for equality with this list&lt;/param&gt;
        /// &lt;returns&gt;true if the specified object is equal to this list&lt;/returns&gt;
        public override bool equals(Object o)
        {
            // comparing references
            if (this == o)
            {
                return true;
            }

            // testing the references for a NULL value
            if (o == null)
            {
                return false;
            }

            List&lt;E&gt; other = o as List&lt;E&gt;;
            int length = size();

            // comparing the list sizes
            if (other.size() != length)
            {
                return false;
            }

            // comparing the corresponding elements of the lists
            for (int i = 0; i &lt; length; i++)
            {
                E o1 = get(i);
                E o2 = other.get(i);
                bool equals = o1 == null ? o2 == null : o1.Equals(o2);

                if (!equals)
                {
                    return false;
                }
            }

            return true;
        }
        
        public abstract E get(int index);
        
        public abstract E set(int index, E element);
        
        public abstract E remove(int index);
        
        public abstract int size();

        /// &lt;summary&gt;
        /// Returns true if this list contains no elements.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;true if this list contains no elements
        /// &lt;/returns&gt;
        public virtual bool isEmpty()
        {
            return size() == 0;
        }
        
        public abstract void clear();

    }

}
</code>
<code lang="Free Pascal">unit ListUnit;

{$mode objfpc}{$H+}

interface

uses
  StringUnit;

type
  (**
   * An ordered collection (also known as a sequence).
   *
   * @param E the type of elements in this list
   * @author Petr Kozler (A13B0359P)
   *)
  List = class(Object_)
    public
      function add(e: Object_) : boolean; virtual; abstract;
      procedure add(index: longInt; element: Object_); virtual; abstract;
      function equals_(o: Object_) : boolean; override;
      function get(index: longInt) : Object_; virtual; abstract;
      function set_(index: longInt; element: Object_) : Object_; virtual; abstract;
      function remove(index: longInt) : Object_; virtual; abstract;
      function size() : longInt; virtual; abstract;
      function isEmpty() : boolean; virtual;
      procedure clear(); virtual; abstract;
      function toString_() : String_; virtual; abstract;
  end;

implementation

(**
 * Compares the specified object with this list for equality.
 *
 * @param o the object to be compared for equality with this list
 * @return true if the specified object is equal to this list
 *)
function List.equals_(o: Object_) : boolean;
var
  other: List;
  o1, o2: Object_;
  length, i: longInt;
  e: boolean;
begin
  // comparing references
  if self = o then begin
    exit(true);
  end;

  // testing the reference for a NULL value
  if o = nil then begin
    exit(false);
  end;

  other := List(o);
  length := size();

  // comparing the list sizes
  if other.size() &lt;&gt; length then begin
    exit(false);
  end;

  // comparing the corresponding elements of the lists
  for i := 0 to length - 1 do begin
    o1 := get(i);
    o2 := other.get(i);

    if o1 = nil then begin
      e := o2 = nil;
    end
    else begin
      e := o1.equals_(o2);
    end;

    if not e then begin
      exit(false);
    end;
  end;

  equals_ := true;
end;

(**
 * Returns true if this list contains no elements.
 *
 * @return true if this list contains no elements
 *)
function List.isEmpty() : boolean;
begin
  isEmpty := size() = 0;
end;

end.

</code>
</codes>
