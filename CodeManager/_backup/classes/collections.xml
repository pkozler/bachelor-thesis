<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef COLLECTIONS_INCLUDED
#define	COLLECTIONS_INCLUDED

#include "ArrayList.h"
#include &lt;stdint.h&gt;

/**
 * This module consists exclusively of functions that operate on or return lists
 * or any other type of a non-built-in data structure.
 *
 * @author Petr Kozler (A13B0359P)
 */

int32_t Collections_binarySearch(ArrayList *list, void *key, int32_t (*c)(const void *, const void *));
void Collections_copy(void *dest, void *src, int32_t (*srcSize)(void *), 
        void *(*destSet)(void *, int32_t, void *), void *(*srcGet)(void *, int32_t));
void Collections_fill(void *list, void *obj, int32_t (*listSize)(void *), 
        void *(*listSet)(void *, int32_t, void *));
void Collections_sort(ArrayList *list, int32_t (* c)(const void *, const void *));

#endif	/* COLLECTIONS_INCLUDED */



#include "Collections.h"

#include "System.h"
#include &lt;stdlib.h&gt;

/**
 * Searches the specified list for the specified structure using the binary
 * search algorithm.
 *
 * @param list the list to be searched.
 * @param key the key to be searched for.
 * @param c The structure compare function
 * @return the index of the search key, if it is contained in the list;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the list: the index of
 * the first element greater than the key, or list.size() if all elements in
 * the list are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
int32_t Collections_binarySearch(ArrayList *list, void *key, int32_t (*c)(const void *, const void *)) {
    // initial lower list position
    int32_t lower = 0;
    // initial upper list position
    int32_t upper = sizeAl(list) - 1;

    while (lower &lt;= upper) {
        // middle list position
        int32_t middle = ((uint32_t)lower + (uint32_t)upper) &gt;&gt; 1;
        
        void *o1 = getAl(list, middle);
        void *o2 = key;
        int32_t cmp = c(o1, o2);

        // middle list position is the new lower index if the key object is greater than middle value object
        if (cmp &lt; 0) {
            lower = middle + 1;
        }
        // middle list position is the new upper index if the key object is greater than middle value object
        else if (cmp &gt; 0) {
            upper = middle - 1;
        }
        // returning the element if middle list position object is equal to the key object
        else {
            return middle;
        }
    }

    // returning the negative list position if element not found
    return -(lower + 1);
}

/**
 * Copies all of the elements from one list into another.
 *
 * @param dest The destination list.
 * @param src The source list.
 * @param srcSize The source list size function.
 * @param destSet The destination list set function.
 * @param srcGet The source list get function.
 */
void Collections_copy(void *dest, void *src, int32_t (*srcSize)(void *),
        void *(*destSet)(void *, int32_t, void *), void *(*srcGet)(void *, int32_t)) {
    int32_t length = srcSize(src);

    // replacing the elements of the destination list with the elements of the source list
    int32_t i;
    for (i = 0; i &lt; length; i++) {
        destSet(dest, i, srcGet(src, i));
    }
}

/**
 * Replaces all of the elements of the specified list with the specified
 * element.
 *
 * @param list the list to be filled with the specified element.
 * @param obj The element with which to fill the specified list.
 * @param listSize The list size function.
 * @param listSet The list set function.
 */
void Collections_fill(void *list, void *obj, int32_t (*listSize)(void *),
        void *(*listSet)(void *, int32_t, void *)) {
    int32_t length = listSize(list);

    // replacing the elements of the list with the specified value
    int32_t i;
    for (i = 0; i &lt; length; i++) {
        listSet(list, i, obj);
    }
}

/**
 * Sorts the specified list into ascending order, according to the natural
 * ordering of its elements.
 *
 * @param list the list to be sorted.
 * @param c The structure compare function
 */
void Collections_sort(ArrayList *list, int32_t (* c)(const void *, const void *)) {
    // allocating the auxilliary array for the function implementing the stable sorting algoritm
    void **aux = malloc(sizeof(void *) * list-&gt;count);
    // sorting the array with the stable sorting Mergesort algoritm
    _mergeSort(list-&gt;dynamicArray, aux, 0, list-&gt;count - 1, c);
    free(aux);
}
</code>
<code lang="C++">#ifndef COLLECTIONS_INCLUDED
#define	COLLECTIONS_INCLUDED

#include "List.h"
#include "ArrayList.h"
#include &lt;algorithm&gt;
#include &lt;vector&gt;
#include &lt;cstdint&gt;

/**
 * This class consists exclusively of static methods that operate on or return collections.
 *
 * @author Petr Kozler (A13B0359P)
 */
class Collections {
    // hack to make the Comparator compare function call work
    static void *currentComparator;
    static bool compareObj(Object *a, Object *b);
    static bool compareObjComp(Object *a, Object *b);
    static int32_t compareObjI(Object *a, Object *b);
    static int32_t compareObjCompI(Object *a, Object *b);
    template &lt;class T&gt; static int32_t binarySearchGeneric(ArrayList&lt;T&gt; *list, T *key, int32_t (*c)(Object *, Object *));
    template &lt;class T&gt; static void sortGeneric(ArrayList&lt;T&gt; *list, bool (*c)(Object *, Object *));
public:
    template &lt;class T&gt; static int32_t binarySearch (ArrayList&lt;T&gt; *list, T *key);
    template &lt;class T&gt; static int32_t binarySearch (ArrayList&lt;T&gt; *list, T *key, Comparator *c);
    template &lt;class T&gt; static void copy (List&lt;T&gt; *dest, List&lt;T&gt; *src);
    template &lt;class T&gt; static void fill (List&lt;T&gt; *list, T *obj);
    template &lt;class T&gt; static void sort(ArrayList&lt;T&gt; *list);
    template &lt;class T&gt; static void sort(ArrayList&lt;T&gt; *list, Comparator *c);
};

template &lt;class T&gt; int32_t Collections::binarySearchGeneric(ArrayList&lt;T&gt; *list, T *key, int32_t (*c)(Object *, Object *)) {
    // initial lower list position
    int32_t lower = 0;
    // initial upper list position
    int32_t upper = list-&gt;size() - 1;
    
    while (lower &lt;= upper) {
        // middle list position
        int32_t middle = ((uint32_t)lower + (uint32_t)upper) &gt;&gt; 1;
        Object *middleValue = (Object *) list-&gt;get(middle);
        Object *k = (Object *) key;
        
        // middle list position is the new lower index if the key object is greater than middle value object
        if (c(middleValue, k) &lt; 0) {
            lower = middle + 1;
        }
        // middle list position is the new upper index if the key object is greater than middle value object
        else if (c(middleValue, k) &gt; 0) {
            upper = middle - 1;
        }
        // returning the element if middle list position object is equal to the key object
        else {
            return middle;
        }
    }
    
    // returning the negative list position if element not found
    return -(lower + 1);
}

template &lt;class T&gt; void Collections::sortGeneric(ArrayList&lt;T&gt; *list, bool (*c)(Object *, Object *)) {
    int32_t length = list-&gt;size();
    Object **a = new Object*[length];
    
    // copying the elements of the list to the auxilliary array - hack to make the sort function work
    for (int32_t i = 0; i &lt; length; i++) {
        a[i] = ((Object *) list-&gt;get(i));
    }
    
    // sorting the elements using the stable sort
    std::stable_sort(a, a + length, c);
    
    // copying the elements from the the auxilliary array back to the list
    for (int32_t i = 0; i &lt; length; i++) {
        list-&gt;set(i, (T *)a[i]);
    }
}

/**
 * Searches the specified list for the specified object using the binary
 * search algorithm.
 *
 * @param list the list to be searched.
 * @param key the key to be searched for.
 * @return the index of the search key, if it is contained in the list;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the list: the index of
 * the first element greater than the key, or list.size() if all elements in
 * the list are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
template &lt;class T&gt; int32_t Collections::binarySearch (ArrayList&lt;T&gt; *list, T *key) {
    return binarySearchGeneric(list, key, compareObjI);
}

/**
 * Searches the specified list for the specified object using the binary
 * search algorithm.
 *
 * @param list the list to be searched.
 * @param key the key to be searched for.
 * @param c the comparator by which the list is ordered. A null value
 * indicates that the elements' natural ordering should be used.
 * @return the index of the search key, if it is contained in the list;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the list: the index of
 * the first element greater than the key, or list.size() if all elements in
 * the list are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
template &lt;class T&gt; int32_t Collections::binarySearch (ArrayList&lt;T&gt; *list, T *key, Comparator *c) {
    // setting the comparator used by the specified comparison function
    currentComparator = c;
    return binarySearchGeneric(list, key, compareObjCompI);
}

/**
 * Copies all of the elements from one list into another.
 *
 * @param dest The destination list.
 * @param src The source list.
 */
template &lt;class T&gt; void Collections::copy (List&lt;T&gt; *dest, List&lt;T&gt; *src) {
    int32_t length = src-&gt;size();
    
    // replacing the elements of the destination list with the elements of the source list
    for (int32_t i = 0; i &lt; length; i++) {
        dest-&gt;set(i, src-&gt;get(i));
    }
}

/**
 * Replaces all of the elements of the specified list with the specified
 * element.
 *
 * @param list the list to be filled with the specified element.
 * @param obj The element with which to fill the specified list.
 */
template &lt;class T&gt; void Collections::fill (List&lt;T&gt; *list, T *obj) {
    int32_t length = list-&gt;size();
    
    // replacing the elements of the list with the specified value
    for (int32_t i = 0; i &lt; length; i++) {
        list-&gt;set(i, obj);
    }
}

/**
 * Sorts the specified list into ascending order, according to the natural
 * ordering of its elements.
 *
 * @param list the list to be sorted.
 */
template &lt;class T&gt; void Collections::sort(ArrayList&lt;T&gt; *list) {
    sortGeneric(list, compareObj);
}

/**
 * Sorts the specified list according to the order induced by the specified
 * comparator
 *
 * @param list the list to be sorted.
 * @param c the comparator to determine the order of the list. A null value
 * indicates that the elements' natural ordering should be used.
 */
template &lt;class T&gt; void Collections::sort(ArrayList&lt;T&gt; *list, Comparator *c) {
    // setting the comparator used by the specified comparison function
    currentComparator = c;
    sortGeneric(list, compareObjComp);
}

#endif	// COLLECTIONS_INCLUDED


#include "Collections.h"

void *Collections::currentComparator = nullptr;

/*
 * methods for comparing the two specified values:
 */

int32_t Collections::compareObjI(Object *a, Object *b) {
    Comparable *x = ((Comparable *) a);
    Comparable *y = ((Comparable *) b);
    
    return x-&gt;compareTo(y);
}

int32_t Collections::compareObjCompI(Object *a, Object *b) {
    return ((Comparator *) currentComparator)-&gt;compare(a, b);
}

bool Collections::compareObj(Object *a, Object *b) {
    return compareObjI(a, b) &lt; 0;
}

bool Collections::compareObjComp(Object *a, Object *b) {
    return compareObjCompI(a, b) &lt; 0;
}
</code>
<code lang="C#">﻿using System.Collections.Generic;

namespace JavaClasses
{

    /// &lt;summary&gt;
    /// This class consists exclusively of static methods that operate on or return collections.
    /// &lt;/summary&gt;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;
    public static class Collections
    {

        /// &lt;summary&gt;
        /// Searches the specified list for the specified object using the binary
        /// search algorithm.
        /// &lt;/summary&gt;
        /// &lt;param name="list"&gt;the list to be searched.
        /// &lt;/param&gt;&lt;param name="key"&gt;the key to be searched for.
        /// &lt;/param&gt;&lt;returns&gt;the index of the search key, if it is contained in the list;
        /// otherwise, (-(insertion point) - 1). The insertion point is defined as
        /// the point at which the key would be inserted into the list: the index of
        /// the first element greater than the key, or list.size() if all elements in
        /// the list are less than the specified key. Note that this guarantees that
        /// the return value will be &gt;= 0 if and only if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch&lt;T&gt;(ArrayList&lt;T&gt; list, T key) where T : Object
        {
            return list.l.BinarySearch(key);
        }

        /// &lt;summary&gt;
        /// Searches the specified list for the specified object using the binary
        /// search algorithm.
        /// &lt;/summary&gt;
        /// &lt;param name="list"&gt;the list to be searched.
        /// &lt;/param&gt;&lt;param name="key"&gt;the key to be searched for.
        /// &lt;/param&gt;&lt;param name="c"&gt;the comparator by which the list is ordered. A null value
        /// indicates that the elements' natural ordering should be used.
        /// &lt;/param&gt;&lt;returns&gt;the index of the search key, if it is contained in the list;
        /// otherwise, (-(insertion point) - 1). The insertion point is defined as
        /// the point at which the key would be inserted into the list: the index of
        /// the first element greater than the key, or list.size() if all elements in
        /// the list are less than the specified key. Note that this guarantees that
        /// the return value will be &gt;= 0 if and only if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch&lt;T&gt;(ArrayList&lt;T&gt; list, T key, IComparer&lt;T&gt; c) where T : Object
        {
            return list.l.BinarySearch(key, c);
        }

        /// &lt;summary&gt;
        /// Copies all of the elements from one list into another.
        /// &lt;/summary&gt;
        /// &lt;param name="dest"&gt;The destination list.
        /// &lt;/param&gt;&lt;param name="src"&gt;The source list.
        /// &lt;/param&gt;
        public static void copy&lt;T&gt;(List&lt;T&gt; dest, List&lt;T&gt; src) where T : Object
        {
            int length = src.size();

            // replacing the elements of the destination list with the elements of the source list
            for (int i = 0; i &lt; length; i++)
            {
                dest.set(i, src.get(i));
            }
        }

        /// &lt;summary&gt;
        /// Replaces all of the elements of the specified list with the specified
        /// element.
        /// &lt;/summary&gt;
        /// &lt;param name="list"&gt;the list to be filled with the specified element.
        /// &lt;/param&gt;&lt;param name="obj"&gt;The element with which to fill the specified list.
        /// &lt;/param&gt;
        public static void fill&lt;T&gt;(List&lt;T&gt; list, T obj) where T : Object
        {
            int length = list.size();

            // replacing the elements of the list with the specified value
            for (int i = 0; i &lt; length; i++)
            {
                list.set(i, obj);
            }
        }

        /// &lt;summary&gt;
        /// Sorts the specified list into ascending order, according to the natural
        /// ordering of its elements.
        /// &lt;/summary&gt;
        /// &lt;param name="list"&gt;the list to be sorted.
        /// &lt;/param&gt;
        public static void sort&lt;T&gt;(ArrayList&lt;T&gt; list) where T : Object
        {
            list.l.Sort();
        }

        /// &lt;summary&gt;
        /// Sorts the specified list according to the order induced by the specified
        /// comparator
        /// &lt;/summary&gt;
        /// &lt;param name="list"&gt;the list to be sorted.
        /// &lt;/param&gt;&lt;param name="c"&gt;the comparator to determine the order of the list. A null value
        /// indicates that the elements' natural ordering should be used.
        /// &lt;/param&gt;
        public static void sort&lt;T&gt;(ArrayList&lt;T&gt; list, IComparer&lt;T&gt; c) where T : Object
        {
            list.l.Sort(c);
        }

    }

}
</code>
<code lang="Free Pascal">unit CollectionsUnit;

{$mode objfpc}{$H+}

interface

uses
  SystemUnit, StringUnit, ArrayListUnit, ListUnit;

  (**
   * This class consists exclusively of static methods that operate on or return collections.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  type
  Collections = class
    public
      class function binarySearch(list: ArrayList; key: Object_) : longInt;
      class function binarySearch(list: ArrayList; key: Object_; c: Comparator) : longInt;
      class procedure copy(dest: List; src: List);
      class procedure fill(list: List; obj: Object_);
      class procedure sort(list: ArrayList);
      class procedure sort(list: ArrayList; c: Comparator);
  end;

implementation

uses
  SysUtils, Classes;

(**
 * Searches the specified list for the specified object using the binary
 * search algorithm.
 *
 * @param list the list to be searched.
 * @param key the key to be searched for.
 * @return the index of the search key, if it is contained in the list;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the list: the index of
 * the first element greater than the key, or list.size() if all elements in
 * the list are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 *)
class function Collections.binarySearch(list: ArrayList; key: Object_) : longInt;
var
  comparator: ObjectComparator;
begin
  // creating the default object comparator
  comparator := ObjectComparator.create();
  binarySearch := binarySearch(list, key, comparator);
  freeAndNil(comparator);
end;

(**
 * Searches the specified list for the specified object using the binary
 * search algorithm.
 *
 * @param list the list to be searched.
 * @param key the key to be searched for.
 * @return the index of the search key, if it is contained in the list;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the list: the index of
 * the first element greater than the key, or list.size() if all elements in
 * the list are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 *)
class function Collections.binarySearch(list: ArrayList; key: Object_; c: Comparator) : longInt;
var
  objectArray: array of Object_;
  lower, upper, middle : longInt;
  middleValue : Object_;
begin
  // inner array of the list
  objectArray := list.arrProperty;

  // initial lower index
  lower := 0;
  // initial upper index
  upper := list.size() - 1;

  while lower &lt;= upper do begin
    // middle index
    middle := lower + ((upper - lower) div 2);
    middleValue := objectArray[middle];

    // middle index is the new lower index if the key is greater than middle value
    if c.compare(middleValue, key) &lt; 0 then begin
      lower := middle + 1;
    end
    // middle index is the new upper index if the key is greater than middle value
    else if c.compare(middleValue, key) &gt; 0 then begin
      upper := middle - 1;
    end
    // returning the element if middle index value is equal to the key
    else begin
      exit(middle);
    end;
  end;

  // returning the negative index if element not found
  binarySearch := -(lower + 1);
end;

(**
 * Copies all of the elements from one list into another.
 *
 * @param dest The destination list.
 * @param src The source list.
 *)
class procedure Collections.copy(dest: List; src: List);
var
  length, i: longInt;
begin
  length := src.size();

  // replacing the elements of the destination list with the elements of the source list
  for i := 0 to length - 1 do begin
    dest.set_(i, src.get(i));
  end;
end;

(**
 * Replaces all of the elements of the specified list with the specified
 * element.
 *
 * @param list the list to be filled with the specified element.
 * @param obj The element with which to fill the specified list.
 *)
class procedure Collections.fill(list: List; obj: Object_);
var
  length, i: longInt;
begin
  length := list.size();

  // replacing the elements of the list with the specified value
  for i := 0 to length - 1 do begin
    list.set_(i, obj);
  end;
end;

(**
 * Sorts the specified list into ascending order, according to the natural
 * ordering of its elements.
 *
 * @param list the list to be sorted.
 *)
class procedure Collections.sort(list: ArrayList);
begin
  sort(list, ObjectComparator.create());
end;

(**
 * Sorts the specified list into ascending order, according to the natural
 * ordering of its elements.
 *
 * @param list the list to be sorted.
 *)
class procedure Collections.sort(list: ArrayList; c: Comparator);
var
  a: array of Object_;
  aux: array of Object_;
begin
  a := list.arrProperty;
  // creating the auxilliary array for the method implementing the stable sorting algoritm
  setLength(aux, list.size());
  // sorting the array with the stable sorting MergeSort algoritm
  _java.mergeSort(a, aux, 0, list.size() - 1, c);
end;

end.

</code>

</codes>
