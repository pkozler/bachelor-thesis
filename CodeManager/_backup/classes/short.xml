<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef SHORT_INCLUDED
#define SHORT_INCLUDED

#include "String.h"
#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;

/**
 * The Short struct wraps a value of the type int16_t, representing a short value.
 *
 * @author Petr Kozler (A13B0359P)
 */

/**
 * A constant holding the maximum value a short can have, 2^15-1.
 */
#define Short_MAX_VALUE 32767
/**
 * A constant holding the minimum value a short can have, -2^15.
 */
#define Short_MIN_VALUE -32768

typedef struct {
    // an inner value
    int16_t v;
} Short;

Short *new_Short(int16_t value);
int16_t shortValue(Short *ptr);
int32_t compareToS(Short *ptr, Short *anotherShort);
int32_t Short_compare(int16_t x, int16_t y);
bool equalsS(Short *ptr, Short *obj);
String *toStringS(Short *ptr);
String *Short_toString(int16_t s);
int16_t Short_parseShort(String *s);

#endif /* SHORT_INCLUDED */


#include "Short.h"

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

// maximum possible string length of the int16_t value used as the string buffer size
#define _MAX_SHORT_STRLEN 6

/**
 * Constructs a newly allocated Short structure that represents the specified
 * short value.
 *
 * @param value the value to be represented by the Short.
 */
Short *new_Short(int16_t value) {
    Short *s = malloc(sizeof(Short));
    s-&gt;v = value;

    return s;
}

/**
 * Returns the value of the specified Short as a short.
 *
 * @param ptr The allocated structure
 * @return the numeric value represented by the specified structure after conversion to
 * type short.
 */
int16_t shortValue(Short *ptr) {
    return ptr-&gt;v;
}

/**
 * Compares two Short structures numerically.
 *
 * @param ptr The allocated structure
 * @param anotherShort the Short to be compared.
 * @return the value 0 if the first Short is equal to the second Short; a value
 * less than 0 if the first Short is numerically less than the second Short;
 * and a value greater than 0 if the first Short is numerically greater than the
 * second Short (signed comparison).
 */
int32_t compareToS(Short *ptr, Short *anotherShort) {
    return Short_compare(ptr-&gt;v, anotherShort-&gt;v);
}

/**
 * Compares two short values numerically.
 *
 * @param x the first short to compare
 * @param y the second short to compare
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
 * &gt; y
 */
int32_t Short_compare(int16_t x, int16_t y) {
    // positive number if x is greater, 0 if x equals y, negative number otherwise
    return x - y;
}

/**
 * Compares the one structure to the other.
 *
 * @param ptr The allocated structure
 * @param obj the structure to compare with
 * @return true if the structures are the same; false otherwise.
 */
bool equalsS(Short *ptr, Short *obj) {
    // testing another object reference for a NULL value
    if (ptr == NULL || obj == NULL) {
        return false;
    }

    // testing object class equality
    if (sizeof(*ptr) != sizeof(*obj)) {
        return false;
    }

    // testing object fields equality
    return (ptr-&gt;v == obj-&gt;v);
}

/**
 * Returns a String structure representing the specified Short's value.
 *
 * @param ptr The allocated structure
 * @return a string representation of the value of the specified structure in base 10.
 */
String *toStringS(Short *ptr) {
    return Short_toString(ptr-&gt;v);
}

/**
 * Returns a new String structure representing the specified short.
 *
 * @param s the short to be converted
 * @return the string representation of the specified short
 */
String *Short_toString(int16_t s) {
    char *str = malloc(_MAX_SHORT_STRLEN + 1);
    char buf[_MAX_SHORT_STRLEN];

    str[0] = '\0';
    // printing the string representation to the buffer
    sprintf(buf, "%hd", s);
    // creating the null-terminated string from the buffer
    strcat(str, buf);
    String *st = new_String(str);
    free(str);
    
    return st;
}

/**
 * Parses the string argument as a signed decimal short.
 *
 * @param s a String containing the short representation to be parsed
 * @return the short value represented by the argument in decimal.
 */
int16_t Short_parseShort(String *s) {
    String *str = trim(s);
    int16_t value = strtol(str-&gt;s, NULL, 10);
    free(str);
    
    return value;
}
</code>
<code lang="C++">#ifndef SHORT_INCLUDED
#define SHORT_INCLUDED

#include "String_.h"
#include &lt;cstdint&gt;

/**
 * The Short class wraps a value of primitive type int16_t (representing a short value) in an object.
 *
 * @author Petr Kozler (A13B0359P)
 */
class Short : public Comparable {
    // an inner value
    int16_t v;
public:
    /**
     * A constant holding the maximum value a short can have, 2^15-1.
     */
    static const int16_t MIN_VALUE;
    
    /**
     * A constant holding the minimum value a short can have, -2^15.
     */
    static const int16_t MAX_VALUE;
    
    Short(int16_t value);
    int16_t shortValue();
    int32_t compareTo(Object *anotherShort);
    static int32_t compare(int16_t x, int16_t y);
    bool equals(Object *obj);
    String *toString();
    static String *toString(int16_t s);
    static int16_t parseShort(String *s);
};

#endif // SHORT_INCLUDED


#include "Short.h"

#include &lt;string&gt;
#include &lt;cstdlib&gt;

const int16_t Short::MAX_VALUE = 32767;
const int16_t Short::MIN_VALUE = -32768;

/**
 * Constructs a newly allocated Short object that represents the specified
 * short value.
 *
 * @param value the value to be represented by the Short.
 */
Short::Short(int16_t value) {
    v = value;
}

/**
 * Returns the value of this Short as a short.
 *
 * @return the numeric value represented by this object after conversion to
 * type short.
 */
int16_t Short::shortValue() {
    return v;
}

/**
 * Compares two Short objects numerically.
 *
 * @param anotherShort the Short to be compared.
 * @return the value 0 if this Short is equal to the argument Short; a value
 * less than 0 if this Short is numerically less than the argument Short;
 * and a value greater than 0 if this Short is numerically greater than the
 * argument Short (signed comparison).
 */
int32_t Short::compareTo(Object *anotherShort) {
    return compare(v, ((Short *)anotherShort)-&gt;v);
}

/**
 * Compares two short values numerically.
 *
 * @param x the first short to compare
 * @param y the second short to compare
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
 * &gt; y
 */
int32_t Short::compare(int16_t x, int16_t y) {
    // positive number if x is greater, 0 if x equals y, negative number otherwise
    return x - y;
}

/**
 * Compares this object to the specified object.
 *
 * @param obj the object to compare with
 * @return true if the objects are the same; false otherwise.
 */
bool Short::equals(Object *obj) {
    // testing another object reference for a NULL value
    if (obj == nullptr) {
        return false;
    }

    // testing object class equality
    if (sizeof(this) != sizeof(*obj)) {
        return false;
    }

    // testing object fields equality
    return (v == ((Short *)obj)-&gt;v);
}

/**
 * Returns a String object representing this Short's value.
 *
 * @return a string representation of the value of this object in base 10.
 */
String *Short::toString() {
    return toString(v);
}

/**
 * Returns a new String object representing the specified short.
 *
 * @param s the short to be converted
 * @return the string representation of the specified short
 */
String *Short::toString(int16_t s) {
    return new String(std::to_string(s));
}

/**
 * Parses the string argument as a signed decimal short.
 *
 * @param s a String containing the short representation to be parsed
 * @return the short value represented by the argument in decimal.
 */
int16_t Short::parseShort(String *s) {
    String *str = s-&gt;trim();
    int16_t value = strtol(str-&gt;_s().c_str(), nullptr, 10);
    delete str;
    
    return value;
}
</code>
<code lang="C#">ï»¿using System;

namespace JavaClasses
{

    /// &lt;summary&gt;
    /// The Short class wraps a value of primitive type short in an object.
    /// &lt;/summary&gt;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;
    public class Short : Comparable
    {

        /// &lt;summary&gt;
        /// A constant holding the maximum value a short can have, 2^15-1.
        /// &lt;/summary&gt;
        public const short MAX_VALUE = 32767;

        /// &lt;summary&gt;
        /// A constant holding the minimum value a short can have, -2^15.
        /// &lt;/summary&gt;
        public const short MIN_VALUE = -32768;

        // an inner value
        private short v;

        /// &lt;summary&gt;
        /// Constructs a newly allocated Short object that represents the specified
        /// short value.
        /// &lt;/summary&gt;
        /// &lt;param name="value"&gt;the value to be represented by the Short.
        /// &lt;/param&gt;
        public Short(short value)
        {
            v = value;
        }

        /// &lt;summary&gt;
        /// Returns the value of this Short as a short.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the numeric value represented by this object after conversion to
        /// type short.
        /// &lt;/returns&gt;
        public short shortValue()
        {
            return v;
        }

        /// &lt;summary&gt;
        /// Compares two Short objects numerically.
        /// &lt;/summary&gt;
        /// &lt;param name="anotherShort"&gt;the Short to be compared.
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if this Short is equal to the argument Short; a value
        /// less than 0 if this Short is numerically less than the argument Short;
        /// and a value greater than 0 if this Short is numerically greater than the
        /// argument Short (signed comparison).
        /// &lt;/returns&gt;
        public override int compareTo(Object anotherShort)
        {
            return compare(v, (anotherShort as Short).v);
        }

        /// &lt;summary&gt;
        /// Compares two short values numerically.
        /// &lt;/summary&gt;
        /// &lt;param name="x"&gt;the first short to compare
        /// &lt;/param&gt;&lt;param name="y"&gt;the second short to compare
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
        /// &gt; y
        /// &lt;/returns&gt;
        public static int compare(short x, short y)
        {
            // positive number if x is greater, 0 if x equals y, negative number otherwise
            return x - y;
        }

        /// &lt;summary&gt;
        /// Compares this object to the specified object.
        /// &lt;/summary&gt;
        /// &lt;param name="obj"&gt;the object to compare with
        /// &lt;/param&gt;&lt;returns&gt;true if the objects are the same; false otherwise.
        /// &lt;/returns&gt;
        public override bool equals(Object obj)
        {
            // testing another object reference for a NULL value
            if (obj == null)
            {
                return false;
            }

            // testing object class equality
            if (GetType() != obj.GetType())
            {
                return false;
            }

            // testing object fields equality
            return v.Equals((obj as Short).v);
        }

        /// &lt;summary&gt;
        /// Returns a String object representing this Short's value.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;a string representation of the value of this object in base 10.
        /// &lt;/returns&gt;
        public override String toString()
        {
            return Short.toString(v);
        }

        /// &lt;summary&gt;
        /// Returns a new String object representing the specified short.
        /// &lt;/summary&gt;
        /// &lt;param name="s"&gt;the short to be converted
        /// &lt;/param&gt;&lt;returns&gt;the string representation of the specified short
        /// &lt;/returns&gt;
        public static String toString(short s)
        {
            return new String(s.ToString());
        }

        /// &lt;summary&gt;
        /// Parses the string argument as a signed decimal short.
        /// &lt;/summary&gt;
        /// &lt;param name="s"&gt;a String containing the short representation to be parsed
        /// &lt;/param&gt;&lt;returns&gt;the short value represented by the argument in decimal.
        /// &lt;/returns&gt;
        public static short parseShort(String s)
        {
            return short.Parse(s.ToString());
        }
        
        public static implicit operator Short(short original)
        {
            return new Short(original);
        }
        
    }

}
</code>
<code lang="Free Pascal">unit ShortUnit;

{$mode objfpc}{$H+}

interface

uses
  SysUtils, StringUnit;

type
  (**
   * The Short class wraps a value of primitive type smallInt (representing a short value) in an object.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  Short = class(Comparable)
    private
      var
        // an inner value
        v: smallInt;
    public
      const
          (**
           * A constant holding the maximum value a short can have, 2^15-1.
           *)
           MAX_VALUE = 32767;
          (**
           * A constant holding the minimum value a short can have, -2^15.
           *)
           MIN_VALUE = -32768;
      constructor create(value: smallInt);
      function shortValue() : smallInt;
      function compareTo(anotherShort: Object_) : longInt; override;
      class function compare(x, y: smallInt) : longInt;
      function equals_(obj: Object_) : boolean; override;
      function toString_() : String_; override;
      class function toString_(s: smallInt) : String_;
      class function parseShort(s: String_) : smallInt;
  end;

implementation

(**
 * Constructs a newly allocated Short object that represents the specified
 * short value.
 *
 * @param value the value to be represented by the Short.
 *)
constructor Short.create(value: smallInt);
begin
  v := value;
end;

(**
 * Returns the value of this Short as a short.
 *
 * @return the numeric value represented by this object after conversion to
 * type short.
 *)
function Short.shortValue() : smallInt;
begin
  shortValue := v;
end;

(**
 * Compares two Short objects numerically.
 *
 * @param anotherShort the Short to be compared.
 * @return the value 0 if this Short is equal to the argument Short; a value
 * less than 0 if this Short is numerically less than the argument Short;
 * and a value greater than 0 if this Short is numerically greater than the
 * argument Short (signed comparison).
 *)
function Short.compareTo(anotherShort: Object_) : longInt;
begin
  compareTo := compare(v, (anotherShort as Short).v);
end;

(**
 * Compares two short values numerically.
 *
 * @param x the first short to compare
 * @param y the second short to compare
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
 * &gt; y
 *)
class function Short.compare(x, y: smallInt) : longInt;
begin
  // positive number if x is greater, 0 if x equals y, negative number otherwise
  compare := x - y;
end;

(**
 * Compares this object to the specified object.
 *
 * @param obj the object to compare with
 * @return true if the objects are the same; false otherwise.
 *)
function Short.equals_(obj: Object_) : boolean;
begin
  // testing another object reference for a NULL value
  if obj = nil then begin
    exit(false);
  end;

  // testing object class equality
  if typeOf(self) &lt;&gt; typeOf(obj) then begin
    exit(false);
  end;

  // testing object fields equality
  equals_ := v = (obj as Short).v;
end;

(**
 * Returns a String object representing this Short's value.
 *
 * @return a string representation of the value of this object in base 10.
 *)
function Short.toString_() : String_;
begin
  toString_ := Short.toString_(v);
end;

(**
 * Returns a new String object representing the specified short.
 *
 * @param s the short to be converted
 * @return the string representation of the specified short
 *)
class function Short.toString_(s: smallInt) : String_;
begin
  toString_ := String_.create(IntToStr(s));
end;

(**
 * Parses the string argument as a signed decimal short.
 *
 * @param s a String containing the short representation to be parsed
 * @return the short value represented by the argument in decimal.
 *)
class function Short.parseShort(s: String_) : smallInt;
begin
  parseShort := strToInt(trim(s.strProperty));
end;

operator := (original: smallInt) s: Short;
begin
  s.create(original);
end;

end.

</code>

</codes>
