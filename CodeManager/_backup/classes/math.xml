<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef MATH_INCLUDED
#define	MATH_INCLUDED

#include &lt;stdint.h&gt;

/**
 * The module Math contains functions for performing basic numeric operations such as the elementary exponential,
 * logarithm, square root, and trigonometric functions.
 *
 * @author Petr Kozler (A13B0359P)
 */

/**
 * The double value that is closer than any other to e, the base of the natural logarithms.
 */
#define Math_E 2.7182818284590452354
/**
 * The double value that is closer than any other to pi, the ratio of the circumference of a circle to its diameter.
 */
#define Math_PI 3.14159265358979323846

double Math_absD(double a);
float Math_absF(float a);
int32_t Math_absI(int32_t a);
int64_t Math_absL(int64_t a);
double Math_maxD(double a, double b);
float Math_maxF(float a, float b);
int32_t Math_maxI(int32_t a, int32_t b);
int64_t Math_maxL(int64_t a, int64_t b);
double Math_minD(double a, double b);
float Math_minF(float a, float b);
int32_t Math_minI(int32_t a, int32_t b);
int64_t Math_minL(int64_t a, int64_t b);
double Math_pow(double a, double b);
double Math_sqrt(double a);
double Math_log(double a);
double Math_log10(double a);
double Math_sin(double a);
double Math_cos(double a);
double Math_tan(double a);
double Math_asin(double a);
double Math_acos(double a);
double Math_atan(double a);
int64_t Math_roundD(double a);
int32_t Math_roundF(float a);

#endif	/* MATH_INCLUDED */


#include "Math_.h"
#include "Double.h"
#include "Float.h"
#include "Long.h"
#include "Integer.h"

#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;

/**
 * Returns the absolute value of a double value.
 *
 * @param a the argument whose absolute value is to be determined
 * @return the absolute value of the argument.
 */
double Math_absD(double a) {
    return fabs(a);
}

/**
 * Returns the absolute value of a float value.
 *
 * @param a the argument whose absolute value is to be determined
 * @return the absolute value of the argument.
 */
float Math_absF(float a) {
    return fabsf(a);
}

/**
 * Returns the absolute value of an int value.
 *
 * @param a the argument whose absolute value is to be determined
 * @return the absolute value of the argument.
 */
int32_t Math_absI(int32_t a) {
    return abs(a);
}

/**
 * Returns the absolute value of a long value.
 *
 * @param a the argument whose absolute value is to be determined
 * @return the absolute value of the argument.
 */
int64_t Math_absL(int64_t a) {
    return llabs(a);
}

/**
 * Returns the greater of two double values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the larger of a and b.
 */
double Math_maxD(double a, double b) {
    return fmax(a, b);
}

/**
 * Returns the greater of two float values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the larger of a and b.
 */
float Math_maxF(float a, float b) {
    return fmaxf(a, b);
}

/**
 * Returns the greater of two int values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the larger of a and b.
 */
int32_t Math_maxI(int32_t a, int32_t b) {
    return fmaxl(a, b);
}

/**
 * Returns the greater of two long values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the larger of a and b.
 */
int64_t Math_maxL(int64_t a, int64_t b) {
    return fmaxl(a, b);
}

/**
 * Returns the smaller of two double values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the smaller of a and b.
 */
double Math_minD(double a, double b) {
    return fmin(a, b);
}

/**
 * Returns the smaller of two float values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the smaller of a and b.
 */
float Math_minF(float a, float b) {
    return fminf(a, b);
}

/**
 * Returns the smaller of two int values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the smaller of a and b.
 */
int32_t Math_minI(int32_t a, int32_t b) {
    return fminl(a, b);
}

/**
 * Returns the smaller of two long values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the smaller of a and b.
 */
int64_t Math_minL(int64_t a, int64_t b) {
    return fminl(a, b);
}

/**
 * Returns the value of the first argument raised to the power of the second
 * argument.
 *
 * @param a the base.
 * @param b the exponent.
 * @return the value a^b.
 */
double Math_pow(double a, double b) {
    return pow(a, b);
}

/**
 * Returns the correctly rounded positive square root of a double value.
 *
 * @param a a value.
 * @return the positive square root of a. If the argument is NaN or less
 * than zero, the result is NaN.
 */
double Math_sqrt(double a) {
    return sqrt(a);
}

/**
 * Returns the natural logarithm (base e) of a double value.
 *
 * @param a a value
 * @return the value ln a, the natural logarithm of a.
 */
double Math_log(double a) {
    return log(a);
}

/**
 * Returns the base 10 logarithm of a double value.
 *
 * @param a a value
 * @return the base 10 logarithm of a.
 */
double Math_log10(double a) {
    return log10(a);
}

/**
 * Returns the trigonometric sine of an angle.
 *
 * @param a an angle, in radians.
 * @return the sine of the argument.
 */
double Math_sin(double a) {
    return sin(a);
}

/**
 * Returns the trigonometric cosine of an angle.
 *
 * @param a an angle, in radians.
 * @return the cosine of the argument.
 */
double Math_cos(double a) {
    return cos(a);
}

/**
 * Returns the trigonometric tangent of an angle.
 *
 * @param a an angle, in radians.
 * @return the tangent of the argument.
 */
double Math_tan(double a) {
    return tan(a);
}

/**
 * Returns the arc sine of a value; the returned angle is in the range -pi/2
 * through pi/2.
 *
 * @param a the value whose arc sine is to be returned.
 * @return the arc sine of the argument.
 */
double Math_asin(double a) {
    return asin(a);
}

/**
 * Returns the arc cosine of a value; the returned angle is in the range 0.0
 * through pi.
 *
 * @param a the value whose arc cosine is to be returned.
 * @return the arc cosine of the argument.
 */
double Math_acos(double a) {
    return acos(a);
}

/**
 * Returns the arc tangent of a value; the returned angle is in the range
 * -pi/2 through pi/2.
 *
 * @param a the value whose arc tangent is to be returned.
 * @return the arc tangent of the argument.
 */
double Math_atan(double a) {
    return atan(a);
}

/**
 * Returns the closest long to the argument, with ties rounding up.
 *
 * @param a a floating-point value to be rounded to a long.
 * @return the value of the argument rounded to the nearest long value.
 */
int64_t Math_roundD(double a) {
    // if NaN, the result is 0
    if (Double_compare(a, Double_NaN) == 0) {
        return 0;
    }

    // if less than / equal to the corresponding integer type minimal value, the result is equal to that value
    if (Double_compare(a, Double_NEGATIVE_INFINITY) == 0
        || a &lt;= Long_MIN_VALUE) {
        return Long_MIN_VALUE;
    }

    // if greater than / equal to the corresponding integer type maximal value, the result is equal to that value
    if (Double_compare(a, Double_POSITIVE_INFINITY) == 0
        || a &gt;= Long_MAX_VALUE) {
        return Long_MAX_VALUE;
    }

    // rounding towards zero for negative values
    if (a &lt; 0 &amp;&amp; a - trunc(a) &lt;= -0.5) {
        return (int64_t)trunc(a);
    }

    // rounding away from zero for positive values
    return (int64_t)round(a);
}

/**
 * Returns the closest int to the argument, with ties rounding up.
 *
 * @param a a floating-point value to be rounded to an integer.
 * @return the value of the argument rounded to the nearest int value.
 */
int32_t Math_roundF(float a) {
    // if NaN, the result is 0
    if (Float_compare(a, Float_NaN) == 0) {
        return 0;
    }

    // if less than / equal to the corresponding integer type minimal value, the result is equal to that value
    if (Float_compare(a, Float_NEGATIVE_INFINITY) == 0
        || a &lt;= Integer_MIN_VALUE) {
        return Integer_MIN_VALUE;
    }

    // if greater than / equal to the corresponding integer type maximal value, the result is equal to that value
    if (Float_compare(a, Float_POSITIVE_INFINITY) == 0
        || a &gt;= Integer_MAX_VALUE) {
        return Integer_MAX_VALUE;
    }

    // rounding towards zero for negative values
    if (a &lt; 0 &amp;&amp; a - truncf(a) &lt;= -0.5) {
        return (int32_t)truncf(a);
    }

    // rounding away from zero for positive values
    return (int32_t)roundf(a);
}
</code>
<code lang="C++">#ifndef MATH_INCLUDED
#define	MATH_INCLUDED

#include &lt;cstdint&gt;

/**
 * The class Math contains methods for performing basic numeric operations such as the elementary exponential,
 * logarithm, square root, and trigonometric functions.
 *
 * @author Petr Kozler (A13B0359P)
 */
class Math {
public:
    static const double E;
    static const double PI;
    static double abs(double a);
    static float abs(float a);
    static int32_t abs(int32_t a);
    static int64_t abs(int64_t a);
    static double max(double a, double b);
    static float max(float a, float b);
    static int32_t max(int32_t a, int32_t b);
    static int64_t max(int64_t a, int64_t b);
    static double min(double a, double b);
    static float min(float a, float b);
    static int32_t min(int32_t a, int32_t b);
    static int64_t min(int64_t a, int64_t b);
    static double pow(double a, double b);
    static double sqrt(double a);
    static double log(double a);
    static double log10(double a);
    static double sin(double a);
    static double cos(double a);
    static double tan(double a);
    static double asin(double a);
    static double acos(double a);
    static double atan(double a);
    static int64_t round(double a);
    static int32_t round(float a);
};

#endif	// MATH_INCLUDED


#include "Math_.h"

#include &lt;cmath&gt;
#include &lt;stdlib.h&gt;
#include "Integer.h"
#include "Long.h"
#include "Float.h"
#include "Double.h"

/**
 * The double value that is closer than any other to e, the base of the natural logarithms.
 */
const double Math::E = 2.7182818284590452354;
/**
 * The double value that is closer than any other to pi, the ratio of the circumference of a circle to its diameter.
 */
const double Math::PI = 3.14159265358979323846;

/**
 * Returns the absolute value of a double value.
 *
 * @param a the argument whose absolute value is to be determined
 * @return the absolute value of the argument.
 */
double Math::abs(double a) {
    return std::fabs(a);
}

/**
 * Returns the absolute value of a float value.
 *
 * @param a the argument whose absolute value is to be determined
 * @return the absolute value of the argument.
 */
float Math::abs(float a) {
    return std::fabs(a);
}

/**
 * Returns the absolute value of an int value.
 *
 * @param a the argument whose absolute value is to be determined
 * @return the absolute value of the argument.
 */
int32_t Math::abs(int32_t a) {
    return std::abs(a);
}

/**
 * Returns the absolute value of a long value.
 *
 * @param a the argument whose absolute value is to be determined
 * @return the absolute value of the argument.
 */
int64_t Math::abs(int64_t a) {
    return ::llabs(a);
}

/**
 * Returns the greater of two double values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the larger of a and b.
 */
double Math::max(double a, double b) {
    return std::max(a, b);
}

/**
 * Returns the greater of two float values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the larger of a and b.
 */
float Math::max(float a, float b) {
    return std::max(a, b);
}

/**
 * Returns the greater of two int values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the larger of a and b.
 */
int32_t Math::max(int32_t a, int32_t b) {
    return std::max(a, b);
}

/**
 * Returns the greater of two long values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the larger of a and b.
 */
int64_t Math::max(int64_t a, int64_t b) {
    return std::max(a, b);
}

/**
 * Returns the smaller of two double values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the smaller of a and b.
 */
double Math::min(double a, double b) {
    return std::min(a, b);
}

/**
 * Returns the smaller of two float values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the smaller of a and b.
 */
float Math::min(float a, float b) {
    return std::min(a, b);
}

/**
 * Returns the smaller of two int values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the smaller of a and b.
 */
int32_t Math::min(int32_t a, int32_t b) {
    return std::min(a, b);
}

/**
 * Returns the smaller of two long values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the smaller of a and b.
 */
int64_t Math::min(int64_t a, int64_t b) {
    return std::min(a, b);
}

/**
 * Returns the value of the first argument raised to the power of the second
 * argument.
 *
 * @param a the base.
 * @param b the exponent.
 * @return the value a^b.
 */
double Math::pow(double a, double b) {
    return std::pow(a, b);
}

/**
 * Returns the correctly rounded positive square root of a double value.
 *
 * @param a a value.
 * @return the positive square root of a. If the argument is NaN or less
 * than zero, the result is NaN.
 */
double Math::sqrt(double a) {
    return std::sqrt(a);
}

/**
 * Returns the natural logarithm (base e) of a double value.
 *
 * @param a a value
 * @return the value ln a, the natural logarithm of a.
 */
double Math::log(double a) {
    return std::log(a);
}

/**
 * Returns the base 10 logarithm of a double value.
 *
 * @param a a value
 * @return the base 10 logarithm of a.
 */
double Math::log10(double a) {
    return std::log10(a);
}

/**
 * Returns the trigonometric sine of an angle.
 *
 * @param a an angle, in radians.
 * @return the sine of the argument.
 */
double Math::sin(double a) {
    return std::sin(a);
}

/**
 * Returns the trigonometric cosine of an angle.
 *
 * @param a an angle, in radians.
 * @return the cosine of the argument.
 */
double Math::cos(double a) {
    return std::cos(a);
}

/**
 * Returns the trigonometric tangent of an angle.
 *
 * @param a an angle, in radians.
 * @return the tangent of the argument.
 */
double Math::tan(double a) {
    return std::tan(a);
}

/**
 * Returns the arc sine of a value; the returned angle is in the range -pi/2
 * through pi/2.
 *
 * @param a the value whose arc sine is to be returned.
 * @return the arc sine of the argument.
 */
double Math::asin(double a) {
    return std::asin(a);
}

/**
 * Returns the arc cosine of a value; the returned angle is in the range 0.0
 * through pi.
 *
 * @param a the value whose arc cosine is to be returned.
 * @return the arc cosine of the argument.
 */
double Math::acos(double a) {
    return std::acos(a);
}

/**
 * Returns the arc tangent of a value; the returned angle is in the range
 * -pi/2 through pi/2.
 *
 * @param a the value whose arc tangent is to be returned.
 * @return the arc tangent of the argument.
 */
double Math::atan(double a) {
    return std::atan(a);
}

/**
 * Returns the closest long to the argument, with ties rounding up.
 *
 * @param a a floating-point value to be rounded to a long.
 * @return the value of the argument rounded to the nearest long value.
 */
int64_t Math::round(double a) {
    // if NaN, the result is 0
    if (Double::compare(a, Double::NaN) == 0) {
        return 0;
    }

    // if less than / equal to the corresponding integer type minimal value, the result is equal to that value
    if (Double::compare(a, Double::NEGATIVE_INFINITY) == 0
        || a &lt;= Long::MIN_VALUE) {
        return Long::MIN_VALUE;
    }

    // if greater than / equal to the corresponding integer type maximal value, the result is equal to that value
    if (Double::compare(a, Double::POSITIVE_INFINITY) == 0
        || a &gt;= Long::MAX_VALUE) {
        return Long::MAX_VALUE;
    }

    // rounding towards zero for negative values
    if (a &lt; 0 &amp;&amp; a - std::trunc(a) &lt;= -0.5) {
        return (int64_t)std::trunc(a);
    }

    // rounding away from zero for positive values
    return (int64_t) std::round(a);
}

/**
 * Returns the closest int to the argument, with ties rounding up.
 *
 * @param a a floating-point value to be rounded to an integer.
 * @return the value of the argument rounded to the nearest int value.
 */
int32_t Math::round(float a) {
    // if NaN, the result is 0
    if (Float::compare(a, Float::NaN) == 0) {
        return 0;
    }

    // if less than / equal to the corresponding integer type minimal value, the result is equal to that value
    if (Float::compare(a, Float::NEGATIVE_INFINITY) == 0
        || a &lt;= Integer::MIN_VALUE) {
        return Integer::MIN_VALUE;
    }

    // if greater than / equal to the corresponding integer type maximal value, the result is equal to that value
    if (Float::compare(a, Float::POSITIVE_INFINITY) == 0
        || a &gt;= Integer::MAX_VALUE) {
        return Integer::MAX_VALUE;
    }

    // rounding towards zero for negative values
    if (a &lt; 0 &amp;&amp; a - std::trunc(a) &lt;= -0.5) {
        return (int32_t)std::trunc(a);
    }

    // rounding away from zero for positive values
    return (int32_t) std::round(a);
}
</code>
<code lang="C#">﻿namespace JavaClasses
{

    /// &lt;summary&gt;
    /// The class Math contains methods for performing basic numeric operations such as the elementary exponential,
    /// logarithm, square root, and trigonometric functions.
    /// &lt;/summary&gt;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;
    public static class Math
    {

        /// &lt;summary&gt;
        /// The double value that is closer than any other to e, the base of the natural logarithms.
        /// &lt;/summary&gt;
        public const double E = 2.7182818284590452354;

        /// &lt;summary&gt;
        /// The double value that is closer than any other to pi, the ratio of the circumference of a circle to its diameter.
        /// &lt;/summary&gt;
        public const double PI = 3.14159265358979323846;

        /// &lt;summary&gt;
        /// Returns the absolute value of a double value.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the argument whose absolute value is to be determined
        /// &lt;/param&gt;&lt;returns&gt;the absolute value of the argument.
        /// &lt;/returns&gt;
        public static double abs(double a)
        {
            return System.Math.Abs(a);
        }

        /// &lt;summary&gt;
        /// Returns the absolute value of a float value.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the argument whose absolute value is to be determined
        /// &lt;/param&gt;&lt;returns&gt;the absolute value of the argument.
        /// &lt;/returns&gt;
        public static float abs(float a)
        {
            return System.Math.Abs(a);
        }

        /// &lt;summary&gt;
        /// Returns the absolute value of an int value.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the argument whose absolute value is to be determined
        /// &lt;/param&gt;&lt;returns&gt;the absolute value of the argument.
        /// &lt;/returns&gt;
        public static int abs(int a)
        {
            return System.Math.Abs(a);
        }

        /// &lt;summary&gt;
        /// Returns the absolute value of a long value.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the argument whose absolute value is to be determined
        /// &lt;/param&gt;&lt;returns&gt;the absolute value of the argument.
        /// &lt;/returns&gt;
        public static long abs(long a)
        {
            return System.Math.Abs(a);
        }

        /// &lt;summary&gt;
        /// Returns the greater of two double values.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;an argument.
        /// &lt;/param&gt;&lt;param name="b"&gt;another argument.
        /// &lt;/param&gt;&lt;returns&gt;the larger of a and b.
        /// &lt;/returns&gt;
        public static double max(double a, double b)
        {
            return System.Math.Max(a, b);
        }

        /// &lt;summary&gt;
        /// Returns the greater of two float values.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;an argument.
        /// &lt;/param&gt;&lt;param name="b"&gt;another argument.
        /// &lt;/param&gt;&lt;returns&gt;the larger of a and b.
        /// &lt;/returns&gt;
        public static float max(float a, float b)
        {
            return System.Math.Max(a, b);
        }

        /// &lt;summary&gt;
        /// Returns the greater of two int values.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;an argument.
        /// &lt;/param&gt;&lt;param name="b"&gt;another argument.
        /// &lt;/param&gt;&lt;returns&gt;the larger of a and b.
        /// &lt;/returns&gt;
        public static int max(int a, int b)
        {
            return System.Math.Max(a, b);
        }

        /// &lt;summary&gt;
        /// Returns the greater of two long values.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;an argument.
        /// &lt;/param&gt;&lt;param name="b"&gt;another argument.
        /// &lt;/param&gt;&lt;returns&gt;the larger of a and b.
        /// &lt;/returns&gt;
        public static long max(long a, long b)
        {
            return System.Math.Max(a, b);
        }

        /// &lt;summary&gt;
        /// Returns the smaller of two double values.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;an argument.
        /// &lt;/param&gt;&lt;param name="b"&gt;another argument.
        /// &lt;/param&gt;&lt;returns&gt;the smaller of a and b.
        /// &lt;/returns&gt;
        public static double min(double a, double b)
        {
            return System.Math.Min(a, b);
        }

        /// &lt;summary&gt;
        /// Returns the smaller of two float values.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;an argument.
        /// &lt;/param&gt;&lt;param name="b"&gt;another argument.
        /// &lt;/param&gt;&lt;returns&gt;the smaller of a and b.
        /// &lt;/returns&gt;
        public static float min(float a, float b)
        {
            return System.Math.Min(a, b);
        }

        /// &lt;summary&gt;
        /// Returns the smaller of two int values.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;an argument.
        /// &lt;/param&gt;&lt;param name="b"&gt;another argument.
        /// &lt;/param&gt;&lt;returns&gt;the smaller of a and b.
        /// &lt;/returns&gt;
        public static int min(int a, int b)
        {
            return System.Math.Min(a, b);
        }

        /// &lt;summary&gt;
        /// Returns the smaller of two long values.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;an argument.
        /// &lt;/param&gt;&lt;param name="b"&gt;another argument.
        /// &lt;/param&gt;&lt;returns&gt;the smaller of a and b.
        /// &lt;/returns&gt;
        public static long min(long a, long b)
        {
            return System.Math.Min(a, b);
        }

        /// &lt;summary&gt;
        /// Returns the value of the first argument raised to the power of the second
        /// argument.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the base.
        /// &lt;/param&gt;&lt;param name="b"&gt;the exponent.
        /// &lt;/param&gt;&lt;returns&gt;the value a^b.
        /// &lt;/returns&gt;
        public static double pow(double a, double b)
        {
            return System.Math.Pow(a, b);
        }

        /// &lt;summary&gt;
        /// Returns the correctly rounded positive square root of a double value.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;a value.
        /// &lt;/param&gt;&lt;returns&gt;the positive square root of a. If the argument is NaN or less
        /// than zero, the result is NaN.
        /// &lt;/returns&gt;
        public static double sqrt(double a)
        {
            return System.Math.Sqrt(a);
        }

        /// &lt;summary&gt;
        /// Returns the natural logarithm (base e) of a double value.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;a value
        /// &lt;/param&gt;&lt;returns&gt;the value ln a, the natural logarithm of a.
        /// &lt;/returns&gt;
        public static double log(double a)
        {
            return System.Math.Log(a);
        }

        /// &lt;summary&gt;
        /// Returns the base 10 logarithm of a double value.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;a value
        /// &lt;/param&gt;&lt;returns&gt;the base 10 logarithm of a.
        /// &lt;/returns&gt;
        public static double log10(double a)
        {
            return System.Math.Log10(a);
        }

        /// &lt;summary&gt;
        /// Returns the trigonometric sine of an angle.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;an angle, in radians.
        /// &lt;/param&gt;&lt;returns&gt;the sine of the argument.
        /// &lt;/returns&gt;
        public static double sin(double a)
        {
            return System.Math.Sin(a);
        }

        /// &lt;summary&gt;
        /// Returns the trigonometric cosine of an angle.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;an angle, in radians.
        /// &lt;/param&gt;&lt;returns&gt;the cosine of the argument.
        /// &lt;/returns&gt;
        public static double cos(double a)
        {
            return System.Math.Cos(a);
        }

        /// &lt;summary&gt;
        /// Returns the trigonometric tangent of an angle.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;an angle, in radians.
        /// &lt;/param&gt;&lt;returns&gt;the tangent of the argument.
        /// &lt;/returns&gt;
        public static double tan(double a)
        {
            return System.Math.Tan(a);
        }

        /// &lt;summary&gt;
        /// Returns the arc sine of a value; the returned angle is in the range -pi/2
        /// through pi/2.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the value whose arc sine is to be returned.
        /// &lt;/param&gt;&lt;returns&gt;the arc sine of the argument.
        /// &lt;/returns&gt;
        public static double asin(double a)
        {
            return System.Math.Asin(a);
        }

        /// &lt;summary&gt;
        /// Returns the arc cosine of a value; the returned angle is in the range 0.0
        /// through pi.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the value whose arc cosine is to be returned.
        /// &lt;/param&gt;&lt;returns&gt;the arc cosine of the argument.
        /// &lt;/returns&gt;
        public static double acos(double a)
        {
            return System.Math.Acos(a);
        }

        /// &lt;summary&gt;
        /// Returns the arc tangent of a value; the returned angle is in the range
        /// -pi/2 through pi/2.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the value whose arc tangent is to be returned.
        /// &lt;/param&gt;&lt;returns&gt;the arc tangent of the argument.
        /// &lt;/returns&gt;
        public static double atan(double a)
        {
            return System.Math.Atan(a);
        }

        /// &lt;summary&gt;
        /// Returns the closest long to the argument, with ties rounding up.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;a floating-point value to be rounded to a long.
        /// &lt;/param&gt;&lt;returns&gt;the value of the argument rounded to the nearest long value.
        /// &lt;/returns&gt;
        public static long round(double a)
        {
            // if NaN, the result is 0
            if (Double.compare(a, Double.NaN) == 0)
            {
                return 0;
            }

            // if less than / equal to the corresponding integer type minimal value, the result is equal to that value
            if (Double.compare(a, Double.NEGATIVE_INFINITY) == 0
                || a &lt;= Long.MIN_VALUE)
            {
                return Long.MIN_VALUE;
            }

            // if greater than / equal to the corresponding integer type maximal value, the result is equal to that value
            if (Double.compare(a, Double.POSITIVE_INFINITY) == 0
                || a &gt;= Long.MAX_VALUE)
            {
                return Long.MAX_VALUE;
            }

            // rounding towards zero for negative values
            if (a &lt; 0 &amp;&amp; a - System.Math.Truncate(a) &lt;= -0.5)
            {
                return (long)System.Math.Truncate(a);
            }

            // rounding away from zero for positive values
            return (long)System.Math.Round(a, System.MidpointRounding.AwayFromZero);
        }

        /// &lt;summary&gt;
        /// Returns the closest int to the argument, with ties rounding up.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;a floating-point value to be rounded to an integer.
        /// &lt;/param&gt;&lt;returns&gt;the value of the argument rounded to the nearest int value.
        /// &lt;/returns&gt;
        public static int round(float a)
        {
            // if NaN, the result is 0
            if (Float.compare(a, Float.NaN) == 0)
            {
                return 0;
            }

            // if less than / equal to the corresponding integer type minimal value, the result is equal to that value
            if (Float.compare(a, Float.NEGATIVE_INFINITY) == 0
                || a &lt;= Integer.MIN_VALUE)
            {
                return Integer.MIN_VALUE;
            }

            // if greater than / equal to the corresponding integer type maximal value, the result is equal to that value
            if (Float.compare(a, Float.POSITIVE_INFINITY) == 0
                || a &gt;= Integer.MAX_VALUE)
            {
                return Integer.MAX_VALUE;
            }

            // rounding towards zero for negative values
            if (a &lt; 0 &amp;&amp; a - (float)System.Math.Truncate(a) &lt;= -0.5f)
            {
                return (int)System.Math.Truncate(a);
            }

            // rounding away from zero for positive values
            return (int)System.Math.Round(a, System.MidpointRounding.AwayFromZero);
        }

    }

}
</code>
<code lang="Free Pascal">unit MathUnit;

{$mode objfpc}{$H+}

interface

uses
  Math, IntegerUnit, LongUnit, FloatUnit, DoubleUnit;

type
  (**
   * The class Math contains methods for performing basic numeric operations such as the elementary exponential,
   * logarithm, square root, and trigonometric functions.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  Math_ = class
    public
      const
          (**
           * The double value that is closer than any other to e, the base of the natural logarithms.
           *)
           E = 2.7182818284590452354;
          (**
           * The double value that is closer than any other to pi, the ratio of the circumference of a circle to its diameter.
           *)
           PI = 3.14159265358979323846;
      class function abs(a: double) : double;
      class function abs(a: single) : single;
      class function abs(a: longInt) : longInt;
      class function abs(a: int64) : int64;
      class function max(a: double; b: double) : double;
      class function max(a: single; b: single) : single;
      class function max(a: longInt; b: longInt) : longInt;
      class function max(a: int64; b: int64) : int64;
      class function min(a: double; b: double) : double;
      class function min(a: single; b: single) : single;
      class function min(a: longInt; b: longInt) : longInt;
      class function min(a: int64; b: int64) : int64;
      class function pow(a: double; b: double) : double;
      class function sqrt(a: double) : double;
      class function log(a: double) : double;
      class function log10(a: double) : double;
      class function sin(a: double) : double;
      class function cos(a: double) : double;
      class function tan(a: double) : double;
      class function asin(a: double) : double;
      class function acos(a: double) : double;
      class function atan(a: double) : double;
      class function round(a: double) : int64;
      class function round(a: single) : longInt;
  end;

implementation

(**
 * Returns the absolute value of a double value.
 *
 * @param a the argument whose absolute value is to be determined
 * @return the absolute value of the argument.
 *)
class function Math_.abs(a: double) : double;
begin
  abs := System.abs(a);
end;

(**
 * Returns the absolute value of a float value.
 *
 * @param a the argument whose absolute value is to be determined
 * @return the absolute value of the argument.
 *)
class function Math_.abs(a: single) : single;
begin
  abs := System.abs(a);
end;

(**
 * Returns the absolute value of an int value.
 *
 * @param a the argument whose absolute value is to be determined
 * @return the absolute value of the argument.
 *)
class function Math_.abs(a: longInt) : longInt;
begin
  abs := System.abs(a);
end;

(**
 * Returns the absolute value of a long value.
 *
 * @param a the argument whose absolute value is to be determined
 * @return the absolute value of the argument.
 *)
class function Math_.abs(a: int64) : int64;
begin
  abs := System.abs(a);
end;

(**
 * Returns the greater of two double values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the larger of a and b.
 *)
class function Math_.max(a: double; b: double) : double;
begin
  max := Math.max(a, b);
end;

(**
 * Returns the greater of two float values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the larger of a and b.
 *)
class function Math_.max(a: single; b: single) : single;
begin
  max := Math.max(a, b);
end;

(**
 * Returns the greater of two int values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the larger of a and b.
 *)
class function Math_.max(a: longInt; b: longInt) : longInt;
begin
  max := Math.max(a, b);
end;

(**
 * Returns the greater of two long values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the larger of a and b.
 *)
class function Math_.max(a: int64; b: int64) : int64;
begin
  max := Math.max(a, b);
end;

(**
 * Returns the smaller of two double values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the smaller of a and b.
 *)
class function Math_.min(a: double; b: double) : double;
begin
  min := Math.min(a, b);
end;

(**
 * Returns the smaller of two float values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the smaller of a and b.
 *)
class function Math_.min(a: single; b: single) : single;
begin
  min := Math.min(a, b);
end;

(**
 * Returns the smaller of two int values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the smaller of a and b.
 *)
class function Math_.min(a: longInt; b: longInt) : longInt;
begin
  min := Math.min(a, b);
end;

(**
 * Returns the smaller of two long values.
 *
 * @param a an argument.
 * @param b another argument.
 * @return the smaller of a and b.
 *)
class function Math_.min(a: int64; b: int64) : int64;
begin
  min := Math.min(a, b);
end;

(**
 * Returns the value of the first argument raised to the power of the second
 * argument.
 *
 * @param a the base.
 * @param b the exponent.
 * @return the value a^b.
 *)
class function Math_.pow(a: double; b: double) : double;
begin
  pow := power(a, b);
end;

(**
 * Returns the correctly rounded positive square root of a double value.
 *
 * @param a a value.
 * @return the positive square root of a. If the argument is NaN or less
 * than zero, the result is NaN.
 *)
class function Math_.sqrt(a: double) : double;
begin
  sqrt := System.sqrt(a);
end;

(**
 * Returns the natural logarithm (base e) of a double value.
 *
 * @param a a value
 * @return the value ln a, the natural logarithm of a.
 *)
class function Math_.log(a: double) : double;
begin
  log := ln(a);
end;

(**
 * Returns the base 10 logarithm of a double value.
 *
 * @param a a value
 * @return the base 10 logarithm of a.
 *)
class function Math_.log10(a: double) : double;
begin
  log10 := Math.log10(a);
end;

(**
 * Returns the trigonometric sine of an angle.
 *
 * @param a an angle, in radians.
 * @return the sine of the argument.
 *)
class function Math_.sin(a: double) : double;
begin
  sin := System.sin(a);
end;

(**
 * Returns the trigonometric cosine of an angle.
 *
 * @param a an angle, in radians.
 * @return the cosine of the argument.
 *)
class function Math_.cos(a: double) : double;
begin
  cos := System.cos(a);
end;

(**
 * Returns the trigonometric tangent of an angle.
 *
 * @param a an angle, in radians.
 * @return the tangent of the argument.
 *)
class function Math_.tan(a: double) : double;
begin
  tan := Math.tan(a);
end;

(**
 * Returns the arc sine of a value; the returned angle is in the range -pi/2
 * through pi/2.
 *
 * @param a the value whose arc sine is to be returned.
 * @return the arc sine of the argument.
 *)
class function Math_.asin(a: double) : double;
begin
  asin := arcsin(a);
end;

(**
 * Returns the arc cosine of a value; the returned angle is in the range 0.0
 * through pi.
 *
 * @param a the value whose arc cosine is to be returned.
 * @return the arc cosine of the argument.
 *)
class function Math_.acos(a: double) : double;
begin
  acos := arccos(a);
end;

(**
 * Returns the arc tangent of a value; the returned angle is in the range
 * -pi/2 through pi/2.
 *
 * @param a the value whose arc tangent is to be returned.
 * @return the arc tangent of the argument.
 *)
class function Math_.atan(a: double) : double;
begin
  atan := arctan(a);
end;

(**
 * Returns the closest long to the argument, with ties rounding up.
 *
 * @param a a floating-point value to be rounded to a long.
 * @return the value of the argument rounded to the nearest long value.
 *)
class function Math_.round(a: double) : int64;
begin
  // if NaN, the result is 0
  if Double_.compare(a, Double_.NaN) = 0 then begin
    exit(0);
  end;

  // if less than / equal to the corresponding integer type minimal value, the result is equal to that value
  if (Double_.compare(a, Double_.NEGATIVE_INFINITY) = 0)
  and (a &lt;= Long.MIN_VALUE) then begin
    exit(Long.MIN_VALUE);
  end;

  // if greater than / equal to the corresponding integer type maximal value, the result is equal to that value
  if (Double_.compare(a, Double_.POSITIVE_INFINITY) = 0)
  and (a &gt;= Long.MAX_VALUE) then begin
    exit(Long.MAX_VALUE);
  end;

  // rounding towards zero for negative values
  if (a &lt; 0) and (frac(a) &lt;= 0.5) then begin
    exit(trunc(a));
  end;

  // rounding away from zero for positive values
  if (a &gt; 0) and (frac(a) &gt;= 0.5) then begin
    exit(trunc(a) + 1);
  end;

  round := int64(System.round(a));
end;

(**
 * Returns the closest int to the argument, with ties rounding up.
 *
 * @param a a floating-point value to be rounded to an integer.
 * @return the value of the argument rounded to the nearest int value.
 *)
class function Math_.round(a: single) : longInt;
begin
  // if NaN, the result is 0
  if Float.compare(a, Float.NaN) = 0 then begin
    exit(0);
  end;

  // if less than / equal to the corresponding integer type minimal value, the result is equal to that value
  if (Float.compare(a, Float.NEGATIVE_INFINITY) = 0)
  and (a &lt;= Integer_.MIN_VALUE) then begin
    exit(Integer_.MIN_VALUE);
  end;

  // if greater than / equal to the corresponding integer type maximal value, the result is equal to that value
  if (Float.compare(a, Float.POSITIVE_INFINITY) = 0)
  and (a &gt;= Integer_.MAX_VALUE) then begin
    exit(Integer_.MAX_VALUE);
  end;

  // rounding towards zero for negative values
  if (a &lt; 0) and (frac(a) &lt;= 0.5) then begin
    exit(trunc(a));
  end;

  // rounding away from zero for positive values
  if (a &gt; 0) and (frac(a) &gt;= 0.5) then begin
    exit(trunc(a) + 1);
  end;

  round := longInt(System.round(a));
end;

end.

</code>

</codes>
