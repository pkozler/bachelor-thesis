<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef BYTE_INCLUDED
#define BYTE_INCLUDED

#include "String.h"
#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;

/**
 * The Byte struct wraps a value of the type int8_t, representing a byte value.
 *
 * @author Petr Kozler (A13B0359P)
 */

/**
 * A constant holding the maximum value a byte can have, 2^7-1.
 */
#define Byte_MAX_VALUE 127
/**
 * A constant holding the minimum value a byte can have, -2^7.
 */
#define Byte_MIN_VALUE -128

typedef struct {
    int8_t v;
} Byte;

Byte *new_Byte(int8_t value);
int8_t byteValue(Byte *ptr);
int32_t compareToB(Byte *ptr, Byte *anotherByte);
int32_t Byte_compare(int8_t x, int8_t y);
bool equalsB(Byte *ptr, Byte *obj);
String *toStringB(Byte *ptr);
String *Byte_toString(int8_t b);
int8_t Byte_parseByte(String *s);

#endif /* BYTE_INCLUDED */


#include "Byte.h"

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

// maximum possible string length of the int8_t value used as the string buffer size
#define _MAX_BYTE_STRLEN 4

/**
 * Constructs a newly allocated Byte structure that represents the specified
 * byte value.
 *
 * @param value the value to be represented by the Byte.
 */
Byte *new_Byte(int8_t value) {
    Byte *b = malloc(sizeof(Byte));
    b-&gt;v = value;

    return b;
}

/**
 * Returns the value of the specified Byte as a byte.
 *
 * @param ptr The allocated structure
 * @return the numeric value represented by the specified structure after conversion to
 * type byte.
 */
int8_t byteValue(Byte *ptr) {
    return ptr-&gt;v;
}

/**
 * Compares two Byte structures numerically.
 *
 * @param ptr The allocated structure
 * @param anotherByte the Byte to be compared.
 * @return the value 0 if the first Byte is equal to the second Byte; a value
 * less than 0 if the first Byte is numerically less than the second Byte; and
 * a value greater than 0 if the first Byte is numerically greater than the
 * second Byte (signed comparison).
 */
int32_t compareToB(Byte *ptr, Byte *anotherByte) {
    return Byte_compare(ptr-&gt;v, anotherByte-&gt;v);
}

/**
 * Compares two byte values numerically.
 *
 * @param x the first byte to compare
 * @param y the second byte to compare
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
 * &gt; y
 */
int32_t Byte_compare(int8_t x, int8_t y) {
    // positive number if x is greater, 0 if x equals y, negative number otherwise
    return x - y;
}

/**
 * Compares the one structure to the other.
 *
 * @param ptr The allocated structure
 * @param obj the structure to compare with
 * @return true if the structures are the same; false otherwise.
 */
bool equalsB(Byte *ptr, Byte *obj) {
    // testing another object reference for a NULL value
    if (ptr == NULL || obj == NULL) {
        return false;
    }

    // testing object class equality
    if (sizeof(*ptr) != sizeof(*obj)) {
        return false;
    }

    // testing object fields equality
    return (ptr-&gt;v == obj-&gt;v);
}

/**
 * Returns a String structure representing the specified Byte's value.
 *
 * @param ptr The allocated structure
 * @return a string representation of the value of the specified structure in base 10.
 */
String *toStringB(Byte *ptr) {
    return Byte_toString(ptr-&gt;v);
}

/**
 * Returns a new String structure representing the specified byte.
 *
 * @param b the byte to be converted
 * @return the string representation of the specified byte
 */
String *Byte_toString(int8_t b) {
    char *str = malloc(_MAX_BYTE_STRLEN + 1);
    char buf[_MAX_BYTE_STRLEN];

    str[0] = '\0';
    // printing the string representation to the buffer
    sprintf(buf, "%hd", b);
    // creating the null-terminated string from the buffer
    strcat(str, buf);
    String *s = new_String(str);
    free(str);
    
    return s;
}

/**
 * Parses the string argument as a signed decimal byte.
 *
 * @param s a String containing the byte representation to be parsed
 * @return the byte value represented by the argument in decimal
 */
int8_t Byte_parseByte(String *s) {
    String *str = trim(s);
    int8_t value = strtol(str-&gt;s, NULL, 10);
    free(str);
    
    return value;
}
</code>
<code lang="C++">#ifndef BYTE_INCLUDED
#define BYTE_INCLUDED

#include "String_.h"
#include &lt;cstdint&gt;

/**
 * The Byte class wraps a value of primitive type int8_t (representing a byte value) in an object.
 *
 * @author Petr Kozler (A13B0359P)
 */
class Byte : public Comparable {
    // an inner value
    int8_t v;
public:
    /**
     * A constant holding the maximum value a byte can have, 2^7-1.
     */
    static const int8_t MIN_VALUE;
    
    /**
     * A constant holding the minimum value a byte can have, -2^7.
     */
    static const int8_t MAX_VALUE;
    
    Byte(int8_t value);
    int8_t byteValue();
    int32_t compareTo(Object *anotherByte);
    static int32_t compare(int8_t x, int8_t y);
    bool equals(Object *obj);
    String *toString();
    static String *toString(int8_t b);
    static int8_t parseByte(String *s);
};

#endif // BYTE_INCLUDED


#include "Byte.h"

#include &lt;string&gt;
#include &lt;cstdlib&gt;

const int8_t Byte::MAX_VALUE = 127;
const int8_t Byte::MIN_VALUE = -128;

/**
 * Constructs a newly allocated Byte object that represents the specified
 * byte value.
 *
 * @param value the value to be represented by the Byte.
 */
Byte::Byte(int8_t value) {
    v = value;
}

/**
 * Returns the value of this Byte as a byte.
 *
 * @return the numeric value represented by this object after conversion to
 * type byte.
 */
int8_t Byte::byteValue() {
    return v;
}

/**
 * Compares two Byte objects numerically.
 *
 * @param anotherByte the Byte to be compared.
 * @return the value 0 if this Byte is equal to the argument Byte; a value
 * less than 0 if this Byte is numerically less than the argument Byte; and
 * a value greater than 0 if this Byte is numerically greater than the
 * argument Byte (signed comparison).
 */
int32_t Byte::compareTo(Object *anotherByte) {
    return compare(v, ((Byte *)anotherByte)-&gt;v);
}

/**
 * Compares two byte values numerically.
 *
 * @param x the first byte to compare
 * @param y the second byte to compare
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
 * &gt; y
 */
int32_t Byte::compare(int8_t x, int8_t y) {
    // positive number if x is greater, 0 if x equals y, negative number otherwise
    return x - y;
}

/**
 * Compares this object to the specified object.
 *
 * @param obj the object to compare with
 * @return true if the objects are the same; false otherwise.
 */
bool Byte::equals(Object *obj) {
    // testing another object reference for a NULL value
    if (obj == nullptr) {
        return false;
    }

    // testing object class equality
    if (sizeof(this) != sizeof(*obj)) {
        return false;
    }

    // testing object fields equality
    return (v == ((Byte *)obj)-&gt;v);
}

/**
 * Returns a String object representing this Byte's value.
 * 
 * @return a string representation of the value of this object in base 10.
 */
String *Byte::toString() {
    return toString(v);
}

/**
 * Returns a new String object representing the specified byte.
 *
 * @param b the byte to be converted
 * @return the string representation of the specified byte
 */
String *Byte::toString(int8_t b) {
    return new String(std::to_string(b));
}

/**
 * Parses the string argument as a signed decimal byte.
 *
 * @param s a String containing the byte representation to be parsed
 * @return the byte value represented by the argument in decimal
 */
int8_t Byte::parseByte(String *s) {
    String *str = s-&gt;trim();
    int8_t value = strtol(str-&gt;_s().c_str(), nullptr, 10);
    delete str;
    
    return value;
}
</code>
<code lang="C#">ï»¿using System;

namespace JavaClasses
{

    /// &lt;summary&gt;
    /// The Byte class wraps a value of primitive type sbyte (representing a byte value) in an object.
    /// &lt;/summary&gt;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;
    public class Byte : Comparable
    {

        /// &lt;summary&gt;
        /// A constant holding the maximum value a byte can have, 2^7-1.
        public const sbyte MAX_VALUE = 127;

        /// &lt;summary&gt;
        /// A constant holding the minimum value a byte can have, -2^7.
        public const sbyte MIN_VALUE = -128;

        // an inner value
        private sbyte v;

        /// &lt;summary&gt;
        /// Constructs a newly allocated Byte object that represents the specified
        /// byte value.
        /// &lt;/summary&gt;
        /// &lt;param name="value"&gt;the value to be represented by the Byte.
        /// &lt;/param&gt;
        public Byte(sbyte value)
        {
            v = value;
        }

        /// &lt;summary&gt;
        /// Returns the value of this Byte as a byte.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the numeric value represented by this object after conversion to
        /// type byte.
        /// &lt;/returns&gt;
        public sbyte byteValue()
        {
            return v;
        }

        /// &lt;summary&gt;
        /// Compares two Byte objects numerically.
        /// &lt;/summary&gt;
        /// &lt;param name="anotherByte"&gt;the Byte to be compared.
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if this Byte is equal to the argument Byte; a value
        /// less than 0 if this Byte is numerically less than the argument Byte; and
        /// a value greater than 0 if this Byte is numerically greater than the
        /// argument Byte (signed comparison).
        /// &lt;/returns&gt;
        public override int compareTo(Object anotherByte)
        {
            return compare(v, (anotherByte as Byte).v);
        }

        /// &lt;summary&gt;
        /// Compares two byte values numerically.
        /// &lt;/summary&gt;
        /// &lt;param name="x"&gt;the first byte to compare
        /// &lt;/param&gt;&lt;param name="y"&gt;the second byte to compare
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
        /// &gt; y
        /// &lt;/returns&gt;
        public static int compare(sbyte x, sbyte y)
        {
            // positive number if x is greater, 0 if x equals y, negative number otherwise
            return x - y;
        }

        /// &lt;summary&gt;
        /// Compares this object to the specified object.
        /// &lt;/summary&gt;
        /// &lt;param name="obj"&gt;the object to compare with
        /// &lt;/param&gt;&lt;returns&gt;true if the objects are the same; false otherwise.
        /// &lt;/returns&gt;
        public override bool equals(Object obj)
        {
            // testing another object reference for a NULL value
            if (obj == null)
            {
                return false;
            }

            // testing object class equality
            if (GetType() != obj.GetType())
            {
                return false;
            }

            // testing object fields equality
            return v.Equals((obj as Byte).v);
        }

        /// &lt;summary&gt;
        /// Returns a String object representing this Byte's value.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;a string representation of the value of this object in base 10.
        /// &lt;/returns&gt;
        public override String toString()
        {
            return Byte.toString(v);
        }

        /// &lt;summary&gt;
        /// Returns a new String object representing the specified byte.
        /// &lt;/summary&gt;
        /// &lt;param name="b"&gt;the byte to be converted
        /// &lt;/param&gt;&lt;returns&gt;the string representation of the specified byte
        /// &lt;/returns&gt;
        public static String toString(sbyte b)
        {
            return new String(b.ToString());
        }

        /// &lt;summary&gt;
        /// Parses the string argument as a signed decimal byte.
        /// &lt;/summary&gt;
        /// &lt;param name="s"&gt;a String containing the byte representation to be parsed
        /// &lt;/param&gt;&lt;returns&gt;the byte value represented by the argument in decimal
        /// &lt;/returns&gt;
        public static sbyte parseByte(String s)
        {
            return sbyte.Parse(s.ToString());
        }
        
        public static implicit operator Byte(sbyte original)
        {
            return new Byte(original);
        }
        
    }

}
</code>
<code lang="Free Pascal">unit ByteUnit;

{$mode objfpc}{$H+}

interface

uses
  SysUtils, StringUnit;

type
  (**
   * The Byte class wraps a value of primitive type shortInt (representing a byte value) in an object.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  Byte_ = class(Comparable)
    private
      var
        // an inner value
        v: shortInt;
    public
      const
          (**
           * A constant holding the maximum value a byte can have, 2^7-1.
           *)
           MAX_VALUE = 127;
          (**
           * A constant holding the minimum value a byte can have, -2^7.
           *)
           MIN_VALUE = -128;
      constructor create(value: shortInt);
      function byteValue() : shortInt;
      function compareTo(anotherByte: Object_) : longInt; override;
      class function compare(x, y: shortInt) : longInt;
      function equals_(obj: Object_) : boolean; override;
      function toString_() : String_; override;
      class function toString_(b: shortInt) : String_;
      class function parseByte(s: String_) : shortInt;
  end;

implementation

(**
 * Constructs a newly allocated Byte object that represents the specified
 * byte value.
 *
 * @param value the value to be represented by the Byte.
 *)
constructor Byte_.create(value: shortInt);
begin
  v := value;
end;

(**
 * Returns the value of this Byte as a byte.
 *
 * @return the numeric value represented by this object after conversion to
 * type byte.
 *)
function Byte_.byteValue() : shortInt;
begin
  byteValue := v;
end;

(**
 * Compares two Byte objects numerically.
 *
 * @param anotherByte the Byte to be compared.
 * @return the value 0 if this Byte is equal to the argument Byte; a value
 * less than 0 if this Byte is numerically less than the argument Byte; and
 * a value greater than 0 if this Byte is numerically greater than the
 * argument Byte (signed comparison).
 *)
function Byte_.compareTo(anotherByte: Object_) : longInt;
begin
  compareTo := compare(v, (anotherByte as Byte_).v);
end;

(**
 * Compares two byte values numerically.
 *
 * @param x the first byte to compare
 * @param y the second byte to compare
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
 * &gt; y
 *)
class function Byte_.compare(x, y: shortInt) : longInt;
begin
  // positive number if x is greater, 0 if x equals y, negative number otherwise
  compare := x - y;
end;

(**
 * Compares this object to the specified object.
 *
 * @param obj the object to compare with
 * @return true if the objects are the same; false otherwise.
 *)
function Byte_.equals_(obj: Object_) : boolean;
begin
  // testing another object reference for a NULL value
  if obj = nil then begin
    exit(false);
  end;

  // testing object class equality
  if typeOf(self) &lt;&gt; typeOf(obj) then begin
    exit(false);
  end;

  // testing object fields equality
  equals_ := v = (obj as Byte_).v;
end;

(**
 * Returns a String object representing this Byte's value.
 *
 * @return a string representation of the value of this object in base 10.
 *)
function Byte_.toString_() : String_;
begin
  toString_ := Byte_.toString_(v);
end;

(**
 * Returns a new String object representing the specified byte.
 *
 * @param b the byte to be converted
 * @return the string representation of the specified byte
 *)
class function Byte_.toString_(b: shortInt) : String_;
begin
  toString_ := String_.create(IntToStr(b));
end;

(**
 * Parses the string argument as a signed decimal byte.
 *
 * @param s a String containing the byte representation to be parsed
 * @return the byte value represented by the argument in decimal
 *)
class function Byte_.parseByte(s: String_) : shortInt;
begin
  parseByte := strToInt(trim(s.strProperty));
end;

operator := (original: shortint) s: Byte_;
begin
  s.create(original);
end;

end.

</code>

</codes>
