<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef CHARACTER_INCLUDED&#13;
#define	CHARACTER_INCLUDED&#13;
&#13;
#include "String.h"&#13;
#include &lt;stdbool.h&gt;&#13;
#include &lt;stdint.h&gt;&#13;
&#13;
/**&#13;
 * The Character struct wraps a value of the type char.&#13;
 *&#13;
 * @author Petr Kozler (A13B0359P)&#13;
 */&#13;
&#13;
typedef struct {&#13;
    char v;&#13;
} Character;&#13;
&#13;
Character *new_Character(char value);&#13;
char charValue(Character *ptr);&#13;
int32_t compareToC(Character *ptr, Character *anotherCharacter);&#13;
int32_t Character_compare(char x, char y);&#13;
bool equalsC(Character *ptr, Character *obj);&#13;
String *toStringC(Character *ptr);&#13;
String *Character_toString(char c);&#13;
bool Character_isDigit(char ch);&#13;
bool Character_isLetter(char ch);&#13;
&#13;
#endif	/* CHARACTER_INCLUDED */&#13;
&#13;
&#13;
#include "Character.h"&#13;
&#13;
#include &lt;stdio.h&gt;&#13;
#include &lt;stdlib.h&gt;&#13;
#include &lt;string.h&gt;&#13;
#include &lt;ctype.h&gt;&#13;
&#13;
#define _MAX_CHAR_STRLEN 1&#13;
&#13;
/**&#13;
 * Constructs a newly allocated Character structure that represents the&#13;
 * specified char value.&#13;
 *&#13;
 * @param value the value to be represented by the Character structure.&#13;
 */&#13;
Character *new_Character(char value) {&#13;
    Character *c = malloc(sizeof(Character));&#13;
    c-&gt;v = value;&#13;
&#13;
    return c;&#13;
}&#13;
&#13;
/**&#13;
 * Returns the value of the specified Character structure.&#13;
 *&#13;
 * @param ptr The allocated structure&#13;
 * @return the primitive char value represented by the specified structure.&#13;
 */&#13;
char charValue(Character *ptr) {&#13;
    return ptr-&gt;v;&#13;
}&#13;
&#13;
/**&#13;
 * Compares two Character structures numerically.&#13;
 *&#13;
 * @param ptr The allocated structure&#13;
 * @param anotherCharacter the Character to be compared.&#13;
 * @return the value 0 if the second Character is equal to the first Character;&#13;
 * a value less than 0 if the first Character is numerically less than the&#13;
 * second Character; and a value greater than 0 if the first Character is&#13;
 * numerically greater than the second Character (unsigned comparison).&#13;
 * Note that this is strictly a numerical comparison; it is not&#13;
 * locale-dependent.&#13;
 */&#13;
int32_t compareToC(Character *ptr, Character *anotherCharacter) {&#13;
    return Character_compare(ptr-&gt;v, anotherCharacter-&gt;v);&#13;
}&#13;
&#13;
/**&#13;
 * Compares two char values numerically.&#13;
 *&#13;
 * @param x the first char to compare&#13;
 * @param y the second char to compare&#13;
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x&#13;
 * &gt; y&#13;
 */&#13;
int32_t Character_compare(char x, char y) {&#13;
    return x - y;&#13;
}&#13;
&#13;
/**&#13;
 * Compares the one structure against the other.&#13;
 *&#13;
 * @param ptr The allocated structure&#13;
 * @param obj the structure to compare with.&#13;
 * @return true if the structures are the same; false otherwise.&#13;
 */&#13;
bool equalsC(Character *ptr, Character *obj) {&#13;
    if (ptr == NULL || obj == NULL) {&#13;
        return false;&#13;
    }&#13;
&#13;
    if (sizeof(*ptr) != sizeof(*obj)) {&#13;
        return false;&#13;
    }&#13;
&#13;
    return (ptr-&gt;v == obj-&gt;v);&#13;
}&#13;
&#13;
/**&#13;
 * Returns a String structure representing the specified Character's value.&#13;
 *&#13;
 * @param ptr The allocated structure&#13;
 * @return a string representation of the specified structure.&#13;
 */&#13;
String *toStringC(Character *ptr) {&#13;
    return Character_toString(ptr-&gt;v);&#13;
}&#13;
&#13;
/**&#13;
 * Returns a String structure representing the specified char.&#13;
 *&#13;
 * @param c the char to be converted&#13;
 * @return the string representation of the specified char&#13;
 */&#13;
String *Character_toString(char c) {&#13;
    char *str = malloc(_MAX_CHAR_STRLEN + 1);&#13;
    char buf[_MAX_CHAR_STRLEN];&#13;
&#13;
    str[0] = '\0';&#13;
    sprintf(buf, "%c", c);&#13;
    strcat(str, buf);&#13;
&#13;
    return new_String(str);&#13;
}&#13;
&#13;
/**&#13;
 * Determines if the specified character is a digit.&#13;
 *&#13;
 * @param ch the character to be tested.&#13;
 * @return true if the character is a digit; false otherwise.&#13;
 */&#13;
bool Character_isDigit(char ch) {&#13;
    return isdigit((int32_t)ch);&#13;
}&#13;
&#13;
/**&#13;
 * Determines if the specified character is a letter.&#13;
 *&#13;
 * @param ch the character to be tested.&#13;
 * @return true if the character is a letter; false otherwise.&#13;
 */&#13;
bool Character_isLetter(char ch) {&#13;
    return isalpha((int32_t)ch);&#13;
}&#13;
</code>
<code lang="C++">#ifndef CHARACTER_INCLUDED&#13;
#define	CHARACTER_INCLUDED&#13;
&#13;
#include "String_.h"&#13;
#include &lt;cstdint&gt;&#13;
&#13;
/**&#13;
 * The Character class wraps a value of the primitive type char in an object.&#13;
 *&#13;
 * @author Petr Kozler (A13B0359P)&#13;
 */&#13;
class Character : public Comparable&lt;Character&gt; {&#13;
    char v;&#13;
public:&#13;
    Character(char value);&#13;
    char charValue();&#13;
    int32_t compareTo(Character *anotherCharacter);&#13;
    static int32_t compare(char x, char y);&#13;
    bool equals(Character *obj);&#13;
    String *toString();&#13;
    static String *toString(char c);&#13;
    static bool isDigit(char ch);&#13;
    static bool isLetter(char ch);&#13;
};&#13;
&#13;
#endif	// CHARACTER_INCLUDED&#13;
&#13;
&#13;
#include "Character.h"

#include &lt;cctype&gt;

/**
 * Constructs a newly allocated Character object that represents the
 * specified char value.
 *
 * @param value the value to be represented by the Character object.
 */
Character::Character(char value) {
    v = value;
}

/**
 * Returns the value of this Character object.
 *
 * @return the primitive char value represented by this object.
 */
char Character::charValue() {
    return v;
}

/**
 * Compares two Character objects numerically.
 *
 * @param anotherCharacter the Character to be compared.
 * @return the value 0 if the argument Character is equal to this Character;
 * a value less than 0 if this Character is numerically less than the
 * Character argument; and a value greater than 0 if this Character is
 * numerically greater than the Character argument (unsigned comparison).
 * Note that this is strictly a numerical comparison; it is not
 * locale-dependent.
 */
int32_t Character::compareTo(Character *anotherCharacter) {
    return compare(v, anotherCharacter-&gt;v);
}

/**
 * Compares two char values numerically.
 *
 * @param x the first char to compare
 * @param y the second char to compare
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
 * &gt; y
 */
int32_t Character::compare(char x, char y) {
    return x - y;
}

/**
 * Compares this object against the specified object.
 *
 * @param obj the object to compare with.
 * @return true if the objects are the same; false otherwise.
 */
bool Character::equals(Character *obj) {
    if (obj == nullptr) {
        return false;
    }

    if (sizeof(*this) != sizeof(*obj)) {
        return false;
    }
    
    return (v == obj-&gt;v);
}

/**
 * Returns a String object representing this Character's value.
 * 
 * @return a string representation of this object.
 */
String *Character::toString() {
    return toString(v);
}

/**
 * Returns a String object representing the specified char.
 *
 * @param c the char to be converted
 * @return the string representation of the specified char
 */
String *Character::toString(char c) {
    return new String(std::string(1, c));
}

/**
 * Determines if the specified character is a digit.
 *
 * @param ch the character to be tested.
 * @return true if the character is a digit; false otherwise.
 */
bool Character::isDigit(char ch) {
    return isdigit(ch);
}

/**
 * Determines if the specified character is a letter.
 * 
 * @param ch the character to be tested.
 * @return true if the character is a letter; false otherwise.
 */
bool Character::isLetter(char ch) {
    return isalpha(ch);
}
</code>
<code lang="C#">ï»¿using System;&#13;
&#13;
namespace JavaClasses&#13;
{&#13;
&#13;
    /// &lt;summary&gt;&#13;
    /// The Character class wraps a value of the primitive type char in an object.&#13;
    /// &lt;/summary&gt;&#13;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;&#13;
    public class Character : Comparable&#13;
    {&#13;
&#13;
        // an inner value&#13;
        private char v;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Constructs a newly allocated Character object that represents the&#13;
        /// specified char value.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="value"&gt;the value to be represented by the Character object.&#13;
        /// &lt;/param&gt;&#13;
        public Character(char value)&#13;
        {&#13;
            v = value;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns the value of this Character object.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;the primitive char value represented by this object.&#13;
        /// &lt;/returns&gt;&#13;
        public char charValue()&#13;
        {&#13;
            return v;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Compares two Character objects numerically.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="anotherCharacter"&gt;the Character to be compared.&#13;
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if the argument Character is equal to this Character;&#13;
        /// a value less than 0 if this Character is numerically less than the&#13;
        /// Character argument; and a value greater than 0 if this Character is&#13;
        /// numerically greater than the Character argument (unsigned comparison).&#13;
        /// Note that this is strictly a numerical comparison; it is not&#13;
        /// locale-dependent.&#13;
        /// &lt;/returns&gt;&#13;
        public override int compareTo(Object anotherCharacter)&#13;
        {&#13;
            return compare(v, (anotherCharacter as Character).v);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Compares two char values numerically.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="x"&gt;the first char to compare&#13;
        /// &lt;/param&gt;&lt;param name="y"&gt;the second char to compare&#13;
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x&#13;
        /// &gt; y&#13;
        /// &lt;/returns&gt;&#13;
        public static int compare(char x, char y)&#13;
        {&#13;
            return x - y;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Compares this object against the specified object.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="obj"&gt;the object to compare with.&#13;
        /// &lt;/param&gt;&lt;returns&gt;true if the objects are the same; false otherwise.&#13;
        /// &lt;/returns&gt;&#13;
        public override bool equals(Object obj)&#13;
        {&#13;
            if (obj == null)&#13;
            {&#13;
                return false;&#13;
            }&#13;
&#13;
            if (GetType() != obj.GetType())&#13;
            {&#13;
                return false;&#13;
            }&#13;
&#13;
            return v.Equals((obj as Character).v);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns a String object representing this Character's value.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;a string representation of this object.&#13;
        /// &lt;/returns&gt;&#13;
        public override String toString()&#13;
        {&#13;
            return Character.toString(v);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns a String object representing the specified char.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="c"&gt;the char to be converted&#13;
        /// &lt;/param&gt;&lt;returns&gt;the string representation of the specified char&#13;
        /// &lt;/returns&gt;&#13;
        public static String toString(char c)&#13;
        {&#13;
            return new String(c.ToString());&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Determines if the specified character is a digit.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="ch"&gt;the character to be tested.&#13;
        /// &lt;/param&gt;&lt;returns&gt;true if the character is a digit; false otherwise.&#13;
        /// &lt;/returns&gt;&#13;
        public static bool isDigit(char ch)&#13;
        {&#13;
            return char.IsDigit(ch);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Determines if the specified character is a letter.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="ch"&gt;the character to be tested.&#13;
        /// &lt;/param&gt;&lt;returns&gt;true if the character is a letter; false otherwise.&#13;
        /// &lt;/returns&gt;&#13;
        public static bool isLetter(char ch)&#13;
        {&#13;
            return char.IsLetter(ch);&#13;
        }&#13;
        &#13;
        public static implicit operator Character(char original)&#13;
        {&#13;
            return new Character(original);&#13;
        }&#13;
        &#13;
    }&#13;
&#13;
}&#13;
</code>
<code lang="Free Pascal">unit CharacterUnit;

{$mode objfpc}{$H+}

interface

uses
  SysUtils, StringUnit;

type
  (**
   * The Character class wraps a value of the primitive type ansiChar (representing a char value) in an object.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  Character = class(Comparable)
    private
      var
        v: ansiChar;
    public
      constructor create(value: ansiChar);
      function charValue() : ansiChar;
      function compareTo(anotherCharacter: Object_) : longInt; override;
      class function compare(x, y: ansiChar) : longInt;
      function equals_(obj: Object_) : boolean; override;
      function toString_() : String_; override;
      class function toString_(c: ansiChar) : String_;
      class function isDigit(ch: ansiChar) : boolean;
      class function isLetter(ch: ansiChar) : boolean;
  end;

implementation

(**
 * Constructs a newly allocated Character object that represents the
 * specified char value.
 *
 * @param value the value to be represented by the Character object.
 *)
constructor Character.create(value: ansiChar);
begin
  v := value;
end;

(**
 * Returns the value of this Character object.
 *
 * @return the primitive char value represented by this object.
 *)
function Character.charValue() : ansiChar;
begin
  charValue := v;
end;

(**
 * Compares two Character objects numerically.
 *
 * @param anotherCharacter the Character to be compared.
 * @return the value 0 if the argument Character is equal to this Character;
 * a value less than 0 if this Character is numerically less than the
 * Character argument; and a value greater than 0 if this Character is
 * numerically greater than the Character argument (unsigned comparison).
 * Note that this is strictly a numerical comparison; it is not
 * locale-dependent.
 *)
function Character.compareTo(anotherCharacter: Object_) : longInt;
begin
  compareTo := compare(v, (anotherCharacter as Character).v);
end;

(**
 * Compares two char values numerically.
 *
 * @param x the first char to compare
 * @param y the second char to compare
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
 * &gt; y
 *)
class function Character.compare(x, y: ansiChar) : longInt;
begin
  compare := shortInt(x) - shortInt(y);
end;

(**
 * Compares this object against the specified object.
 *
 * @param obj the object to compare with.
 * @return true if the objects are the same; false otherwise.
 *)
function Character.equals_(obj: Object_) : boolean;
begin
  if obj = nil then begin
    exit(false);
  end;

  if typeOf(self) &lt;&gt; typeOf(obj) then begin
    exit(false);
  end;

  equals_ := v = (obj as Character).v;
end;

(**
 * Returns a String object representing this Character's value.
 *
 * @return a string representation of this object.
 *)
function Character.toString_() : String_;
begin
  toString_ := Character.toString_(v);
end;

(**
 * Returns a String object representing the specified char.
 *
 * @param c the char to be converted
 * @return the string representation of the specified char
 *)
class function Character.toString_(c: ansiChar) : String_;
begin
  toString_ := String_.create(c);
end;

(**
 * Determines if the specified character is a digit.
 *
 * @param ch the character to be tested.
 * @return true if the character is a digit; false otherwise.
 *)
class function Character.isDigit(ch: ansiChar) : boolean;
begin
  isDigit := ((ch &gt;= '0') and (ch &lt;= '9'));
end;

(**
 * Determines if the specified character is a letter.
 *
 * @param ch the character to be tested.
 * @return true if the character is a letter; false otherwise.
 *)
class function Character.isLetter(ch: ansiChar) : boolean;
begin
  isLetter := (((ch &gt;= 'A') and (ch &lt;= 'Z'))
               or ((ch &gt;= 'a') and (ch &lt;= 'z')));
end;

operator := (original: ansiChar) s: Character;
begin
  s.create(original);
end;

end.

</code>

</codes>
