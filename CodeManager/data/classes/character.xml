<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef CHARACTER_INCLUDED
#define	CHARACTER_INCLUDED

#include "String_.h"
#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;

/**
 * The Character struct wraps a value of the type char.
 *
 * @author Petr Kozler (A13B0359P)
 */

typedef struct {
    char v;
} Character;

Character *new_Character(char value);
char charValue(Character *ptr);
int32_t compareToC(Character *ptr, Character *anotherCharacter);
int32_t Character_compare(char x, char y);
bool equalsC(Character *ptr, Character *obj);
String *toStringC(Character *ptr);
String *Character_toString(char c);
bool Character_isDigit(char ch);
bool Character_isLetter(char ch);

#endif	/* CHARACTER_INCLUDED */


#include "Character.h"

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;ctype.h&gt;

// maximum possible string length of the char value used as the string buffer size
#define _MAX_CHAR_STRLEN 1

/**
 * Constructs a newly allocated Character structure that represents the
 * specified char value.
 *
 * @param value the value to be represented by the Character structure.
 */
Character *new_Character(char value) {
    Character *c = malloc(sizeof(Character));
    c-&gt;v = value;

    return c;
}

/**
 * Returns the value of the specified Character structure.
 *
 * @param ptr The allocated structure
 * @return the primitive char value represented by the specified structure.
 */
char charValue(Character *ptr) {
    return ptr-&gt;v;
}

/**
 * Compares two Character structures numerically.
 *
 * @param ptr The allocated structure
 * @param anotherCharacter the Character to be compared.
 * @return the value 0 if the second Character is equal to the first Character;
 * a value less than 0 if the first Character is numerically less than the
 * second Character; and a value greater than 0 if the first Character is
 * numerically greater than the second Character (unsigned comparison).
 * Note that this is strictly a numerical comparison; it is not
 * locale-dependent.
 */
int32_t compareToC(Character *ptr, Character *anotherCharacter) {
    return Character_compare(ptr-&gt;v, anotherCharacter-&gt;v);
}

/**
 * Compares two char values numerically.
 *
 * @param x the first char to compare
 * @param y the second char to compare
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
 * &gt; y
 */
int32_t Character_compare(char x, char y) {
    // positive number if x is greater, 0 if x equals y, negative number otherwise
    return x - y;
}

/**
 * Compares the one structure against the other.
 *
 * @param ptr The allocated structure
 * @param obj the structure to compare with.
 * @return true if the structures are the same; false otherwise.
 */
bool equalsC(Character *ptr, Character *obj) {
    // testing another object reference for a NULL value
    if (ptr == NULL || obj == NULL) {
        return false;
    }

    // testing object class equality
    if (sizeof(*ptr) != sizeof(*obj)) {
        return false;
    }

    // testing object fields equality
    return (ptr-&gt;v == obj-&gt;v);
}

/**
 * Returns a String structure representing the specified Character's value.
 *
 * @param ptr The allocated structure
 * @return a string representation of the specified structure.
 */
String *toStringC(Character *ptr) {
    return Character_toString(ptr-&gt;v);
}

/**
 * Returns a String structure representing the specified char.
 *
 * @param c the char to be converted
 * @return the string representation of the specified char
 */
String *Character_toString(char c) {
    char *str = malloc(_MAX_CHAR_STRLEN + 1);

    // creating the null-terminated string from the char
    str[0] = c;
    str[1] = '\0';
    String *s = new_String(str);
    free(str);
    
    return s;
}

/**
 * Determines if the specified character is a digit.
 *
 * @param ch the character to be tested.
 * @return true if the character is a digit; false otherwise.
 */
bool Character_isDigit(char ch) {
    return isdigit((int32_t)ch);
}

/**
 * Determines if the specified character is a letter.
 *
 * @param ch the character to be tested.
 * @return true if the character is a letter; false otherwise.
 */
bool Character_isLetter(char ch) {
    return isalpha((int32_t)ch);
}
</code>
<code lang="C++">#ifndef CHARACTER_INCLUDED
#define	CHARACTER_INCLUDED

#include "String_.h"
#include &lt;cstdint&gt;

/**
 * The Character class wraps a value of the primitive type char in an object.
 *
 * @author Petr Kozler (A13B0359P)
 */
class Character : public Comparable {
    // an inner value
    char v;
public:
    Character(char value);
    char charValue();
    int32_t compareTo(Object *anotherCharacter);
    static int32_t compare(char x, char y);
    bool equals(Object *obj);
    String *toString();
    static String *toString(char c);
    static bool isDigit(char ch);
    static bool isLetter(char ch);
};

#endif	// CHARACTER_INCLUDED


#include "Character.h"

#include &lt;cctype&gt;

/**
 * Constructs a newly allocated Character object that represents the
 * specified char value.
 *
 * @param value the value to be represented by the Character object.
 */
Character::Character(char value) {
    v = value;
}

/**
 * Returns the value of this Character object.
 *
 * @return the primitive char value represented by this object.
 */
char Character::charValue() {
    return v;
}

/**
 * Compares two Character objects numerically.
 *
 * @param anotherCharacter the Character to be compared.
 * @return the value 0 if the argument Character is equal to this Character;
 * a value less than 0 if this Character is numerically less than the
 * Character argument; and a value greater than 0 if this Character is
 * numerically greater than the Character argument (unsigned comparison).
 * Note that this is strictly a numerical comparison; it is not
 * locale-dependent.
 */
int32_t Character::compareTo(Object *anotherCharacter) {
    return compare(v, ((Character *)anotherCharacter)-&gt;v);
}

/**
 * Compares two char values numerically.
 *
 * @param x the first char to compare
 * @param y the second char to compare
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
 * &gt; y
 */
int32_t Character::compare(char x, char y) {
    // positive number if x is greater, 0 if x equals y, negative number otherwise
    return x - y;
}

/**
 * Compares this object against the specified object.
 *
 * @param obj the object to compare with.
 * @return true if the objects are the same; false otherwise.
 */
bool Character::equals(Object *obj) {
    // testing another object reference for a NULL value
    if (obj == nullptr) {
        return false;
    }

    // testing object class equality
    if (sizeof(this) != sizeof(*obj)) {
        return false;
    }

    // testing object fields equality
    return (v == ((Character *)obj)-&gt;v);
}

/**
 * Returns a String object representing this Character's value.
 * 
 * @return a string representation of this object.
 */
String *Character::toString() {
    return toString(v);
}

/**
 * Returns a String object representing the specified char.
 *
 * @param c the char to be converted
 * @return the string representation of the specified char
 */
String *Character::toString(char c) {
    return new String(std::string(1, c));
}

/**
 * Determines if the specified character is a digit.
 *
 * @param ch the character to be tested.
 * @return true if the character is a digit; false otherwise.
 */
bool Character::isDigit(char ch) {
    return isdigit(ch);
}

/**
 * Determines if the specified character is a letter.
 * 
 * @param ch the character to be tested.
 * @return true if the character is a letter; false otherwise.
 */
bool Character::isLetter(char ch) {
    return isalpha(ch);
}
</code>
<code lang="C#">ï»¿using System;

namespace JavaClasses
{

    /// &lt;summary&gt;
    /// The Character class wraps a value of the primitive type char in an object.
    /// &lt;/summary&gt;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;
    public class Character : Comparable
    {

        // an inner value
        private char v;

        /// &lt;summary&gt;
        /// Constructs a newly allocated Character object that represents the
        /// specified char value.
        /// &lt;/summary&gt;
        /// &lt;param name="value"&gt;the value to be represented by the Character object.
        /// &lt;/param&gt;
        public Character(char value)
        {
            v = value;
        }

        /// &lt;summary&gt;
        /// Returns the value of this Character object.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the primitive char value represented by this object.
        /// &lt;/returns&gt;
        public char charValue()
        {
            return v;
        }

        /// &lt;summary&gt;
        /// Compares two Character objects numerically.
        /// &lt;/summary&gt;
        /// &lt;param name="anotherCharacter"&gt;the Character to be compared.
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if the argument Character is equal to this Character;
        /// a value less than 0 if this Character is numerically less than the
        /// Character argument; and a value greater than 0 if this Character is
        /// numerically greater than the Character argument (unsigned comparison).
        /// Note that this is strictly a numerical comparison; it is not
        /// locale-dependent.
        /// &lt;/returns&gt;
        public override int compareTo(Object anotherCharacter)
        {
            return compare(v, (anotherCharacter as Character).v);
        }

        /// &lt;summary&gt;
        /// Compares two char values numerically.
        /// &lt;/summary&gt;
        /// &lt;param name="x"&gt;the first char to compare
        /// &lt;/param&gt;&lt;param name="y"&gt;the second char to compare
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
        /// &gt; y
        /// &lt;/returns&gt;
        public static int compare(char x, char y)
        {
            // positive number if x is greater, 0 if x equals y, negative number otherwise
            return x - y;
        }

        /// &lt;summary&gt;
        /// Compares this object against the specified object.
        /// &lt;/summary&gt;
        /// &lt;param name="obj"&gt;the object to compare with.
        /// &lt;/param&gt;&lt;returns&gt;true if the objects are the same; false otherwise.
        /// &lt;/returns&gt;
        public override bool equals(Object obj)
        {
            // testing another object reference for a NULL value
            if (obj == null)
            {
                return false;
            }

            // testing object class equality
            if (GetType() != obj.GetType())
            {
                return false;
            }

            // testing object fields equality
            return v.Equals((obj as Character).v);
        }

        /// &lt;summary&gt;
        /// Returns a String object representing this Character's value.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;a string representation of this object.
        /// &lt;/returns&gt;
        public override String toString()
        {
            return Character.toString(v);
        }

        /// &lt;summary&gt;
        /// Returns a String object representing the specified char.
        /// &lt;/summary&gt;
        /// &lt;param name="c"&gt;the char to be converted
        /// &lt;/param&gt;&lt;returns&gt;the string representation of the specified char
        /// &lt;/returns&gt;
        public static String toString(char c)
        {
            return new String(c.ToString());
        }

        /// &lt;summary&gt;
        /// Determines if the specified character is a digit.
        /// &lt;/summary&gt;
        /// &lt;param name="ch"&gt;the character to be tested.
        /// &lt;/param&gt;&lt;returns&gt;true if the character is a digit; false otherwise.
        /// &lt;/returns&gt;
        public static bool isDigit(char ch)
        {
            return char.IsDigit(ch);
        }

        /// &lt;summary&gt;
        /// Determines if the specified character is a letter.
        /// &lt;/summary&gt;
        /// &lt;param name="ch"&gt;the character to be tested.
        /// &lt;/param&gt;&lt;returns&gt;true if the character is a letter; false otherwise.
        /// &lt;/returns&gt;
        public static bool isLetter(char ch)
        {
            return char.IsLetter(ch);
        }
        
        public static implicit operator Character(char original)
        {
            return new Character(original);
        }
        
    }

}
</code>
<code lang="Free Pascal">unit CharacterUnit;

{$mode objfpc}{$H+}

interface

uses
  SysUtils, StringUnit;

type
  (**
   * The Character class wraps a value of the primitive type ansiChar (representing a char value) in an object.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  Character = class(Comparable)
    private
      var
        // an inner value
        v: ansiChar;
    public
      constructor create(value: ansiChar);
      function charValue() : ansiChar;
      function compareTo(anotherCharacter: Object_) : longInt; override;
      class function compare(x, y: ansiChar) : longInt;
      function equals_(obj: Object_) : boolean; override;
      function toString_() : String_; override;
      class function toString_(c: ansiChar) : String_;
      class function isDigit(ch: ansiChar) : boolean;
      class function isLetter(ch: ansiChar) : boolean;
  end;

implementation

(**
 * Constructs a newly allocated Character object that represents the
 * specified char value.
 *
 * @param value the value to be represented by the Character object.
 *)
constructor Character.create(value: ansiChar);
begin
  v := value;
end;

(**
 * Returns the value of this Character object.
 *
 * @return the primitive char value represented by this object.
 *)
function Character.charValue() : ansiChar;
begin
  charValue := v;
end;

(**
 * Compares two Character objects numerically.
 *
 * @param anotherCharacter the Character to be compared.
 * @return the value 0 if the argument Character is equal to this Character;
 * a value less than 0 if this Character is numerically less than the
 * Character argument; and a value greater than 0 if this Character is
 * numerically greater than the Character argument (unsigned comparison).
 * Note that this is strictly a numerical comparison; it is not
 * locale-dependent.
 *)
function Character.compareTo(anotherCharacter: Object_) : longInt;
begin
  compareTo := compare(v, (anotherCharacter as Character).v);
end;

(**
 * Compares two char values numerically.
 *
 * @param x the first char to compare
 * @param y the second char to compare
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
 * &gt; y
 *)
class function Character.compare(x, y: ansiChar) : longInt;
begin
  // positive number if x is greater, 0 if x equals y, negative number otherwise
  compare := shortInt(x) - shortInt(y);
end;

(**
 * Compares this object against the specified object.
 *
 * @param obj the object to compare with.
 * @return true if the objects are the same; false otherwise.
 *)
function Character.equals_(obj: Object_) : boolean;
begin
  // testing another object reference for a NULL value
  if obj = nil then begin
    exit(false);
  end;

  // testing object class equality
  if typeOf(self) &lt;&gt; typeOf(obj) then begin
    exit(false);
  end;

  // testing object fields equality
  equals_ := v = (obj as Character).v;
end;

(**
 * Returns a String object representing this Character's value.
 *
 * @return a string representation of this object.
 *)
function Character.toString_() : String_;
begin
  toString_ := Character.toString_(v);
end;

(**
 * Returns a String object representing the specified char.
 *
 * @param c the char to be converted
 * @return the string representation of the specified char
 *)
class function Character.toString_(c: ansiChar) : String_;
begin
  toString_ := String_.create(c);
end;

(**
 * Determines if the specified character is a digit.
 *
 * @param ch the character to be tested.
 * @return true if the character is a digit; false otherwise.
 *)
class function Character.isDigit(ch: ansiChar) : boolean;
begin
  isDigit := ((ch &gt;= '0') and (ch &lt;= '9'));
end;

(**
 * Determines if the specified character is a letter.
 *
 * @param ch the character to be tested.
 * @return true if the character is a letter; false otherwise.
 *)
class function Character.isLetter(ch: ansiChar) : boolean;
begin
  isLetter := (((ch &gt;= 'A') and (ch &lt;= 'Z'))
               or ((ch &gt;= 'a') and (ch &lt;= 'z')));
end;

operator := (original: ansiChar) s: Character;
begin
  s.create(original);
end;

end.

</code>

</codes>
