<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef STRINGTOKENIZER_INCLUDED
#define	STRINGTOKENIZER_INCLUDED

#include "String_.h"
#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;

/**
 * The string tokenizer module allows an application to break a string into tokens.
 *
 * @author Petr Kozler (A13B0359P)
 */

typedef struct {
    // string token array
    char **tokens;
    // token array length
    int32_t tokensLength;
    // current position in the token array
    int32_t tokenCounter;
} StringTokenizer;

StringTokenizer *new_StringTokenizer(String *str);
StringTokenizer *new_StringTokenizerDelim(String *str, String *delim);
void delete_StringTokenizer(StringTokenizer *ptr);
int32_t countTokens(StringTokenizer *ptr);
bool hasMoreTokens(StringTokenizer *ptr);
String *nextToken(StringTokenizer *ptr);

#endif	/* STRINGTOKENIZER_INCLUDED */


#include "StringTokenizer.h"
#include "ArrayList.h"
#include "System.h"

#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;wchar.h&gt;

/**
 * Constructs a string tokenizer for the specified string.
 *
 * @param str a string to be parsed.
 */
StringTokenizer *new_StringTokenizer(String *str) {
    return new_StringTokenizerDelim(str, new_String(" \t\n\r\f"));
}

/**
 * Constructs a string tokenizer for the specified string.
 *
 * @param str a string to be parsed.
 * @param delim the delimiters.
 */
StringTokenizer *new_StringTokenizerDelim(String *str, String *delim) {
    StringTokenizer *strTok = malloc(sizeof(StringTokenizer));
    char *ch = strpbrk(str-&gt;s, delim-&gt;s);
    
    // determining the greatest possible length of the token array
    for (strTok-&gt;tokensLength = 1; ch != NULL; strTok-&gt;tokensLength++) {
        ch = strpbrk(ch + 1, delim-&gt;s);
    }
    
    strTok-&gt;tokenCounter = 0;
    // allocating the token array with the determined length
    strTok-&gt;tokens = (char **) malloc(strTok-&gt;tokensLength * sizeof(char *));
    
    char *s = strtok(str-&gt;s, delim-&gt;s);
    int32_t i = 0;
    
    // inserting the tokens into the token array
    while (s != NULL) {
        strTok-&gt;tokens[i] = s;
        i++;
        s = strtok(NULL, delim-&gt;s);
    }

    strTok-&gt;tokensLength = i;
    // reallocating the token array to the exact length
    strTok-&gt;tokens = realloc(strTok-&gt;tokens, strTok-&gt;tokensLength * sizeof(char *));
    
    return strTok;
}

/*
    Destructs the StringTokenizer.
 */
void delete_StringTokenizer(StringTokenizer *ptr) {
    // deallocating the memory for the each string token
    int32_t i;
    for (i = 0; i &lt; ptr-&gt;tokensLength; i++) {
        free(ptr-&gt;tokens[i]);
    }
    
    free(ptr-&gt;tokens);
    free(ptr);
}

/**
 * Calculates the number of times that the specified tokenizer's nextToken function can
 * be called before it results in undefined behavior.
 *
 * @param ptr The allocated structure
 * @return the number of tokens remaining in the string using the current
 * delimiter set.
 */
int32_t countTokens(StringTokenizer *ptr) {
    return ptr-&gt;tokensLength - ptr-&gt;tokenCounter;
}

/**
 * Tests if there are more tokens available from the specified tokenizer's string.
 *
 * @param ptr The allocated structure
 * @return true if and only if there is at least one token in the string
 * after the current position; false otherwise.
 */
bool hasMoreTokens(StringTokenizer *ptr) {
    return (countTokens(ptr) &gt; 0);
}

/**
 * Returns the next token from the specified string tokenizer.
 *
 * @param ptr The allocated structure
 * @return the next token from the specified string tokenizer.
 */
String *nextToken(StringTokenizer *ptr) {
    String *str = new_String(ptr-&gt;tokens[ptr-&gt;tokenCounter]);
    ptr-&gt;tokenCounter++;
    
    return str;
}
</code>
<code lang="C++">#ifndef STRINGTOKENIZER_INCLUDED
#define	STRINGTOKENIZER_INCLUDED

#include "String_.h"
#include &lt;cstdint&gt;

/**
 * The string tokenizer class allows an application to break a string into tokens.
 *
 * @author Petr Kozler (A13B0359P)
 */
class StringTokenizer : public Object {
    // current string array containing tokens
    std::string *tokens;
    // token count
    int32_t tokensLength;
    // current position in the array
    int32_t tokenCounter;
    void init(std::string str, std::string delim);
public:
    StringTokenizer(String *str);
    StringTokenizer(String *str, String *delim);
    ~StringTokenizer();
    int32_t countTokens();
    bool hasMoreTokens();
    String *nextToken();
};

#endif	// STRINGTOKENIZER_INCLUDED



#include "StringTokenizer.h"
#include "System.h"

#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;string.h&gt;

/*
    Initializes the string tokenizer with the specified string and set of delimiters.
*/
void StringTokenizer::init(std::string str, std::string delim) {
    size_t pos = str.find_first_of(delim, 0);
    
    // determining the greatest possible length of the token array
    for (tokensLength = 1; pos != str.npos; tokensLength++) {
        pos = str.find_first_of(delim, pos + 1);
    }
    
    tokenCounter = 0;
    // creating the token array
    tokens = new std::string[tokensLength];
    
    char* tmpS = strdup(str.c_str());
    
    char *s = strtok(tmpS, delim.c_str());
    int32_t i = 0;
    
    // inserting the tokens into the token array
    while (s != 0) {
        tokens[i] = s;
        i++;
        s = strtok(NULL, delim.c_str());
    }
    
    tokensLength = i;
    std::string *tempTokens = new std::string[tokensLength];
    
    // moving the tokens to the new array with exact length
    for (int32_t j = 0; j &lt; tokensLength; j++) {
        tempTokens[j] = tokens[j];
    }
    
    delete[] tokens;
    tokens = tempTokens;
}

/**
 * Constructs a string tokenizer for the specified string.
 *
 * @param str a string to be parsed.
 */
StringTokenizer::StringTokenizer(String *str) {
    init(str-&gt;_s(), " \t\n\r\f");
}

/**
 * Constructs a string tokenizer for the specified string.
 *
 * @param str a string to be parsed.
 * @param delim the delimiters.
 */
StringTokenizer::StringTokenizer(String *str, String *delim) {
    init(str-&gt;_s(), delim-&gt;_s());
}

/*
    Destructs the StringTokenizer.
 */
StringTokenizer::~StringTokenizer() {
    delete[] tokens;
}

/**
 * Calculates the number of times that this tokenizer's nextToken method can
 * be called before it results in undefined behavior.
 *
 * @return the number of tokens remaining in the string using the current
 * delimiter set.
 */
int32_t StringTokenizer::countTokens() {
    return tokensLength - tokenCounter;
}

/**
 * Tests if there are more tokens available from this tokenizer's string.
 *
 * @return true if and only if there is at least one token in the string
 * after the current position; false otherwise.
 */
bool StringTokenizer::hasMoreTokens() {
    return (countTokens() &gt; 0);
}

/**
 * Returns the next token from this string tokenizer.
 *
 * @return the next token from this string tokenizer.
 */
String *StringTokenizer::nextToken() {
    String *str = new String(tokens[tokenCounter]);
    tokenCounter++;
    
    return str;
}
</code>
<code lang="C#">ï»¿using System;

namespace JavaClasses
{

    /// &lt;summary&gt;
    /// The string tokenizer class allows an application to break a string into tokens.
    /// &lt;/summary&gt;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;
    public class StringTokenizer : Object
    {

        // current string array containing tokens
        private string[] tokens;
        // current position in the array
        private int tokenCounter = 0;

        /*
            Performs the string splitting.
         */
        private void initialize(string str, string delim = " \t\n\r\f")
        {
            // splitting the string to the array by the specified set of delimiters
            tokens = str.Split(delim.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
        }

        /// &lt;summary&gt;
        /// Constructs a string tokenizer for the specified string.
        /// &lt;/summary&gt;
        /// &lt;param name="str"&gt;a string to be parsed.
        /// &lt;/param&gt;
        public StringTokenizer(String str)
        {
            initialize(str.ToString());
        }

        /// &lt;summary&gt;
        /// Constructs a string tokenizer for the specified string.
        /// &lt;/summary&gt;
        /// &lt;param name="str"&gt;a string to be parsed.
        /// &lt;/param&gt;&lt;param name="delim"&gt;the delimiters.
        /// &lt;/param&gt;
        public StringTokenizer(String str, String delim)
        {
            initialize(str.ToString(), delim.ToString());
        }

        /// &lt;summary&gt;
        /// Calculates the number of times that this tokenizer's nextToken method can
        /// be called before it generates an exception.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the number of tokens remaining in the string using the current
        /// delimiter set.
        /// &lt;/returns&gt;
        public int countTokens()
        {
            return tokens.Length - tokenCounter;
        }

        /// &lt;summary&gt;
        /// Tests if there are more tokens available from this tokenizer's string.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;true if and only if there is at least one token in the string
        /// after the current position; false otherwise.
        /// &lt;/returns&gt;
        public bool hasMoreTokens()
        {
            return countTokens() &gt; 0;
        }

        /// &lt;summary&gt;
        /// Returns the next token from this string tokenizer.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the next token from this string tokenizer.
        /// &lt;/returns&gt;
        public String nextToken()
        {
            return tokens[tokenCounter++];
        }

    }

}
</code>
<code lang="Free Pascal">unit StringTokenizerUnit;

{$mode objfpc}{$H+}

interface

uses
  Classes, StrUtils, StringUnit;

type
  (**
   * The string tokenizer class allows an application to break a string into tokens.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  StringTokenizer = class(Object_)
    private
      var
        // string token array
        tokens: array of ansiString;
        // current position in the token array
        tokenCounter: longInt;
    public
      constructor create(str: String_);
      constructor create(str: String_; delim: String_);
      function countTokens() : longInt;
      function hasMoreTokens() : boolean;
      function nextToken() : String_;
  end;

implementation

uses
  SysUtils;

(**
 * Constructs a string tokenizer for the specified string.
 *
 * @param str a string to be parsed.
 *)
constructor StringTokenizer.create(str: String_);
begin
  self.create(str, #32#9#10#11#12#13);
end;

(**
 * Constructs a string tokenizer for the specified string.
 *
 * @param str a string to be parsed.
 * @param delim the delimiters.
 *)
constructor StringTokenizer.create(str: String_; delim: String_);
var
  strStr, delimStr, tmpStr: ansiString;
  count, len, i, tmp, index: longInt;
begin
  tokenCounter := 0;
  count := 1;
  strStr := str.strProperty;
  delimStr := delim.strProperty;
  len := length(strStr);

  // determining the greatest possible length of the token array
  for i := 1 to len do begin
    if ansiContainsStr(delimStr, strStr[i]) then begin
      inc(count);
    end;
  end;

  // creating the token array with the determined length
  setLength(tokens, count);
  index := 0;
  tmp := 1;

  // iterating over the characters in the string to find delimiters
  for i := 1 to len do begin
    // the delimiter was found
    if ansiContainsStr(delimStr, strStr[i]) then begin
       // copying all the character in the string from the current offset to the delimiter position
       tmpStr := copy(strStr, tmp, i - tmp);

       // inserting the non-empty string into the token array
       if length(tmpStr) &gt; 0 then begin
          tokens[index] := tmpStr;
          inc(index);
       end;

       // increasing the offset by the current position in the string
       tmp := i + 1;
    end;
  end;

  // copying the rest of the characters
  tmpStr := copy(strStr, tmp, i - tmp + 1);

  // inserting the string into the token array if not empty
  if length(tmpStr) &gt; 0 then begin
     tokens[index] := tmpStr;
     inc(index);
  end;

  // resizing the token array with the determined length
  setLength(tokens, index);
end;

(**
 * Calculates the number of times that this tokenizer's nextToken method can
 * be called before it causes an error.
 *
 * @return the number of tokens remaining in the string using the current
 * delimiter set.
 *)
function StringTokenizer.countTokens() : longInt;
begin
  countTokens := length(tokens) - tokenCounter;
end;

(**
 * Tests if there are more tokens available from this tokenizer's string.
 *
 * @return true if and only if there is at least one token in the string
 * after the current position; false otherwise.
 *)
function StringTokenizer.hasMoreTokens() : boolean;
begin
  hasMoreTokens := (countTokens() &gt; 0);
end;

(**
 * Returns the next token from this string tokenizer.
 *
 * @return the next token from this string tokenizer.
 *)
function StringTokenizer.nextToken() : String_;
var
  i: longInt;
begin
  i := tokenCounter;
  inc(tokenCounter);
  nextToken := tokens[i];
end;

end.

</code>

</codes>
