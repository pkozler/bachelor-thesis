<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef ARRAYS_INCLUDED
#define	ARRAYS_INCLUDED

#include "String_.h"
#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;

/**
 * This module contains various functions for manipulating arrays (such as sorting and searching).
 *
 * @author Petr Kozler (A13B0359P)
 */

int32_t Arrays_binarySearchB(int8_t *a, int32_t length, int8_t key);
int32_t Arrays_binarySearchRangeB(int8_t *a, int32_t fromIndex, int32_t toIndex, int8_t key);
int32_t Arrays_binarySearchC(char *a, int32_t length, char key);
int32_t Arrays_binarySearchRangeC(char *a, int32_t fromIndex, int32_t toIndex, char key);
int32_t Arrays_binarySearchD(double *a, int32_t length, double key);
int32_t Arrays_binarySearchRangeD(double *a, int32_t fromIndex, int32_t toIndex, double key);
int32_t Arrays_binarySearchF(float *a, int32_t length, float key);
int32_t Arrays_binarySearchRangeF(float *a, int32_t fromIndex, int32_t toIndex, float key);
int32_t Arrays_binarySearchI(int32_t *a, int32_t length, int32_t key);
int32_t Arrays_binarySearchRangeI(int32_t *a, int32_t fromIndex, int32_t toIndex, int32_t key);
int32_t Arrays_binarySearchL(int64_t *a, int32_t length, int64_t key);
int32_t Arrays_binarySearchRangeL(int64_t *a, int32_t fromIndex, int32_t toIndex, int64_t key);
int32_t Arrays_binarySearchObj(void **a, int32_t length, void *key, int32_t(*c)(const void *, const void *));
int32_t Arrays_binarySearchRangeObj(void **a, int32_t fromIndex, int32_t toIndex, void *key, int32_t(*c)(const void *, const void *));
int32_t Arrays_binarySearchS(int16_t *a, int32_t length, int16_t key);
int32_t Arrays_binarySearchRangeS(int16_t *a, int32_t fromIndex, int32_t toIndex, int16_t key);
bool *Arrays_copyOfBool(bool *original, int32_t length, int32_t newLength);
int8_t *Arrays_copyOfB(int8_t *original, int32_t length, int32_t newLength);
char *Arrays_copyOfC(char *original, int32_t length, int32_t newLength);
double *Arrays_copyOfD(double *original, int32_t length, int32_t newLength);
float *Arrays_copyOfF(float *original, int32_t length, int32_t newLength);
int32_t *Arrays_copyOfI(int32_t *original, int32_t length, int32_t newLength);
int64_t *Arrays_copyOfL(int64_t *original, int32_t length, int32_t newLength);
int16_t *Arrays_copyOfS(int16_t *original, int32_t length, int32_t newLength);
void **Arrays_copyOfObj(void **original, int32_t length, int32_t newLength);
bool *Arrays_copyOfRangeBool(bool *original, int32_t length, int32_t from, int32_t to);
int8_t *Arrays_copyOfRangeB(int8_t *original, int32_t length, int32_t from, int32_t to);
char *Arrays_copyOfRangeC(char *original, int32_t length, int32_t from, int32_t to);
double *Arrays_copyOfRangeD(double *original, int32_t length, int32_t from, int32_t to);
float *Arrays_copyOfRangeF(float *original, int32_t length, int32_t from, int32_t to);
int32_t *Arrays_copyOfRangeI(int32_t *original, int32_t length, int32_t from, int32_t to);
int64_t *Arrays_copyOfRangeL(int64_t *original, int32_t length, int32_t from, int32_t to);
int16_t *Arrays_copyOfRangeS(int16_t *original, int32_t length, int32_t from, int32_t to);
void **Arrays_copyOfRangeObj(void **original, int32_t length, int32_t from, int32_t to);
bool Arrays_equalsBool(bool *a, int32_t length, bool *a2, int32_t length2);
bool Arrays_equalsB(int8_t *a, int32_t length, int8_t *a2, int32_t length2);
bool Arrays_equalsC(char *a, int32_t length, char *a2, int32_t length2);
bool Arrays_equalsD(double *a, int32_t length, double *a2, int32_t length2);
bool Arrays_equalsF(float *a, int32_t length, float *a2, int32_t length2);
bool Arrays_equalsI(int32_t *a, int32_t length, int32_t *a2, int32_t length2);
bool Arrays_equalsL(int64_t *a, int32_t length, int64_t *a2, int32_t length2);
bool Arrays_equalsObj(void **a, int32_t length, void **a2, int32_t length2, bool (*equals)(const void *, const void *));
bool Arrays_equalsS(int16_t *a, int32_t length, int16_t *a2, int32_t length2);
void Arrays_fillBool(bool *a, int32_t length, bool val);
void Arrays_fillRangeBool(bool *a, int32_t fromIndex, int32_t toIndex, bool val);
void Arrays_fillB(int8_t *a, int32_t length, int8_t val);
void Arrays_fillRangeB(int8_t *a, int32_t fromIndex, int32_t toIndex, int8_t val);
void Arrays_fillC(char *a, int32_t length, char val);
void Arrays_fillRangeC(char *a, int32_t fromIndex, int32_t toIndex, char val);
void Arrays_fillD(double *a, int32_t length, double val);
void Arrays_fillRangeD(double *a, int32_t fromIndex, int32_t toIndex, double val);
void Arrays_fillF(float *a, int32_t length, float val);
void Arrays_fillRangeF(float *a, int32_t fromIndex, int32_t toIndex, float val);
void Arrays_fillI(int32_t *a, int32_t length, int32_t val);
void Arrays_fillRangeI(int32_t *a, int32_t fromIndex, int32_t toIndex, int32_t val);
void Arrays_fillL(int64_t *a, int32_t length, int64_t val);
void Arrays_fillRangeL(int64_t *a, int32_t fromIndex, int32_t toIndex, int64_t val);
void Arrays_fillObj(void **a, int32_t length, void *val);
void Arrays_fillRangeObj(void **a, int32_t fromIndex, int32_t toIndex, void *val);
void Arrays_fillS(int16_t *a, int32_t length, int16_t val);
void Arrays_fillRangeS(int16_t *a, int32_t fromIndex, int32_t toIndex, int16_t val);
void Arrays_sortC(char *a, int32_t length);
void Arrays_sortRangeC(char *a, int32_t fromIndex, int32_t toIndex);
void Arrays_sortB(int8_t *a, int32_t length);
void Arrays_sortRangeB(int8_t *a, int32_t fromIndex, int32_t toIndex);
void Arrays_sortD(double *a, int32_t length);
void Arrays_sortRangeD(double *a, int32_t fromIndex, int32_t toIndex);
void Arrays_sortF(float *a, int32_t length);
void Arrays_sortRangeF(float *a, int32_t fromIndex, int32_t toIndex);
void Arrays_sortI(int32_t *a, int32_t length);
void Arrays_sortRangeI(int32_t *a, int32_t fromIndex, int32_t toIndex);
void Arrays_sortL(int64_t *a, int32_t length);
void Arrays_sortRangeL(int64_t *a, int32_t fromIndex, int32_t toIndex);
void Arrays_sortObj(void **a, int32_t length, int32_t(*c)(const void *, const void *));
void Arrays_sortRangeObj(void **a, int32_t fromIndex, int32_t toIndex, int32_t(*c)(const void *, const void *));
void Arrays_sortS(int16_t *a, int32_t length);
void Arrays_sortRangeS(int16_t *a, int32_t fromIndex, int32_t toIndex);
String *Arrays_toStringBool(bool *a, int32_t length);
String *Arrays_toStringB(int8_t *a, int32_t length);
String *Arrays_toStringC(char *a, int32_t length);
String *Arrays_toStringD(double *a, int32_t length);
String *Arrays_toStringF(float *a, int32_t length);
String *Arrays_toStringI(int32_t *a, int32_t length);
String *Arrays_toStringL(int64_t *a, int32_t length);
String *Arrays_toStringObj(void **a, int32_t length, String *(*toString)(const void *));
String *Arrays_toStringS(int16_t *a, int32_t length);

#endif	/* ARRAYS_INCLUDED */


#include "Arrays.h"

#include "System.h"
#include "Boolean.h"
#include "Byte.h"
#include "Character.h"
#include "Double.h"
#include "Float.h"
#include "Integer.h"
#include "Long.h"
#include "Short.h"
#include "String_.h"
#include "StringBuilder.h"
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;

/*
 * default values used for copying one array to the another with greater length:
 */

bool _defaultBool = false;
int8_t _defaultByte = 0;
char _defaultChar = '\0';
double _defaultDouble = 0.0;
float _defaultFloat = 0.0f;
int32_t _defaultInt = 0;
int64_t _defaultLong = 0LL;
void *_defaultPointer = NULL;
int16_t _defaultShort = 0;

/*
 * functions for comparing the two specified values:
 */

int32_t _compareB(const void *a, const void *b) {
    return Byte_compare(*(int8_t*)a, *(int8_t*)b);
}

int32_t _compareC(const void *a, const void *b) {
    return Character_compare(*(char*)a, *(char*)b);
}

int32_t _compareD(const void *a, const void *b) {
    return Double_compare(*(double*)a, *(double*)b);
}

int32_t _compareF(const void *a, const void *b) {
    return Float_compare(*(float*)a, *(float*)b);
}

int32_t _compareI(const void *a, const void *b) {
    return Integer_compare(*(int32_t*)a, *(int32_t*)b);
}

int32_t _compareL(const void *a, const void *b) {
    return Long_compare(*(int64_t*)a, *(int64_t*)b);
}

int32_t _compareS(const void *a, const void *b) {
    return Short_compare(*(int16_t*)a, *(int16_t*)b);
}

/*
 * functions for testing if the two specified values are equal:
 */

bool _equalsBool(const void *a, const void *b) {
    Boolean *x = new_Boolean(*(bool*)a);
    Boolean *y = new_Boolean(*(bool*)b);
    bool equal = equalsBool(x, y);
    free(x);
    free(y);

    return equal;
}

bool _equalsB(const void *a, const void *b) {
    Byte *x = new_Byte(*(int8_t*)a);
    Byte *y = new_Byte(*(int8_t*)b);
    bool equal = equalsB(x, y);
    free(x);
    free(y);

    return equal;
}

bool _equalsC(const void *a, const void *b) {
    Character *x = new_Character(*(char*)a);
    Character *y = new_Character(*(char*)b);
    bool equal = equalsC(x, y);
    free(x);
    free(y);

    return equal;
}

bool _equalsD(const void *a, const void *b) {
    Double *x = new_Double(*(double*)a);
    Double *y = new_Double(*(double*)b);
    bool equal = equalsD(x, y);
    free(x);
    free(y);

    return equal;
}

bool _equalsF(const void *a, const void *b) {
    Float *x = new_Float(*(float*)a);
    Float *y = new_Float(*(float*)b);
    bool equal = equalsF(x, y);
    free(x);
    free(y);

    return equal;
}

bool _equalsI(const void *a, const void *b) {
    Integer *x = new_Integer(*(int32_t*)a);
    Integer *y = new_Integer(*(int32_t*)b);
    bool equal = equalsI(x, y);
    free(x);
    free(y);

    return equal;
}

bool _equalsL(const void *a, const void *b) {
    Long *x = new_Long(*(int64_t*)a);
    Long *y = new_Long(*(int64_t*)b);
    bool equal = equalsL(x, y);
    free(x);
    free(y);

    return equal;
}

bool _equalsS(const void *a, const void *b) {
    Short *x = new_Short(*(int16_t*)a);
    Short *y = new_Short(*(int16_t*)b);
    bool equal = equalsS(x, y);
    free(x);
    free(y);

    return equal;
}

/*
 * functions for returning the string representation of the specified value:
 */

String *_toStringBool(const void *a) {
    return Boolean_toString(*(bool*)a);
}

String *_toStringB(const void *a) {
    return Byte_toString(*(int8_t*)a);
}

String *_toStringC(const void *a) {
    return Character_toString(*(char*)a);
}

String *_toStringD(const void *a) {
    return Double_toString(*(double*)a);
}

String *_toStringF(const void *a) {
    return Float_toString(*(float*)a);
}

String *_toStringI(const void *a) {
    return Integer_toString(*(int32_t*)a);
}

String *_toStringL(const void *a) {
    return Long_toString(*(int64_t*)a);
}

String *_toStringS(const void *a) {
    return Short_toString(*(int16_t*)a);
}

/*
    Represents the type-agnostic function for binary searching
    in the specified sorted part of any array according to a specified compare function.
 */
int32_t _binarySearchPointer(void *a, int32_t fromIndex, int32_t toIndex, int32_t size, void *key, int32_t (*c)(const void *, const void *), bool isObjectArray) {
    // initial lower index
    int32_t lower = fromIndex;
    // initial upper index
    int32_t upper = toIndex - 1;

    while (lower &lt;= upper) {
        // middle index
        int32_t middle = ((uint32_t)lower + (uint32_t)upper) &gt;&gt; 1;
        int32_t cmp; 
        
        // dereferencing the pointers to the struct pointers for comparing
        if (isObjectArray) {
            void **o1 = a + middle * size;
            void **o2 = key;
            cmp = c(*o1, *o2);
        }
        // getting the value pointers for comparing
        else {
            void *o1 = a + middle * size;
            void *o2 = key;
            cmp = c(o1, o2);
        }
        
        // middle index is the new lower index if the key is greater than middle value
        if (cmp &lt; 0) {
            lower = middle + 1;
        }
        // middle index is the new upper index if the key is greater than middle value
        else if (cmp &gt; 0) {
            upper = middle - 1;
        }
        // returning the element if middle index value is equal to the key
        else {
            return middle;
        }
    }

    // returning the negative index if element not found
    return -(lower + 1);
}

/*
    Represents the type-agnostic function for copying
    the specified part of any array.
 */
void *_copyOfRangePointer(void *original, int32_t length, int32_t size, int32_t from, int32_t to, void *defaultValue) {
    // a new array with the length equal to the difference of boundaries of the original array
    void *a = calloc(to - from, size);
    int32_t i;

    // the specified upper boundary if greater than the original array length
    if (to &gt; length) {
        // copying the values from the original array to its last element
        for (i = from; i &lt; length; i++) {
            memcpy(a + (i - from) * size, original + i * size, size);
        }

        // filling the rest of the new array with the default value of the given type
        for (i = length; i &lt; to; i++) {
            memcpy(a + (i - from) * size, defaultValue, size);
        }
    }
    // the specified upper boundary is less then the original array length
    else {
        // copying the values from the original array to the element on the specified upper boundary
        for (i = from; i &lt; to; i++) {
            memcpy(a + (i - from) * size, original + i * size, size);
        }
    }

    return a;
}

/*
    Represents the type-agnostic function for testing if two
    specified arrays are equal.
 */
bool _equalsPointer(void *a, int32_t length, void *a2, int32_t length2, int32_t size, bool (*equals)(const void *, const void *), bool isObjectArray) {
    // comparing pointers
    if (a == a2) {
        return true;
    }
    
    // testing the pointers for a NULL value
    if (a == NULL || a2 == NULL) {
        return false;
    }

    // comparing the array lengths
    if (length2 != length) {
        return false;
    }
    
    // comparing corresponding elements of arrays
    int32_t i;
    for (i = 0; i &lt; length; i++) {
        bool e;
        
        // checking NULL values for object pointers
        if (isObjectArray) {
            void **o1 = a + i * size;
            void **o2 = a2 + i * size;
            e = *o1 == NULL ? *o2 == NULL : equals(*o1, *o2);
        }
        else {
            void *o1 = a + i * size;
            void *o2 = a2 + i * size;
            e = equals(o1, o2);
        }
        
        if (!e) {
            return false;
        }
    }

    return true;
}

/*
    Represents the type-agnostic function for filling
    the specified part of any array with the specified value.
 */
void _fillPointer(void *a, int32_t fromIndex, int32_t toIndex, int32_t size, void *val) {
    // setting each element to the value
    int32_t i;
    for (i = fromIndex; i &lt; toIndex; i++) {
        memcpy(a + i * size, val, size);
    }
}

/*
    Represents the type-agnostic function for sorting
    the specified part of any array according to a specified compare function.
 */
void _sortPointer(void *a, int32_t fromIndex, int32_t toIndex, int32_t size, int32_t (*c)(const void *, const void *), bool isObjectArray) {
    // unstable sort for primitive values
    if (!isObjectArray) {
        qsort(a + fromIndex * size, toIndex - fromIndex, size, c);
    }
    // stable sort for structure pointers
    else {
        void **aux = malloc(sizeof(void *) * (toIndex - fromIndex));
        _mergeSort((void **)a, aux, fromIndex, toIndex - 1, c);
        free(aux);
    }
}

/*
    Represents the type-agnostic function for creating
    the string representation of any array.
 */
String *_toStringPointer(void *a, int32_t length, int32_t size, String *(*toString)(const void *), bool isObjectArray) {
    // create StringBuilder for appending the text
    StringBuilder *sb = new_StringBuilder();
    String *str = new_String("[");
    append(sb, str);
    delete_String(str);

    // append first element string representation
    if (length &gt; 0) {
        // checking NULL values for struct pointers
        if (isObjectArray) {
            void **o = a;
            str = *o == NULL ? new_String("null") : toString(*o);
        }
        else  {
            void *o = a;
            str = toString(o);
        }
        
        append(sb, str);
        delete_String(str);
    }

    // append another elements string representation
    int32_t i;
    for (i = 1; i &lt; length; i++) {
        str = new_String(", ");
        append(sb, str);
        delete_String(str);
        
        // checking NULL values for struct pointers
        if (isObjectArray) {
            void **o = a + i * size;
            str = *o == NULL ? new_String("null") : toString(*o);
        }
        else  {
            void *o = a + i * size;
            str = toString(o);
        }
        
        append(sb, str);
        delete_String(str);
    }

    // create Java-like string
    str = new_String("]");
    append(sb, str);
    delete_String(str);
    str = toStringSb(sb);
    delete_StringBuilder(sb);

    return str;
}

/**
 * Searches the specified array of bytes for the specified value using the
 * binary search algorithm
 *
 * @param a the array to be searched
 * @param length The array length
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
int32_t Arrays_binarySearchB(int8_t *a, int32_t length, int8_t key) {
    return _binarySearchPointer(a, 0, length, sizeof(int8_t), &amp;key, _compareC, false);
}

/**
 * Searches a range of the specified array of bytes for the specified value
 * using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 */
int32_t Arrays_binarySearchRangeB(int8_t *a, int32_t fromIndex, int32_t toIndex, int8_t key) {
    return _binarySearchPointer(a, fromIndex, toIndex, sizeof(int8_t), &amp;key, _compareC, false);
}

/**
 * Searches the specified array of chars for the specified value using the
 * binary search algorithm.
 *
 * @param a the array to be searched
 * @param length The array length
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
int32_t Arrays_binarySearchC(char *a, int32_t length, char key) {
    return _binarySearchPointer(a, 0, length, sizeof(char), &amp;key, _compareC, false);
}

/**
 * Searches a range of the specified array of chars for the specified value
 * using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 */
int32_t Arrays_binarySearchRangeC(char *a, int32_t fromIndex, int32_t toIndex, char key) {
    return _binarySearchPointer(a, fromIndex, toIndex, sizeof(char), &amp;key, _compareC, false);
}

/**
 * Searches the specified array of doubles for the specified value using the
 * binary search algorithm.
 *
 * @param a the array to be searched
 * @param length The array length
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
int32_t Arrays_binarySearchD(double *a, int32_t length, double key) {
    return _binarySearchPointer(a, 0, length, sizeof(double), &amp;key, _compareD, false);
}

/**
 * Searches a range of the specified array of doubles for the specified
 * value using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 */
int32_t Arrays_binarySearchRangeD(double *a, int32_t fromIndex, int32_t toIndex, double key) {
    return _binarySearchPointer(a, fromIndex, toIndex, sizeof(double), &amp;key, _compareD, false);
}

/**
 * Searches the specified array of floats for the specified value using the
 * binary search algorithm.
 *
 * @param a the array to be searched
 * @param length The array length
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
int32_t Arrays_binarySearchF(float *a, int32_t length, float key) {
    return _binarySearchPointer(a, 0, length, sizeof(float), &amp;key, _compareF, false);
}

/**
 * Searches a range of the specified array of floats for the specified value
 * using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 */
int32_t Arrays_binarySearchRangeF(float *a, int32_t fromIndex, int32_t toIndex, float key) {
    return _binarySearchPointer(a, fromIndex, toIndex, sizeof(float), &amp;key, _compareF, false);
}

/**
 * Searches the specified array of ints for the specified value using the
 * binary search algorithm.
 *
 * @param a the array to be searched
 * @param length The array length
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
int32_t Arrays_binarySearchI(int32_t *a, int32_t length, int32_t key) {
    return _binarySearchPointer(a, 0, length, sizeof(int32_t), &amp;key, _compareI, false);
}

/**
 * Searches a range of the specified array of ints for the specified value
 * using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 */
int32_t Arrays_binarySearchRangeI(int32_t *a, int32_t fromIndex, int32_t toIndex, int32_t key) {
    return _binarySearchPointer(a, fromIndex, toIndex, sizeof(int32_t), &amp;key, _compareI, false);
}

/**
 * Searches the specified array of longs for the specified value using the
 * binary search algorithm.
 *
 * @param a the array to be searched
 * @param length The array length
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
int32_t Arrays_binarySearchL(int64_t *a, int32_t length, int64_t key) {
    return _binarySearchPointer(a, 0, length, sizeof(int64_t), &amp;key, _compareL, false);
}

/**
 * Searches a range of the specified array of longs for the specified value
 * using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 */
int32_t Arrays_binarySearchRangeL(int64_t *a, int32_t fromIndex, int32_t toIndex, int64_t key) {
    return _binarySearchPointer(a, fromIndex, toIndex, sizeof(int64_t), &amp;key, _compareL, false);
}

/**
 * Searches the specified array for the specified structure using the binary
 * search algorithm.
 *
 * @param a the array to be searched
 * @param length The array length
 * @param key the value to be searched for
 * @param c The structure compare function
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
int32_t Arrays_binarySearchObj(void **a, int32_t length, void *key, int32_t (*c)(const void *, const void *)) {
    return _binarySearchPointer(a, 0, length, sizeof(void *), &amp;key, c, true);
}

/**
 * Searches a range of the specified array for the specified structure using
 * the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @param c The structure compare function
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 */
int32_t Arrays_binarySearchRangeObj(void **a, int32_t fromIndex, int32_t toIndex, void *key, int32_t (*c)(const void *, const void *)) {
    return _binarySearchPointer(a, fromIndex, toIndex, sizeof(void *), &amp;key, c, true);
}

/**
 * Searches the specified array of shorts for the specified value using the
 * binary search algorithm.
 *
 * @param a the array to be searched
 * @param length The array length
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
int32_t Arrays_binarySearchS(int16_t *a, int32_t length, int16_t key) {
    return _binarySearchPointer(a, 0, length, sizeof(int16_t), &amp;key, _compareS, false);
}

/**
 * Searches a range of the specified array of shorts for the specified value
 * using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 */
int32_t Arrays_binarySearchRangeS(int16_t *a, int32_t fromIndex, int32_t toIndex, int16_t key) {
    return _binarySearchPointer(a, fromIndex, toIndex, sizeof(int16_t), &amp;key, _compareS, false);
}

/**
 * Copies the specified array, truncating or padding with false (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param length The array length
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with false
 * elements to obtain the specified length
 */
bool *Arrays_copyOfBool(bool *original, int32_t length, int32_t newLength) {
    return _copyOfRangePointer(original, length, sizeof(bool), 0, newLength, &amp;_defaultBool);
}

/**
 * Copies the specified array, truncating or padding with zeros (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param length The array length
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with zeros to
 * obtain the specified length
 */
int8_t *Arrays_copyOfB(int8_t *original, int32_t length, int32_t newLength) {
    return _copyOfRangePointer(original, length, sizeof(int8_t), 0, newLength, &amp;_defaultByte);
}

/**
 * Copies the specified array, truncating or padding with null characters
 * (if necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param length The array length
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with null
 * characters to obtain the specified length
 */
char *Arrays_copyOfC(char *original, int32_t length, int32_t newLength) {
    return _copyOfRangePointer(original, length, sizeof(char), 0, newLength, &amp;_defaultChar);
}

/**
 * Copies the specified array, truncating or padding with zeros (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param length The array length
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with zeros to
 * obtain the specified length
 */
double *Arrays_copyOfD(double *original, int32_t length, int32_t newLength) {
    return _copyOfRangePointer(original, length, sizeof(double), 0, newLength, &amp;_defaultDouble);
}

/**
 * Copies the specified array, truncating or padding with zeros (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param length The array length
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with zeros to
 * obtain the specified length
 */
float *Arrays_copyOfF(float *original, int32_t length, int32_t newLength) {
    return _copyOfRangePointer(original, length, sizeof(float), 0, newLength, &amp;_defaultFloat);
}

/**
 * Copies the specified array, truncating or padding with zeros (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param length The array length
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with zeros to
 * obtain the specified length
 */
int32_t *Arrays_copyOfI(int32_t *original, int32_t length, int32_t newLength) {
    return _copyOfRangePointer(original, length, sizeof(int32_t), 0, newLength, &amp;_defaultInt);
}

/**
 * Copies the specified array, truncating or padding with zeros (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param length The array length
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with zeros to
 * obtain the specified length
 */
int64_t *Arrays_copyOfL(int64_t *original, int32_t length, int32_t newLength) {
    return _copyOfRangePointer(original, length, sizeof(int64_t), 0, newLength, &amp;_defaultLong);
}

/**
 * Copies the specified array, truncating or padding with zeros (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param length The array length
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with zeros to
 * obtain the specified length
 */
int16_t *Arrays_copyOfS(int16_t *original, int32_t length, int32_t newLength) {
    return _copyOfRangePointer(original, length, sizeof(int16_t), 0, newLength, &amp;_defaultShort);
}

/**
 * Copies the specified array, truncating or padding with nulls (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param length The array length
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with nulls to
 * obtain the specified length
 */
void **Arrays_copyOfObj(void **original, int32_t length, int32_t newLength) {
    return _copyOfRangePointer(original, length, sizeof(void *), 0, newLength, &amp;_defaultPointer);
}

/**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param length The array length
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with false elements to obtain the required
 * length
 */
bool *Arrays_copyOfRangeBool(bool *original, int32_t length, int32_t from, int32_t to) {
    return _copyOfRangePointer(original, length, sizeof(bool), from, to, &amp;_defaultBool);
}

/**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param length The array length
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with zeros to obtain the required length
 */
int8_t *Arrays_copyOfRangeB(int8_t *original, int32_t length, int32_t from, int32_t to) {
    return _copyOfRangePointer(original, length, sizeof(int8_t), from, to, &amp;_defaultByte);
}

/**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param length The array length
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with null characters to obtain the required
 * length
 */
char *Arrays_copyOfRangeC(char *original, int32_t length, int32_t from, int32_t to) {
    return _copyOfRangePointer(original, length, sizeof(char), from, to, &amp;_defaultChar);
}

/**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param length The array length
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with zeros to obtain the required length
 */
double *Arrays_copyOfRangeD(double *original, int32_t length, int32_t from, int32_t to) {
    return _copyOfRangePointer(original, length, sizeof(double), from, to, &amp;_defaultDouble);
}

/**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param length The array length
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with zeros to obtain the required length
 */
float *Arrays_copyOfRangeF(float *original, int32_t length, int32_t from, int32_t to) {
    return _copyOfRangePointer(original, length, sizeof(float), from, to, &amp;_defaultFloat);
}

/**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param length The array length
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with zeros to obtain the required length
 */
int32_t *Arrays_copyOfRangeI(int32_t *original, int32_t length, int32_t from, int32_t to) {
    return _copyOfRangePointer(original, length, sizeof(int32_t), from, to, &amp;_defaultInt);
}

/**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param length The array length
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with zeros to obtain the required length
 */
int64_t *Arrays_copyOfRangeL(int64_t *original, int32_t length, int32_t from, int32_t to) {
    return _copyOfRangePointer(original, length, sizeof(int64_t), from, to, &amp;_defaultLong);
}

/**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param length The array length
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with zeros to obtain the required length
 */
int16_t *Arrays_copyOfRangeS(int16_t *original, int32_t length, int32_t from, int32_t to) {
    return _copyOfRangePointer(original, length, sizeof(int16_t), from, to, &amp;_defaultShort);
}

/**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param length The array length
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with nulls to obtain the required length
 */
void **Arrays_copyOfRangeObj(void **original, int32_t length, int32_t from, int32_t to) {
    return _copyOfRangePointer(original, length, sizeof(void *), from, to, &amp;_defaultPointer);
}

/**
 * Returns true if the two specified arrays of booleans are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param length The array length
 * @param a2 the other array to be tested for equality
 * @param length2 The other array length
 * @return true if the two arrays are equal
 */
bool Arrays_equalsBool(bool *a, int32_t length, bool *a2, int32_t length2) {
    return _equalsPointer(a, length, a2, length2, sizeof(bool), _equalsBool, false);
}

/**
 * Returns true if the two specified arrays of bytes are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param length The array length
 * @param a2 the other array to be tested for equality
 * @param length2 The other array length
 * @return true if the two arrays are equal
 */
bool Arrays_equalsB(int8_t *a, int32_t length, int8_t *a2, int32_t length2) {
    return _equalsPointer(a, length, a2, length2, sizeof(int8_t), _equalsC, false);
}

/**
 * Returns true if the two specified arrays of chars are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param length The array length
 * @param a2 the other array to be tested for equality
 * @param length2 The other array length
 * @return true if the two arrays are equal
 */
bool Arrays_equalsC(char *a, int32_t length, char *a2, int32_t length2) {
    return _equalsPointer(a, length, a2, length2, sizeof(char), _equalsC, false);
}

/**
 * Returns true if the two specified arrays of doubles are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param length The array length
 * @param a2 the other array to be tested for equality
 * @param length2 The other array length
 * @return true if the two arrays are equal
 */
bool Arrays_equalsD(double *a, int32_t length, double *a2, int32_t length2) {
    return _equalsPointer(a, length, a2, length2, sizeof(double), _equalsD, false);
}

/**
 * Returns true if the two specified arrays of floats are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param length The array length
 * @param a2 the other array to be tested for equality
 * @param length2 The other array length
 * @return true if the two arrays are equal
 */
bool Arrays_equalsF(float *a, int32_t length, float *a2, int32_t length2) {
    return _equalsPointer(a, length, a2, length2, sizeof(float), _equalsF, false);
}

/**
 * Returns true if the two specified arrays of ints are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param length The array length
 * @param a2 the other array to be tested for equality
 * @param length2 The other array length
 * @return true if the two arrays are equal
 */
bool Arrays_equalsI(int32_t *a, int32_t length, int32_t *a2, int32_t length2) {
    return _equalsPointer(a, length, a2, length2, sizeof(int32_t), _equalsI, false);
}

/**
 * Returns true if the two specified arrays of longs are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param length The array length
 * @param a2 the other array to be tested for equality
 * @param length2 The other array length
 * @return true if the two arrays are equal
 */
bool Arrays_equalsL(int64_t *a, int32_t length, int64_t *a2, int32_t length2) {
    return _equalsPointer(a, length, a2, length2, sizeof(int64_t), _equalsL, false);
}

/**
 * Returns true if the two specified arrays of structures are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param length The array length
 * @param a2 the other array to be tested for equality
 * @param length2 The other array length
 * @param equals The structure equals function
 * @return true if the two arrays are equal
 */
bool Arrays_equalsObj(void **a, int32_t length, void **a2, int32_t length2, bool (*equals)(const void *, const void *)) {
    return _equalsPointer(a, length, a2, length2, sizeof(void *), equals, true);
}

/**
 * Returns true if the two specified arrays of shorts are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param length The array length
 * @param a2 the other array to be tested for equality
 * @param length2 The other array length
 * @return true if the two arrays are equal
 */
bool Arrays_equalsS(int16_t *a, int32_t length, int16_t *a2, int32_t length2) {
    return _equalsPointer(a, length, a2, length2, sizeof(int16_t), _equalsS, false);
}

/**
 * Assigns the specified boolean value to each element of the specified
 * array of booleans.
 *
 * @param a the array to be filled
 * @param length The array length
 * @param val the value to be stored in all elements of the array
 */
void Arrays_fillBool(bool *a, int32_t length, bool val) {
    _fillPointer(a, 0, length, sizeof(bool), &amp;val);
}

/**
 * Assigns the specified boolean value to each element of the specified
 * range of the specified array of booleans.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 */
void Arrays_fillRangeBool(bool *a, int32_t fromIndex, int32_t toIndex, bool val) {
    _fillPointer(a, fromIndex, toIndex, sizeof(bool), &amp;val);
}

/**
 * Assigns the specified byte value to each element of the specified array
 * of bytes.
 *
 * @param a the array to be filled
 * @param length The array length
 * @param val the value to be stored in all elements of the array
 */
void Arrays_fillB(int8_t *a, int32_t length, int8_t val) {
    _fillPointer(a, 0, length, sizeof(int8_t), &amp;val);
}

/**
 * Assigns the specified byte value to each element of the specified range
 * of the specified array of bytes.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 */
void Arrays_fillRangeB(int8_t *a, int32_t fromIndex, int32_t toIndex, int8_t val) {
    _fillPointer(a, fromIndex, toIndex, sizeof(int8_t), &amp;val);
}

/**
 * Assigns the specified char value to each element of the specified array
 * of chars.
 *
 * @param a the array to be filled
 * @param length The array length
 * @param val the value to be stored in all elements of the array
 */
void Arrays_fillC(char *a, int32_t length, char val) {
    _fillPointer(a, 0, length, sizeof(char), &amp;val);
}

/**
 * Assigns the specified char value to each element of the specified range
 * of the specified array of chars.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 */
void Arrays_fillRangeC(char *a, int32_t fromIndex, int32_t toIndex, char val) {
    _fillPointer(a, fromIndex, toIndex, sizeof(char), &amp;val);
}

/**
 * Assigns the specified double value to each element of the specified array
 * of doubles.
 *
 * @param a the array to be filled
 * @param length The array length
 * @param val the value to be stored in all elements of the array
 */
void Arrays_fillD(double *a, int32_t length, double val) {
    _fillPointer(a, 0, length, sizeof(double), &amp;val);
}

/**
 * Assigns the specified double value to each element of the specified range
 * of the specified array of doubles.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 */
void Arrays_fillRangeD(double *a, int32_t fromIndex, int32_t toIndex, double val) {
    _fillPointer(a, fromIndex, toIndex, sizeof(double), &amp;val);
}

/**
 * Assigns the specified float value to each element of the specified array
 * of floats.
 *
 * @param a the array to be filled
 * @param length The array length
 * @param val the value to be stored in all elements of the array
 */
void Arrays_fillF(float *a, int32_t length, float val) {
    _fillPointer(a, 0, length, sizeof(float), &amp;val);
}

/**
 * Assigns the specified float value to each element of the specified range
 * of the specified array of floats.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 */
void Arrays_fillRangeF(float *a, int32_t fromIndex, int32_t toIndex, float val) {
    _fillPointer(a, fromIndex, toIndex, sizeof(float), &amp;val);
}

/**
 * Assigns the specified int value to each element of the specified array of
 * ints.
 *
 * @param a the array to be filled
 * @param length The array length
 * @param val the value to be stored in all elements of the array
 */
void Arrays_fillI(int32_t *a, int32_t length, int32_t val) {
    _fillPointer(a, 0, length, sizeof(int32_t), &amp;val);
}

/**
 * Assigns the specified int value to each element of the specified range of
 * the specified array of ints.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 */
void Arrays_fillRangeI(int32_t *a, int32_t fromIndex, int32_t toIndex, int32_t val) {
    _fillPointer(a, fromIndex, toIndex, sizeof(int32_t), &amp;val);
}

/**
 * Assigns the specified long value to each element of the specified array
 * of longs.
 *
 * @param a the array to be filled
 * @param length The array length
 * @param val the value to be stored in all elements of the array
 */
void Arrays_fillL(int64_t *a, int32_t length, int64_t val) {
    _fillPointer(a, 0, length, sizeof(int64_t), &amp;val);
}

/**
 * Assigns the specified long value to each element of the specified range
 * of the specified array of longs.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 */
void Arrays_fillRangeL(int64_t *a, int32_t fromIndex, int32_t toIndex, int64_t val) {
    _fillPointer(a, fromIndex, toIndex, sizeof(int64_t), &amp;val);
}

/**
 * Assigns the specified structure pointer to each element of the specified
 * array of structures.
 *
 * @param a the array to be filled
 * @param length The array length
 * @param val the value to be stored in all elements of the array
 */
void Arrays_fillObj(void **a, int32_t length, void *val) {
    _fillPointer(a, 0, length, sizeof(void *), &amp;val);
}

/**
 * Assigns the specified structure pointer to each element of the specified
 * range of the specified array of structures.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 */
void Arrays_fillRangeObj(void **a, int32_t fromIndex, int32_t toIndex, void *val) {
    _fillPointer(a, fromIndex, toIndex, sizeof(void *), &amp;val);
}

/**
 * Assigns the specified short value to each element of the specified array
 * of shorts.
 *
 * @param a the array to be filled
 * @param length The array length
 * @param val the value to be stored in all elements of the array
 */
void Arrays_fillS(int16_t *a, int32_t length, int16_t val) {
    _fillPointer(a, 0, length, sizeof(int16_t), &amp;val);
}

/**
 * Assigns the specified short value to each element of the specified range
 * of the specified array of shorts.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 */
void Arrays_fillRangeS(int16_t *a, int32_t fromIndex, int32_t toIndex, int16_t val) {
    _fillPointer(a, fromIndex, toIndex, sizeof(int16_t), &amp;val);
}

/**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 * @param length The array length
 */
void Arrays_sortB(int8_t *a, int32_t length) {
    _sortPointer(a, 0, length, sizeof(int8_t), _compareC, false);
}

/**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 */
void Arrays_sortRangeB(int8_t *a, int32_t fromIndex, int32_t toIndex) {
    _sortPointer(a, fromIndex, toIndex, sizeof(int8_t), _compareC, false);
}

/**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 * @param length The array length
 */
void Arrays_sortC(char *a, int32_t length) {
    _sortPointer(a, 0, length, sizeof(char), _compareC, false);
}

/**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 */
void Arrays_sortRangeC(char *a, int32_t fromIndex, int32_t toIndex) {
    _sortPointer(a, fromIndex, toIndex, sizeof(char), _compareC, false);
}

/**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 * @param length The array length
 */
void Arrays_sortD(double *a, int32_t length) {
    _sortPointer(a, 0, length, sizeof(double), _compareD, false);
}

/**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 */
void Arrays_sortRangeD(double *a, int32_t fromIndex, int32_t toIndex) {
    _sortPointer(a, fromIndex, toIndex, sizeof(double), _compareD, false);
}

/**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 * @param length The array length
 */
void Arrays_sortF(float *a, int32_t length) {
    _sortPointer(a, 0, length, sizeof(float), _compareF, false);
}

/**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 */
void Arrays_sortRangeF(float *a, int32_t fromIndex, int32_t toIndex) {
    _sortPointer(a, fromIndex, toIndex, sizeof(float), _compareF, false);
}

/**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 * @param length The array length
 */
void Arrays_sortI(int32_t *a, int32_t length) {
    _sortPointer(a, 0, length, sizeof(int32_t), _compareI, false);
}

/**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 */
void Arrays_sortRangeI(int32_t *a, int32_t fromIndex, int32_t toIndex) {
    _sortPointer(a, fromIndex, toIndex, sizeof(int32_t), _compareI, false);
}

/**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 * @param length The array length
 */
void Arrays_sortL(int64_t *a, int32_t length) {
    _sortPointer(a, 0, length, sizeof(int64_t), _compareL, false);
}

/**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 */
void Arrays_sortRangeL(int64_t *a, int32_t fromIndex, int32_t toIndex) {
    _sortPointer(a, fromIndex, toIndex, sizeof(int64_t), _compareL, false);
}

/**
 * Sorts the specified array of structures into ascending order, according to
 * the natural ordering of its elements.
 *
 * @param a the array to be sorted
 * @param length The array length
 * @param c The structure compare function
 */
void Arrays_sortObj(void **a, int32_t length, int32_t (*c)(const void *, const void *)) {
    _sortPointer(a, 0, length, sizeof(void *), c, true);
}

/**
 * Sorts the specified range of the specified array of structures into
 * ascending order, according to the natural ordering of its elements.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 * @param c The structure compare function
 */
void Arrays_sortRangeObj(void **a, int32_t fromIndex, int32_t toIndex, int32_t (*c)(const void *, const void *)) {
    _sortPointer(a, fromIndex, toIndex, sizeof(void *), c, true);
}

/**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 * @param length The array length
 */
void Arrays_sortS(int16_t *a, int32_t length) {
    _sortPointer(a, 0, length, sizeof(int16_t), _compareS, false);
}

/**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 */
void Arrays_sortRangeS(int16_t *a, int32_t fromIndex, int32_t toIndex) {
    _sortPointer(a, fromIndex, toIndex, sizeof(int16_t), _compareS, false);
}

/**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @param length The array length
 * @return a string representation of a
 */
String *Arrays_toStringBool(bool *a, int32_t length) {
    return _toStringPointer(a, length, sizeof(bool), _toStringBool, false);
}

/**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @param length The array length
 * @return a string representation of a
 */
String *Arrays_toStringB(int8_t *a, int32_t length) {
    return _toStringPointer(a, length, sizeof(int8_t), _toStringB, false);
}

/**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @param length The array length
 * @return a string representation of a
 */
String *Arrays_toStringC(char *a, int32_t length) {
    return _toStringPointer(a, length, sizeof(char), _toStringC, false);
}

/**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @param length The array length
 * @return a string representation of a
 */
String *Arrays_toStringD(double *a, int32_t length) {
    return _toStringPointer(a, length, sizeof(double), _toStringD, false);
}

/**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @param length The array length
 * @return a string representation of a
 */
String *Arrays_toStringF(float *a, int32_t length) {
    return _toStringPointer(a, length, sizeof(float), _toStringF, false);
}

/**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @param length The array length
 * @return a string representation of a
 */
String *Arrays_toStringI(int32_t *a, int32_t length) {
    return _toStringPointer(a, length, sizeof(int32_t), _toStringI, false);
}

/**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @param length The array length
 * @return a string representation of a
 */
String *Arrays_toStringL(int64_t *a, int32_t length) {
    return _toStringPointer(a, length, sizeof(int64_t), _toStringL, false);
}

/**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @param length The array length
 * @param toString The structure toString function
 * @return a string representation of a
 */
String *Arrays_toStringObj(void **a, int32_t length, String *(*toString)(const void *)) {
    return _toStringPointer(a, length, sizeof(void *), toString, true);
}

/**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @param length The array length
 * @return a string representation of a
 */
String *Arrays_toStringS(int16_t *a, int32_t length) {
    return _toStringPointer(a, length, sizeof(int16_t), _toStringS, false);
}
</code>
<code lang="C++">#ifndef ARRAYS_INCLUDED
#define	ARRAYS_INCLUDED

#include "String_.h"
#include "System.h"
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;cstdint&gt;

/**
 * This class contains various methods for manipulating arrays (such as sorting and searching).
 *
 * @author Petr Kozler (A13B0359P)
 */
class Arrays {
    /*
     * default values used for copying one array to the another with greater length:
     */
    static bool defaultBool;
    static int8_t defaultByte;
    static char defaultChar;
    static double defaultDouble;
    static float defaultFloat;
    static int32_t defaultInt;
    static int64_t defaultLong;
    static Object *defaultPointer;
    static int16_t defaultShort;
    // hack to make the Comparator compare function call work
    static void *currentComparator;
    static bool equalsBool(bool a, bool b);
    static bool equalsB(int8_t a, int8_t b);
    static bool equalsC(char a, char b);
    static bool equalsD(double a, double b);
    static bool equalsF(float a, float b);
    static bool equalsI(int32_t a, int32_t b);
    static bool equalsL(int64_t a, int64_t b);
    static bool equalsS(int16_t a, int16_t b);
    static bool equalsObj(Object *a, Object *b);
    static String *toStringObj(Object *a);
    static bool compareB(int8_t a, int8_t b);
    static bool compareC(char a, char b);
    static bool compareD(double a, double b);
    static bool compareF(float a, float b);
    static bool compareI(int32_t a, int32_t b);
    static bool compareL(int64_t a, int64_t b);
    static bool compareS(int16_t a, int16_t b);
    static bool compareObj(Object *a, Object *b);
    static bool compareObjComp(Object *a, Object *b);
    static int32_t compareBI(int8_t a, int8_t b);
    static int32_t compareCI(char a, char b);
    static int32_t compareDI(double a, double b);
    static int32_t compareFI(float a, float b);
    static int32_t compareII(int32_t a, int32_t b);
    static int32_t compareLI(int64_t a, int64_t b);
    static int32_t compareSI(int16_t a, int16_t b);
    static int32_t compareObjI(Object *a, Object *b);
    static int32_t compareObjCompI(Object *a, Object *b);
    template &lt;typename T&gt; static int32_t binarySearchGeneric(T *a, int32_t fromIndex, int32_t toIndex, T key, int32_t (*c)(T, T));
    template &lt;typename T&gt; static T *copyOfRangeGeneric(T *original, int32_t length, int32_t from, int32_t to, T defaultValue);
    template &lt;typename T&gt; static bool equalsGeneric(T *a, int32_t length, T *a2, int32_t length2, bool (*equals)(T, T), bool isObjectArray);
    template &lt;typename T&gt; static void fillGeneric(T *a, int32_t fromIndex, int32_t toIndex, T val);
    template &lt;typename T&gt; static void sortGeneric(T *a, int32_t fromIndex, int32_t toIndex, bool (*c)(T, T), bool isObjectArray = false);
    template &lt;typename T&gt; static String *toStringGeneric(T *a, int32_t length, String *(*toString)(T), bool isObjectArray);
public:
    static int32_t binarySearch(int8_t *a, int32_t length, int8_t key);
    static int32_t binarySearch(int8_t *a, int32_t fromIndex, int32_t toIndex, int8_t key);
    static int32_t binarySearch(char *a, int32_t length, char key);
    static int32_t binarySearch(char *a, int32_t fromIndex, int32_t toIndex, char key);
    static int32_t binarySearch(double *a, int32_t length, double key);
    static int32_t binarySearch(double *a, int32_t fromIndex, int32_t toIndex, double key);
    static int32_t binarySearch(float *a, int32_t length, float key);
    static int32_t binarySearch(float *a, int32_t fromIndex, int32_t toIndex, float key);
    static int32_t binarySearch(int32_t *a, int32_t length, int32_t key);
    static int32_t binarySearch(int32_t *a, int32_t fromIndex, int32_t toIndex, int32_t key);
    static int32_t binarySearch(int64_t *a, int32_t length, int64_t key);
    static int32_t binarySearch(int64_t *a, int32_t fromIndex, int32_t toIndex, int64_t key);
    static int32_t binarySearch(Object **a, int32_t length, Object *key);
    static int32_t binarySearch(Object **a, int32_t fromIndex, int32_t toIndex, Object *key);
    static int32_t binarySearch(int16_t *a, int32_t length, int16_t key);
    static int32_t binarySearch(int16_t *a, int32_t fromIndex, int32_t toIndex, int16_t key);
    static int32_t binarySearch(Object **a, int32_t length, Object *key, Comparator *c);
    static int32_t binarySearch(Object **a, int32_t fromIndex, int32_t toIndex, Object *key, Comparator *c);
    static bool *copyOf(bool *original, int32_t length, int32_t newLength);
    static int8_t *copyOf(int8_t *original, int32_t length, int32_t newLength);
    static char *copyOf(char *original, int32_t length, int32_t newLength);
    static double *copyOf(double *original, int32_t length, int32_t newLength);
    static float *copyOf(float *original, int32_t length, int32_t newLength);
    static int32_t *copyOf(int32_t *original, int32_t length, int32_t newLength);
    static int64_t *copyOf(int64_t *original, int32_t length, int32_t newLength);
    static int16_t *copyOf(int16_t *original, int32_t length, int32_t newLength);
    static Object **copyOf(Object **original, int32_t length, int32_t newLength);
    static bool *copyOfRange(bool *original, int32_t length, int32_t from, int32_t to);
    static int8_t *copyOfRange(int8_t *original, int32_t length, int32_t from, int32_t to);
    static char *copyOfRange(char *original, int32_t length, int32_t from, int32_t to);
    static double *copyOfRange(double *original, int32_t length, int32_t from, int32_t to);
    static float *copyOfRange(float *original, int32_t length, int32_t from, int32_t to);
    static int32_t *copyOfRange(int32_t *original, int32_t length, int32_t from, int32_t to);
    static int64_t *copyOfRange(int64_t *original, int32_t length, int32_t from, int32_t to);
    static int16_t *copyOfRange(int16_t *original, int32_t length, int32_t from, int32_t to);
    static Object **copyOfRange(Object **original, int32_t length, int32_t from, int32_t to);
    static bool equals(bool *a, int32_t length, bool *a2, int32_t length2);
    static bool equals(int8_t *a, int32_t length, int8_t *a2, int32_t length2);
    static bool equals(char *a, int32_t length, char *a2, int32_t length2);
    static bool equals(double *a, int32_t length, double *a2, int32_t length2);
    static bool equals(float *a, int32_t length, float *a2, int32_t length2);
    static bool equals(int32_t *a, int32_t length, int32_t *a2, int32_t length2);
    static bool equals(int64_t *a, int32_t length, int64_t *a2, int32_t length2);
    static bool equals(Object **a, int32_t length, Object **a2, int32_t length2);
    static bool equals(int16_t *a, int32_t length, int16_t *a2, int32_t length2);
    static void fill(bool *a, int32_t length, bool val);
    static void fill(bool *a, int32_t fromIndex, int32_t toIndex, bool val);
    static void fill(int8_t *a, int32_t length, int8_t val);
    static void fill(int8_t *a, int32_t fromIndex, int32_t toIndex, int8_t val);
    static void fill(char *a, int32_t length, char val);
    static void fill(char *a, int32_t fromIndex, int32_t toIndex, char val);
    static void fill(double *a, int32_t length, double val);
    static void fill(double *a, int32_t fromIndex, int32_t toIndex, double val);
    static void fill(float *a, int32_t length, float val);
    static void fill(float *a, int32_t fromIndex, int32_t toIndex, float val);
    static void fill(int32_t *a, int32_t length, int32_t val);
    static void fill(int32_t *a, int32_t fromIndex, int32_t toIndex, int32_t val);
    static void fill(int64_t *a, int32_t length, int64_t val);
    static void fill(int64_t *a, int32_t fromIndex, int32_t toIndex, int64_t val);
    static void fill(Object **a, int32_t length, Object *val);
    static void fill(Object **a, int32_t fromIndex, int32_t toIndex, Object *val);
    static void fill(int16_t *a, int32_t length, int16_t val);
    static void fill(int16_t *a, int32_t fromIndex, int32_t toIndex, int16_t val);
    static void sort(int8_t *a, int32_t length);
    static void sort(int8_t *a, int32_t fromIndex, int32_t toIndex);
    static void sort(char *a, int32_t length);
    static void sort(char *a, int32_t fromIndex, int32_t toIndex);
    static void sort(double *a, int32_t length);
    static void sort(double *a, int32_t fromIndex, int32_t toIndex);
    static void sort(float *a, int32_t length);
    static void sort(float *a, int32_t fromIndex, int32_t toIndex);
    static void sort(int32_t *a, int32_t length);
    static void sort(int32_t *a, int32_t fromIndex, int32_t toIndex);
    static void sort(int64_t *a, int32_t length);
    static void sort(int64_t *a, int32_t fromIndex, int32_t toIndex);
    static void sort(Object **a, int32_t length);
    static void sort(Object **a, int32_t fromIndex, int32_t toIndex);
    static void sort(int16_t *a, int32_t length);
    static void sort(int16_t *a, int32_t fromIndex, int32_t toIndex);
    static void sort(Object **a, int32_t length, Comparator *c);
    static void sort(Object **a, int32_t fromIndex, int32_t toIndex, Comparator *c);
    static String *toString(bool *a, int32_t length);
    static String *toString(int8_t *a, int32_t length);
    static String *toString(char *a, int32_t length);
    static String *toString(double *a, int32_t length);
    static String *toString(float *a, int32_t length);
    static String *toString(int32_t *a, int32_t length);
    static String *toString(int64_t *a, int32_t length);
    static String *toString(Object **a, int32_t length);
    static String *toString(int16_t *a, int32_t length);
};

/*
    Represents the type-agnostic function for binary searching
    in the specified sorted part of any array according to a specified compare function.
 */
template &lt;typename T&gt; int32_t Arrays::binarySearchGeneric(T *a, int32_t fromIndex, int32_t toIndex, T key, int32_t (*c)(T, T)) {
    // initial lower index
    int32_t lower = fromIndex;
    // initial upper index
    int32_t upper = toIndex - 1;

    while (lower &lt;= upper) {
        // middle index
        int32_t middle = ((uint32_t)lower + (uint32_t)upper) &gt;&gt; 1;
        T middleValue = a[middle];

        // middle index is the new lower index if the key is greater than middle value
        if (c(middleValue, key) &lt; 0) {
            lower = middle + 1;
        }
        // middle index is the new upper index if the key is greater than middle value
        else if (c(middleValue, key) &gt; 0) {
            upper = middle - 1;
        }
        // returning the element if middle index value is equal to the key
        else {
            return middle;
        }
    }
    
    // returning the negative index if element not found
    return -(lower + 1);
}

/*
    Represents the type-agnostic function for copying
    the specified part of any array.
 */
template &lt;typename T&gt; T *Arrays::copyOfRangeGeneric(T *original, int32_t length, int32_t from, int32_t to, T defaultValue) {
    // a new array with the length equal to the difference of boundaries of the original array
    T *a = new T[to - from]();

    // the specified upper boundary if greater than the original array length
    if (to &gt; length) {
        // copying the values from the original array to its last element
        for (int32_t i = from; i &lt; length; i++) {
            a[i - from] = original[i];
        }

        // filling the rest of the new array with the default value of the given type
        for (int32_t i = length; i &lt; to; i++) {
            a[i - from] = defaultValue;
        }
    }
    // the specified upper boundary is less then the original array length
    else {
        // copying the values from the original array to the element on the specified upper boundary
        for (int32_t i = from; i &lt; to; i++) {
            a[i - from] = original[i];
        }
    }

    return a;
}

/*
    Represents the type-agnostic function for testing if two
    specified arrays are equal.
 */
template &lt;typename T&gt; bool Arrays::equalsGeneric(T *a, int32_t length, T *a2, int32_t length2, bool (*equals)(T, T), bool isObjectArray) {
    // comparing pointers
    if (a == a2) {
        return true;
    }

    // testing the references for a NULL value
    if (a == nullptr || a2 == nullptr) {
        return false;
    }

    // comparing the array lengths
    if (length2 != length) {
        return false;
    }

    // comparing corresponding elements of arrays
    for (int32_t i = 0; i &lt; length; i++) {
        bool e;
        
        // checking NULL values for object pointers
        if (isObjectArray) {
            e = a[i] == 0 ? a2[i] == 0 : equals(a[i], a2[i]);
        }
        else {
            e = equals(a[i], a2[i]);
        }
        
        if (!e) {
            return false;
        }
    }

    return true;
}

/*
    Represents the type-agnostic function for filling
    the specified part of any array with the specified value.
 */
template &lt;typename T&gt; void Arrays::fillGeneric(T *a, int32_t fromIndex, int32_t toIndex, T val) {
    // setting each element to the value
    for (int32_t i = fromIndex; i &lt; toIndex; i++) {
        a[i] = val;
    }
}

/*
    Represents the type-agnostic function for sorting
    the specified part of any array according to a specified compare function.
 */
template &lt;typename T&gt; void Arrays::sortGeneric(T *a, int32_t fromIndex, int32_t toIndex, bool (*c)(T, T), bool isObjectArray) {
    // unstable sort for primitive values
    if (!isObjectArray) {
        std::sort(a + fromIndex, a + toIndex, c);
    }
    // stable sort for object pointers
    else {
        std::stable_sort(a + fromIndex, a + toIndex, c);
    }
}

/*
    Represents the type-agnostic function for creating
    the string representation of any array.
 */
template &lt;typename T&gt; String *Arrays::toStringGeneric(T *a, int32_t length, String *(*toString)(T), bool isObjectArray) {
    // create ostringstream for appending the text
    std::ostringstream oss("");
    oss &lt;&lt; "[";
    String *str;

    // append first element string representation
    if (length &gt; 0) {
        // checking NULL values for object pointers
        if (isObjectArray) {
            str = a[0] == 0 ? new String("null") : toString(a[0]);
        }
        else  {
            str = toString(a[0]);
        }
        
        oss &lt;&lt; str-&gt;_s();
        delete str;
    }

    // append another elements string representation
    for (int32_t i = 1; i &lt; length; i++) {
        // checking NULL values for object pointers
        if (isObjectArray) {
            str = a[i] == 0 ? new String("null") : toString(a[i]);
        }
        else  {
            str = toString(a[i]);
        }
        
        oss &lt;&lt; ", " &lt;&lt; str-&gt;_s();
        delete str;
    }

    oss &lt;&lt; "]";

    // create Java-like string
    return new String(oss.str());
}

#endif	// ARRAYS_INCLUDED


#include "Arrays.h"

#include "Boolean.h"
#include "Byte.h"
#include "Character.h"
#include "Double.h"
#include "Float.h"
#include "Integer.h"
#include "Long.h"
#include "Short.h"

bool Arrays::defaultBool = false;
int8_t Arrays::defaultByte = 0;
char Arrays::defaultChar = '\0';
double Arrays::defaultDouble = 0.0;
float Arrays::defaultFloat = 0.0f;
int32_t Arrays::defaultInt = 0;
int64_t Arrays::defaultLong = 0LL;
Object *Arrays::defaultPointer = 0;
int16_t Arrays::defaultShort = 0;
void *Arrays::currentComparator = nullptr;

/*
 * methods for testing if the two specified values are equal:
 */

bool Arrays::equalsBool(bool a, bool b) {
    Boolean x(a);
    Boolean y(b);

    return (&amp;x)-&gt;equals(&amp;y);
}

bool Arrays::equalsB(int8_t a, int8_t b) {
    Byte x(a);
    Byte y(b);

    return (&amp;x)-&gt;equals(&amp;y);
}

bool Arrays::equalsC(char a, char b) {
    Character x(a);
    Character y(b);

    return (&amp;x)-&gt;equals(&amp;y);
}

bool Arrays::equalsD(double a, double b) {
    Double x(a);
    Double y(b);

    return (&amp;x)-&gt;equals(&amp;y);
}

bool Arrays::equalsF(float a, float b) {
    Float x(a);
    Float y(b);

    return (&amp;x)-&gt;equals(&amp;y);
}

bool Arrays::equalsI(int32_t a, int32_t b) {
    Integer x(a);
    Integer y(b);

    return (&amp;x)-&gt;equals(&amp;y);
}

bool Arrays::equalsL(int64_t a, int64_t b) {
    Long x(a);
    Long y(b);

    return (&amp;x)-&gt;equals(&amp;y);
}

bool Arrays::equalsS(int16_t a, int16_t b) {
    Short x(a);
    Short y(b);

    return (&amp;x)-&gt;equals(&amp;y);
}

bool Arrays::equalsObj(Object *a, Object *b) {
    return a-&gt;equals(b);
}

/*
 * method for returning the string representation of the specified object:
 */
String *Arrays::toStringObj(Object *a) {
    return a-&gt;toString();
}

/*
 * methods for comparing the two specified values:
 */

bool Arrays::compareB(int8_t a, int8_t b) {
    return compareBI(a, b) &lt; 0;
}

bool Arrays::compareC(char a, char b) {
    return compareCI(a, b) &lt; 0;
}

bool Arrays::compareD(double a, double b) {
    return compareDI(a, b) &lt; 0;
}

bool Arrays::compareF(float a, float b) {
    return compareFI(a, b) &lt; 0;
}

bool Arrays::compareI(int32_t a, int32_t b) {
    return compareII(a, b) &lt; 0;
}

bool Arrays::compareL(int64_t a, int64_t b) {
    return compareLI(a, b) &lt; 0;
}

bool Arrays::compareS(int16_t a, int16_t b) {
    return compareSI(a, b) &lt; 0;
}

bool Arrays::compareObj(Object *a, Object *b) {
    return compareObjI(a, b) &lt; 0;
}

bool Arrays::compareObjComp(Object *a, Object *b) {
    return compareObjCompI(a, b) &lt; 0;
}

int32_t Arrays::compareBI(int8_t a, int8_t b) {
    return Byte::compare(a, b);
}

int32_t Arrays::compareCI(char a, char b) {
    return Character::compare(a, b);
}

int32_t Arrays::compareDI(double a, double b) {
    return Double::compare(a, b);
}

int32_t Arrays::compareFI(float a, float b) {
    return Float::compare(a, b);
}

int32_t Arrays::compareII(int32_t a, int32_t b) {
    return Integer::compare(a, b);
}

int32_t Arrays::compareLI(int64_t a, int64_t b) {
    return Long::compare(a, b);
}

int32_t Arrays::compareSI(int16_t a, int16_t b) {
    return Short::compare(a, b);
}

int32_t Arrays::compareObjI(Object *a, Object *b) {
    Comparable *x = (Comparable *) a;
    Comparable *y = (Comparable *) b;
    
    return x-&gt;compareTo(y);
}

int32_t Arrays::compareObjCompI(Object *a, Object *b) {
    return ((Comparator *) currentComparator)-&gt;compare(a, b);
}

/**
 * Searches the specified array of bytes for the specified value using the
 * binary search algorithm
 *
 * @param a the array to be searched
 * @param length The array length
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
int32_t Arrays::binarySearch(int8_t *a, int32_t length, int8_t key) {
    return binarySearchGeneric(a, 0, length, key, compareBI);
}

/**
 * Searches a range of the specified array of bytes for the specified value
 * using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 */
int32_t Arrays::binarySearch(int8_t *a, int32_t fromIndex, int32_t toIndex, int8_t key) {
    return binarySearchGeneric(a, fromIndex, toIndex, key, compareBI);
}

/**
 * Searches the specified array of chars for the specified value using the
 * binary search algorithm.
 *
 * @param a the array to be searched
 * @param length The array length
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
int32_t Arrays::binarySearch(char *a, int32_t length, char key) {
    return binarySearchGeneric(a, 0, length, key, compareCI);
}

/**
 * Searches a range of the specified array of chars for the specified value
 * using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 */
int32_t Arrays::binarySearch(char *a, int32_t fromIndex, int32_t toIndex, char key) {
    return binarySearchGeneric(a, fromIndex, toIndex, key, compareCI);
}

/**
 * Searches the specified array of doubles for the specified value using the
 * binary search algorithm.
 *
 * @param a the array to be searched
 * @param length The array length
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
int32_t Arrays::binarySearch(double *a, int32_t length, double key) {
    return binarySearchGeneric(a, 0, length, key, compareDI);
}

/**
 * Searches a range of the specified array of doubles for the specified
 * value using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 */
int32_t Arrays::binarySearch(double *a, int32_t fromIndex, int32_t toIndex, double key) {
    return binarySearchGeneric(a, fromIndex, toIndex, key, compareDI);
}

/**
 * Searches the specified array of floats for the specified value using the
 * binary search algorithm.
 *
 * @param a the array to be searched
 * @param length The array length
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
int32_t Arrays::binarySearch(float *a, int32_t length, float key) {
    return binarySearchGeneric(a, 0, length, key, compareFI);
}

/**
 * Searches a range of the specified array of floats for the specified value
 * using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 */
int32_t Arrays::binarySearch(float *a, int32_t fromIndex, int32_t toIndex, float key) {
    return binarySearchGeneric(a, fromIndex, toIndex, key, compareFI);
}

/**
 * Searches the specified array of ints for the specified value using the
 * binary search algorithm.
 *
 * @param a the array to be searched
 * @param length The array length
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
int32_t Arrays::binarySearch(int32_t *a, int32_t length, int32_t key) {
    return binarySearchGeneric(a, 0, length, key, compareII);
}

/**
 * Searches a range of the specified array of ints for the specified value
 * using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 */
int32_t Arrays::binarySearch(int32_t *a, int32_t fromIndex, int32_t toIndex, int32_t key) {
    return binarySearchGeneric(a, fromIndex, toIndex, key, compareII);
}

/**
 * Searches the specified array of longs for the specified value using the
 * binary search algorithm.
 *
 * @param a the array to be searched
 * @param length The array length
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
int32_t Arrays::binarySearch(int64_t *a, int32_t length, int64_t key) {
    return binarySearchGeneric(a, 0, length, key, compareLI);
}

/**
 * Searches a range of the specified array of longs for the specified value
 * using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 */
int32_t Arrays::binarySearch(int64_t *a, int32_t fromIndex, int32_t toIndex, int64_t key) {
    return binarySearchGeneric(a, fromIndex, toIndex, key, compareLI);
}

/**
 * Searches the specified array for the specified object using the binary
 * search algorithm.
 *
 * @param a the array to be searched
 * @param length The array length
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
int32_t Arrays::binarySearch(Object **a, int32_t length, Object *key) {
    return binarySearchGeneric(a, 0, length, key, compareObjI);
}

/**
 * Searches a range of the specified array for the specified object using
 * the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 */
int32_t Arrays::binarySearch(Object **a, int32_t fromIndex, int32_t toIndex, Object *key) {
    return binarySearchGeneric(a, fromIndex, toIndex, key, compareObjI);
}

/**
 * Searches the specified array of shorts for the specified value using the
 * binary search algorithm.
 *
 * @param a the array to be searched
 * @param length The array length
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
int32_t Arrays::binarySearch(int16_t *a, int32_t length, int16_t key) {
    return binarySearchGeneric(a, 0, length, key, compareSI);
}

/**
 * Searches a range of the specified array of shorts for the specified value
 * using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 */
int32_t Arrays::binarySearch(int16_t *a, int32_t fromIndex, int32_t toIndex, int16_t key) {
    return binarySearchGeneric(a, fromIndex, toIndex, key, compareSI);
}

/**
 * Searches the specified array for the specified object using the binary
 * search algorithm.
 *
 * @param a the array to be searched
 * @param length The array length
 * @param key the value to be searched for
 * @param c the comparator by which the array is ordered. A null value
 * indicates that the elements' natural ordering should be used.
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 */
int32_t Arrays::binarySearch(Object **a, int32_t length, Object *key, Comparator *c) {
    // setting the comparator used by the specified comparison function
    currentComparator = c;
    return binarySearchGeneric(a, 0, length, key, compareObjCompI);
}

/**
 * Searches a range of the specified array for the specified object using
 * the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @param c the comparator by which the array is ordered. A null value
 * indicates that the elements' natural ordering should be used.
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 */
int32_t Arrays::binarySearch(Object **a, int32_t fromIndex, int32_t toIndex, Object *key, Comparator *c) {
    // setting the comparator used by the specified comparison function
    currentComparator = c;
    return binarySearchGeneric(a, fromIndex, toIndex, key, compareObjCompI);
}

/**
 * Copies the specified array, truncating or padding with false (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param length The array length
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with false
 * elements to obtain the specified length
 */
bool *Arrays::copyOf(bool *original, int32_t length, int32_t newLength) {
    return copyOfRangeGeneric(original, length, 0, newLength, defaultBool);
}

/**
 * Copies the specified array, truncating or padding with zeros (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param length The array length
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with zeros to
 * obtain the specified length
 */
int8_t *Arrays::copyOf(int8_t *original, int32_t length, int32_t newLength) {
    return copyOfRangeGeneric(original, length, 0, newLength, defaultByte);
}

/**
 * Copies the specified array, truncating or padding with null characters
 * (if necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param length The array length
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with null
 * characters to obtain the specified length
 */
char *Arrays::copyOf(char *original, int32_t length, int32_t newLength) {
    return copyOfRangeGeneric(original, length, 0, newLength, defaultChar);
}

/**
 * Copies the specified array, truncating or padding with zeros (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param length The array length
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with zeros to
 * obtain the specified length
 */
double *Arrays::copyOf(double *original, int32_t length, int32_t newLength) {
    return copyOfRangeGeneric(original, length, 0, newLength, defaultDouble);
}

/**
 * Copies the specified array, truncating or padding with zeros (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param length The array length
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with zeros to
 * obtain the specified length
 */
float *Arrays::copyOf(float *original, int32_t length, int32_t newLength) {
    return copyOfRangeGeneric(original, length, 0, newLength, defaultFloat);
}

/**
 * Copies the specified array, truncating or padding with zeros (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param length The array length
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with zeros to
 * obtain the specified length
 */
int32_t *Arrays::copyOf(int32_t *original, int32_t length, int32_t newLength) {
    return copyOfRangeGeneric(original, length, 0, newLength, defaultInt);
}

/**
 * Copies the specified array, truncating or padding with zeros (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param length The array length
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with zeros to
 * obtain the specified length
 */
int64_t *Arrays::copyOf(int64_t *original, int32_t length, int32_t newLength) {
    return copyOfRangeGeneric(original, length, 0, newLength, defaultLong);
}

/**
 * Copies the specified array, truncating or padding with nulls (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param length The array length
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with nulls to
 * obtain the specified length
 */
Object **Arrays::copyOf(Object **original, int32_t length, int32_t newLength) {
    return copyOfRangeGeneric(original, length, 0, newLength, defaultPointer);
}

/**
 * Copies the specified array, truncating or padding with zeros (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param length The array length
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with zeros to
 * obtain the specified length
 */
int16_t *Arrays::copyOf(int16_t *original, int32_t length, int32_t newLength) {
    return copyOfRangeGeneric(original, length, 0, newLength, defaultShort);
}

/**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param length The array length
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with false elements to obtain the required
 * length
 */
bool *Arrays::copyOfRange(bool *original, int32_t length, int32_t from, int32_t to) {
    return copyOfRangeGeneric(original, length, from, to, defaultBool);
}

/**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param length The array length
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with zeros to obtain the required length
 */
int8_t *Arrays::copyOfRange(int8_t *original, int32_t length, int32_t from, int32_t to) {
    return copyOfRangeGeneric(original, length, from, to, defaultByte);
}

/**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param length The array length
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with null characters to obtain the required
 * length
 */
char *Arrays::copyOfRange(char *original, int32_t length, int32_t from, int32_t to) {
    return copyOfRangeGeneric(original, length, from, to, defaultChar);
}

/**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param length The array length
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with zeros to obtain the required length
 */
double *Arrays::copyOfRange(double *original, int32_t length, int32_t from, int32_t to) {
    return copyOfRangeGeneric(original, length, from, to, defaultDouble);
}

/**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param length The array length
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with zeros to obtain the required length
 */
float *Arrays::copyOfRange(float *original, int32_t length, int32_t from, int32_t to) {
    return copyOfRangeGeneric(original, length, from, to, defaultFloat);
}

/**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param length The array length
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with zeros to obtain the required length
 */
int32_t *Arrays::copyOfRange(int32_t *original, int32_t length, int32_t from, int32_t to) {
    return copyOfRangeGeneric(original, length, from, to, defaultInt);
}

/**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param length The array length
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with zeros to obtain the required length
 */
int64_t *Arrays::copyOfRange(int64_t *original, int32_t length, int32_t from, int32_t to) {
    return copyOfRangeGeneric(original, length, from, to, defaultLong);
}

/**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param length The array length
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with nulls to obtain the required length
 */
Object **Arrays::copyOfRange(Object **original, int32_t length, int32_t from, int32_t to) {
    return copyOfRangeGeneric(original, length, from, to, defaultPointer);
}

/**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param length The array length
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with zeros to obtain the required length
 */
int16_t *Arrays::copyOfRange(int16_t *original, int32_t length, int32_t from, int32_t to) {
    return copyOfRangeGeneric(original, length, from, to, defaultShort);
}

/**
 * Returns true if the two specified arrays of booleans are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param length The array length
 * @param a2 the other array to be tested for equality
 * @param length2 The other array length
 * @return true if the two arrays are equal
 */
bool Arrays::equals(bool *a, int32_t length, bool *a2, int32_t length2) {
    return equalsGeneric(a, length, a2, length2, equalsBool, false);
}

/**
 * Returns true if the two specified arrays of bytes are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param length The array length
 * @param a2 the other array to be tested for equality
 * @param length2 The other array length
 * @return true if the two arrays are equal
 */
bool Arrays::equals(int8_t *a, int32_t length, int8_t *a2, int32_t length2) {
    return equalsGeneric(a, length, a2, length2, equalsB, false);
}

/**
 * Returns true if the two specified arrays of chars are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param length The array length
 * @param a2 the other array to be tested for equality
 * @param length2 The other array length
 * @return true if the two arrays are equal
 */
bool Arrays::equals(char *a, int32_t length, char *a2, int32_t length2) {
    return equalsGeneric(a, length, a2, length2, equalsC, false);
}

/**
 * Returns true if the two specified arrays of doubles are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param length The array length
 * @param a2 the other array to be tested for equality
 * @param length2 The other array length
 * @return true if the two arrays are equal
 */
bool Arrays::equals(double *a, int32_t length, double *a2, int32_t length2) {
    return equalsGeneric(a, length, a2, length2, equalsD, false);
}

/**
 * Returns true if the two specified arrays of floats are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param length The array length
 * @param a2 the other array to be tested for equality
 * @param length2 The other array length
 * @return true if the two arrays are equal
 */
bool Arrays::equals(float *a, int32_t length, float *a2, int32_t length2) {
    return equalsGeneric(a, length, a2, length2, equalsF, false);
}

/**
 * Returns true if the two specified arrays of ints are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param length The array length
 * @param a2 the other array to be tested for equality
 * @param length2 The other array length
 * @return true if the two arrays are equal
 */
bool Arrays::equals(int32_t *a, int32_t length, int32_t *a2, int32_t length2) {
    return equalsGeneric(a, length, a2, length2, equalsI, false);
}

/**
 * Returns true if the two specified arrays of longs are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param length The array length
 * @param a2 the other array to be tested for equality
 * @param length2 The other array length
 * @return true if the two arrays are equal
 */
bool Arrays::equals(int64_t *a, int32_t length, int64_t *a2, int32_t length2) {
    return equalsGeneric(a, length, a2, length2, equalsL, false);
}

/**
 * Returns true if the two specified arrays of Objects are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param length The array length
 * @param a2 the other array to be tested for equality
 * @param length2 The other array length
 * @return true if the two arrays are equal
 */
bool Arrays::equals(Object **a, int32_t length, Object **a2, int32_t length2) {
    return equalsGeneric(a, length, a2, length2, equalsObj, true);
}

/**
 * Returns true if the two specified arrays of shorts are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param length The array length
 * @param a2 the other array to be tested for equality
 * @param length2 The other array length
 * @return true if the two arrays are equal
 */
bool Arrays::equals(int16_t *a, int32_t length, int16_t *a2, int32_t length2) {
    return equalsGeneric(a, length, a2, length2, equalsS, false);
}

/**
 * Assigns the specified boolean value to each element of the specified
 * array of booleans.
 *
 * @param a the array to be filled
 * @param length The array length
 * @param val the value to be stored in all elements of the array
 */
void Arrays::fill(bool *a, int32_t length, bool val) {
    fillGeneric(a, 0, length, val);
}

/**
 * Assigns the specified boolean value to each element of the specified
 * range of the specified array of booleans.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 */
void Arrays::fill(bool *a, int32_t fromIndex, int32_t toIndex, bool val) {
    fillGeneric(a, fromIndex, toIndex, val);
}

/**
 * Assigns the specified byte value to each element of the specified array
 * of bytes.
 *
 * @param a the array to be filled
 * @param length The array length
 * @param val the value to be stored in all elements of the array
 */
void Arrays::fill(int8_t *a, int32_t length, int8_t val) {
    fillGeneric(a, 0, length, val);
}

/**
 * Assigns the specified byte value to each element of the specified range
 * of the specified array of bytes.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 */
void Arrays::fill(int8_t *a, int32_t fromIndex, int32_t toIndex, int8_t val) {
    fillGeneric(a, fromIndex, toIndex, val);
}

/**
 * Assigns the specified char value to each element of the specified array
 * of chars.
 *
 * @param a the array to be filled
 * @param length The array length
 * @param val the value to be stored in all elements of the array
 */
void Arrays::fill(char *a, int32_t length, char val) {
    fillGeneric(a, 0, length, val);
}

/**
 * Assigns the specified char value to each element of the specified range
 * of the specified array of chars.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 */
void Arrays::fill(char *a, int32_t fromIndex, int32_t toIndex, char val) {
    fillGeneric(a, fromIndex, toIndex, val);
}

/**
 * Assigns the specified double value to each element of the specified array
 * of doubles.
 *
 * @param a the array to be filled
 * @param length The array length
 * @param val the value to be stored in all elements of the array
 */
void Arrays::fill(double *a, int32_t length, double val) {
    fillGeneric(a, 0, length, val);
}

/**
 * Assigns the specified double value to each element of the specified range
 * of the specified array of doubles.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 */
void Arrays::fill(double *a, int32_t fromIndex, int32_t toIndex, double val) {
    fillGeneric(a, fromIndex, toIndex, val);
}

/**
 * Assigns the specified float value to each element of the specified array
 * of floats.
 *
 * @param a the array to be filled
 * @param length The array length
 * @param val the value to be stored in all elements of the array
 */
void Arrays::fill(float *a, int32_t length, float val) {
    fillGeneric(a, 0, length, val);
}

/**
 * Assigns the specified float value to each element of the specified range
 * of the specified array of floats.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 */
void Arrays::fill(float *a, int32_t fromIndex, int32_t toIndex, float val) {
    fillGeneric(a, fromIndex, toIndex, val);
}

/**
 * Assigns the specified int value to each element of the specified array of
 * ints.
 *
 * @param a the array to be filled
 * @param length The array length
 * @param val the value to be stored in all elements of the array
 */
void Arrays::fill(int32_t *a, int32_t length, int32_t val) {
    fillGeneric(a, 0, length, val);
}

/**
 * Assigns the specified int value to each element of the specified range of
 * the specified array of ints.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 */
void Arrays::fill(int32_t *a, int32_t fromIndex, int32_t toIndex, int32_t val) {
    fillGeneric(a, fromIndex, toIndex, val);
}

/**
 * Assigns the specified long value to each element of the specified array
 * of longs.
 *
 * @param a the array to be filled
 * @param length The array length
 * @param val the value to be stored in all elements of the array
 */
void Arrays::fill(int64_t *a, int32_t length, int64_t val) {
    fillGeneric(a, 0, length, val);
}

/**
 * Assigns the specified long value to each element of the specified range
 * of the specified array of longs.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 */
void Arrays::fill(int64_t *a, int32_t fromIndex, int32_t toIndex, int64_t val) {
    fillGeneric(a, fromIndex, toIndex, val);
}

/**
 * Assigns the specified Object pointer to each element of the specified
 * array of Objects.
 *
 * @param a the array to be filled
 * @param length The array length
 * @param val the value to be stored in all elements of the array
 */
void Arrays::fill(Object **a, int32_t length, Object *val) {
    fillGeneric(a, 0, length, val);
}

/**
 * Assigns the specified Object pointer to each element of the specified
 * range of the specified array of Objects.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 */
void Arrays::fill(Object **a, int32_t fromIndex, int32_t toIndex, Object *val) {
    fillGeneric(a, fromIndex, toIndex, val);
}

/**
 * Assigns the specified short value to each element of the specified array
 * of shorts.
 *
 * @param a the array to be filled
 * @param length The array length
 * @param val the value to be stored in all elements of the array
 */
void Arrays::fill(int16_t *a, int32_t length, int16_t val) {
    fillGeneric(a, 0, length, val);
}

/**
 * Assigns the specified short value to each element of the specified range
 * of the specified array of shorts.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 */
void Arrays::fill(int16_t *a, int32_t fromIndex, int32_t toIndex, int16_t val) {
    fillGeneric(a, fromIndex, toIndex, val);
}

/**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 * @param length The array length
 */
void Arrays::sort(int8_t *a, int32_t length) {
    sortGeneric(a, 0, length, compareB);
}

/**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 */
void Arrays::sort(int8_t *a, int32_t fromIndex, int32_t toIndex) {
    sortGeneric(a, fromIndex, toIndex, compareB);
}

/**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 * @param length The array length
 */
void Arrays::sort(char *a, int32_t length) {
    sortGeneric(a, 0, length, compareC);
}

/**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 */
void Arrays::sort(char *a, int32_t fromIndex, int32_t toIndex) {
    sortGeneric(a, fromIndex, toIndex, compareC);
}

/**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 * @param length The array length
 */
void Arrays::sort(double *a, int32_t length) {
    sortGeneric(a, 0, length, compareD);
}

/**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 */
void Arrays::sort(double *a, int32_t fromIndex, int32_t toIndex) {
    sortGeneric(a, fromIndex, toIndex, compareD);
}

/**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 * @param length The array length
 */
void Arrays::sort(float *a, int32_t length) {
    sortGeneric(a, 0, length, compareF);
}

/**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 */
void Arrays::sort(float *a, int32_t fromIndex, int32_t toIndex) {
    sortGeneric(a, fromIndex, toIndex, compareF);
}

/**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 * @param length The array length
 */
void Arrays::sort(int32_t *a, int32_t length) {
    sortGeneric(a, 0, length, compareI);
}

/**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 */
void Arrays::sort(int32_t *a, int32_t fromIndex, int32_t toIndex) {
    sortGeneric(a, fromIndex, toIndex, compareI);
}

/**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 * @param length The array length
 */
void Arrays::sort(int64_t *a, int32_t length) {
    sortGeneric(a, 0, length, compareL);
}

/**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 */
void Arrays::sort(int64_t *a, int32_t fromIndex, int32_t toIndex) {
    sortGeneric(a, fromIndex, toIndex, compareL);
}

/**
 * Sorts the specified array of objects into ascending order, according to
 * the natural ordering of its elements.
 *
 * @param a the array to be sorted
 * @param length The array length
 */
void Arrays::sort(Object **a, int32_t length) {
    sortGeneric(a, 0, length, compareObj);
}

/**
 * Sorts the specified range of the specified array of objects into
 * ascending order, according to the natural ordering of its elements.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 */
void Arrays::sort(Object **a, int32_t fromIndex, int32_t toIndex) {
    sortGeneric(a, fromIndex, toIndex, compareObj);
}

/**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 * @param length The array length
 */
void Arrays::sort(int16_t *a, int32_t length) {
    sortGeneric(a, 0, length, compareS);
}

/**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 */
void Arrays::sort(int16_t *a, int32_t fromIndex, int32_t toIndex) {
    sortGeneric(a, fromIndex, toIndex, compareS);
}

/**
 * Sorts the specified array of objects according to the order induced by
 * the specified comparator.
 *
 * @param a the array to be sorted
 * @param length The array length
 * @param c the comparator to determine the order of the array. A null value
 * indicates that the elements' natural ordering should be used.
 */
void Arrays::sort(Object **a, int32_t length, Comparator *c) {
    // setting the comparator used by the specified comparison function
    currentComparator = c;
    sortGeneric(a, 0, length, compareObjComp, true);
}

/**
 * Sorts the specified range of the specified array of objects according to
 * the order induced by the specified comparator.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 * @param c the comparator to determine the order of the array. A null value
 * indicates that the elements' natural ordering should be used.
 */
void Arrays::sort(Object **a, int32_t fromIndex, int32_t toIndex, Comparator *c) {
    // setting the comparator used by the specified comparison function
    currentComparator = c;
    sortGeneric(a, fromIndex, toIndex, compareObjComp, true);
}

/**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @param length The array length
 * @return a string representation of a
 */
String *Arrays::toString(bool *a, int32_t length) {
    return toStringGeneric(a, length, Boolean::toString, false);
}

/**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @param length The array length
 * @return a string representation of a
 */
String *Arrays::toString(int8_t *a, int32_t length) {
    return toStringGeneric(a, length, Byte::toString, false);
}

/**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @param length The array length
 * @return a string representation of a
 */
String *Arrays::toString(char *a, int32_t length) {
    return toStringGeneric(a, length, Character::toString, false);
}

/**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @param length The array length
 * @return a string representation of a
 */
String *Arrays::toString(double *a, int32_t length) {
    return toStringGeneric(a, length, Double::toString, false);
}

/**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @param length The array length
 * @return a string representation of a
 */
String *Arrays::toString(float *a, int32_t length) {
    return toStringGeneric(a, length, Float::toString, false);
}

/**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @param length The array length
 * @return a string representation of a
 */
String *Arrays::toString(int32_t *a, int32_t length) {
    return toStringGeneric(a, length, Integer::toString, false);
}

/**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @param length The array length
 * @return a string representation of a
 */
String *Arrays::toString(int64_t *a, int32_t length) {
    return toStringGeneric(a, length, Long::toString, false);
}

/**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @param length The array length
 * @return a string representation of a
 */
String *Arrays::toString(Object **a, int32_t length) {
    return toStringGeneric(a, length, toStringObj, true);
}

/**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @param length The array length
 * @return a string representation of a
 */
String *Arrays::toString(int16_t *a, int32_t length) {
    return toStringGeneric(a, length, Short::toString, false);
}
</code>
<code lang="C#">﻿using System;
using System.Collections.Generic;

namespace JavaClasses
{

    /// &lt;summary&gt;
    /// This class contains various methods for manipulating arrays (such as sorting and searching).
    /// &lt;/summary&gt;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;
    public static class Arrays
    {

        // delegate for testing if two values are equal
        private delegate bool EqualsMethod&lt;T&gt;(T o1, T o2);

        // comparator for 8-bit signed integer values
        private class ByteComparer : IComparer&lt;sbyte&gt;
        {
            public int Compare(sbyte x, sbyte y)
            {
                return Byte.compare(x, y);
            }
        }

        // comparator for characters
        private class CharacterComparer : IComparer&lt;char&gt;
        {
            public int Compare(char x, char y)
            {
                return Character.compare(x, y);
            }
        }

        // comparator for double-precision decimal values
        private class DoubleComparer : IComparer&lt;double&gt;
        {
            public int Compare(double x, double y)
            {
                return Double.compare(x, y);
            }
        }

        // comparator for single-precision decimal values
        private class FloatComparer : IComparer&lt;float&gt;
        {
            public int Compare(float x, float y)
            {
                return Float.compare(x, y);
            }
        }

        // comparator for 32-bit signed integer values
        private class IntegerComparer : IComparer&lt;int&gt;
        {
            public int Compare(int x, int y)
            {
                return Integer.compare(x, y);
            }
        }

        // comparator for 64-bit signed integer values
        private class LongComparer : IComparer&lt;long&gt;
        {
            public int Compare(long x, long y)
            {
                return Long.compare(x, y);
            }
        }

        // comparator for 16-bit signed integer values
        private class ObjectComparer : IComparer&lt;Object&gt;
        {
            public int Compare(Object x, Object y)
            {
                return (x as Comparable).compareTo(y as Comparable);
            }
        }

        // comparator for 16-bit signed integer values
        private class ShortComparer : IComparer&lt;short&gt;
        {
            public int Compare(short x, short y)
            {
                return Short.compare(x, y);
            }
        }

        /*
            Represents the type-agnostic method for binary searching
            in the specified sorted part of any array according to a specified comparator.
         */
        private static int binarySearchGeneric&lt;T&gt;(T[] a, int? fromIndex, int? toIndex, T key, IComparer&lt;T&gt; c)
        {
            int fromIndexValue = fromIndex ?? 0;
            int toIndexValue = toIndex ?? a.Length;
            
            return Array.BinarySearch(a, fromIndexValue, toIndexValue - fromIndexValue, key, c);
        }

        /*
            Represents the type-agnostic method for copying
            the specified part of any array.
         */
        private static T[] copyOfRangeGeneric&lt;T&gt;(T[] original, int? from, int to)
        {
            int fromValue = from ?? 0;

            // a new array with the length equal to the difference of boundaries of the original array
            T[] a = new T[to - fromValue];

            // the specified upper boundary if greater than the original array length
            if (to &gt; original.Length)
            {
                // copying the values from the original array to its last element
                for (int i = fromValue; i &lt; original.Length; i++)
                {
                    a[i - fromValue] = original[i];
                }

                // filling the rest of the new array with the default value of the given type
                for (int i = original.Length; i &lt; to; i++)
                {
                    a[i - fromValue] = default(T);
                }
            }
            // the specified upper boundary is less then the original array length
            else
            {
                // copying the values from the original array to the element on the specified upper boundary
                for (int i = fromValue; i &lt; to; i++)
                {
                    a[i - fromValue] = original[i];
                }
            }

            return a;
        }

        /*
            Represents the type-agnostic method for testing if two
            specified arrays are equal.
         */
        private static bool equalsGeneric&lt;T&gt;(T[] a, T[] a2, EqualsMethod&lt;T&gt; equals)
        {
            // comparing references
            if (a == a2)
            {
                return true;
            }

            // testing the references for a NULL value
            if (a == null || a2 == null)
            {
                return false;
            }

            int length = a.Length;

            // comparing the array lengths
            if (a2.Length != length)
            {
                return false;
            }

            // comparing corresponding elements of arrays
            for (int i = 0; i &lt; length; i++)
            {
                if (!equals(a[i], a2[i]))
                {
                    return false;
                }
            }

            return true;
        }

        /*
            Represents the type-agnostic method for filling
            the specified part of any array with the specified value.
         */
        private static void fillGeneric&lt;T&gt;(T[] a, int? fromIndex, int? toIndex, T val)
        {
            int fromIndexValue = fromIndex ?? 0;
            int toIndexValue = toIndex ?? a.Length;

            // setting each element to the value
            for (int i = fromIndexValue; i &lt; toIndexValue; i++)
            {
                a[i] = val;
            }
        }

        /*
            Represents the type-agnostic method for sorting
            the specified part of any array according to a specified comparator.
         */
        private static void sortGeneric&lt;T&gt;(T[] a, int? fromIndex, int? toIndex, IComparer&lt;T&gt; c)
        {
            int fromIndexValue = fromIndex ?? 0;
            int toIndexValue = toIndex ?? a.Length;

            Array.Sort(a, fromIndexValue, toIndexValue - fromIndexValue, c);
        }

        /*
            Represents the type-agnostic method for creating
            the string representation of any array.
         */
        private static String toStringGeneric&lt;T&gt;(T[] a)
        {
            // create StringBuilder for appending the text
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append("[");

            // append the first element string representation
            if (a.Length &gt; 0)
            {
                sb.Append(a[0] == null ? "null" : a[0].ToString());
            }

            // append another elements string representation
            for (int i = 1; i &lt; a.Length; i++)
            {
                sb.Append(", ").Append(a[i] == null ? "null" : a[i].ToString());
            }

            // create Java-like string
            return new String(sb.Append("]").ToString());
        }

        /// &lt;summary&gt;
        /// Searches the specified array of bytes for the specified value using the
        /// binary search algorithm
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be searched
        /// &lt;/param&gt;&lt;param name="key"&gt;the value to be searched for
        /// &lt;/param&gt;&lt;returns&gt;index of the search key, if it is contained in the array;
        /// otherwise, (-(insertion point) - 1). The insertion point is defined as
        /// the point at which the key would be inserted into the array: the index of
        /// the first element greater than the key, or a.length if all elements in
        /// the array are less than the specified key. Note that this guarantees that
        /// the return value will be &gt;= 0 if and only if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch(sbyte[] a, sbyte key)
        {
            return binarySearchGeneric(a, null, null, key, new ByteComparer());
        }

        /// &lt;summary&gt;
        /// Searches a range of the specified array of bytes for the specified value
        /// using the binary search algorithm.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be searched
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be
        /// searched
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be searched
        /// &lt;/param&gt;&lt;param name="key"&gt;the value to be searched for
        /// &lt;/param&gt;&lt;returns&gt;index of the search key, if it is contained in the array within
        /// the specified range; otherwise, (-(insertion point) - 1). The insertion
        /// point is defined as the point at which the key would be inserted into the
        /// array: the index of the first element in the range greater than the key,
        /// or toIndex if all elements in the range are less than the specified key.
        /// Note that this guarantees that the return value will be &gt;= 0 if and only
        /// if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch(sbyte[] a, int fromIndex, int toIndex, sbyte key)
        {
            return binarySearchGeneric(a, fromIndex, toIndex, key, new ByteComparer());
        }

        /// &lt;summary&gt;
        /// Searches the specified array of chars for the specified value using the
        /// binary search algorithm.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be searched
        /// &lt;/param&gt;&lt;param name="key"&gt;the value to be searched for
        /// &lt;/param&gt;&lt;returns&gt;index of the search key, if it is contained in the array;
        /// otherwise, (-(insertion point) - 1). The insertion point is defined as
        /// the point at which the key would be inserted into the array: the index of
        /// the first element greater than the key, or a.length if all elements in
        /// the array are less than the specified key. Note that this guarantees that
        /// the return value will be &gt;= 0 if and only if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch(char[] a, char key)
        {
            return binarySearchGeneric(a, null, null, key, new CharacterComparer());
        }

        /// &lt;summary&gt;
        /// Searches a range of the specified array of chars for the specified value
        /// using the binary search algorithm.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be searched
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be
        /// searched
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be searched
        /// &lt;/param&gt;&lt;param name="key"&gt;the value to be searched for
        /// &lt;/param&gt;&lt;returns&gt;index of the search key, if it is contained in the array within
        /// the specified range; otherwise, (-(insertion point) - 1). The insertion
        /// point is defined as the point at which the key would be inserted into the
        /// array: the index of the first element in the range greater than the key,
        /// or toIndex if all elements in the range are less than the specified key.
        /// Note that this guarantees that the return value will be &gt;= 0 if and only
        /// if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch(char[] a, int fromIndex, int toIndex, char key)
        {
            return binarySearchGeneric(a, fromIndex, toIndex, key, new CharacterComparer());
        }

        /// &lt;summary&gt;
        /// Searches the specified array of doubles for the specified value using the
        /// binary search algorithm.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be searched
        /// &lt;/param&gt;&lt;param name="key"&gt;the value to be searched for
        /// &lt;/param&gt;&lt;returns&gt;index of the search key, if it is contained in the array;
        /// otherwise, (-(insertion point) - 1). The insertion point is defined as
        /// the point at which the key would be inserted into the array: the index of
        /// the first element greater than the key, or a.length if all elements in
        /// the array are less than the specified key. Note that this guarantees that
        /// the return value will be &gt;= 0 if and only if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch(double[] a, double key)
        {
            return binarySearchGeneric(a, null, null, key, new DoubleComparer());
        }

        /// &lt;summary&gt;
        /// Searches a range of the specified array of doubles for the specified
        /// value using the binary search algorithm.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be searched
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be
        /// searched
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be searched
        /// &lt;/param&gt;&lt;param name="key"&gt;the value to be searched for
        /// &lt;/param&gt;&lt;returns&gt;index of the search key, if it is contained in the array within
        /// the specified range; otherwise, (-(insertion point) - 1). The insertion
        /// point is defined as the point at which the key would be inserted into the
        /// array: the index of the first element in the range greater than the key,
        /// or toIndex if all elements in the range are less than the specified key.
        /// Note that this guarantees that the return value will be &gt;= 0 if and only
        /// if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch(double[] a, int fromIndex, int toIndex, double key)
        {
            return binarySearchGeneric(a, fromIndex, toIndex, key, new DoubleComparer());
        }

        /// &lt;summary&gt;
        /// Searches the specified array of floats for the specified value using the
        /// binary search algorithm.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be searched
        /// &lt;/param&gt;&lt;param name="key"&gt;the value to be searched for
        /// &lt;/param&gt;&lt;returns&gt;index of the search key, if it is contained in the array;
        /// otherwise, (-(insertion point) - 1). The insertion point is defined as
        /// the point at which the key would be inserted into the array: the index of
        /// the first element greater than the key, or a.length if all elements in
        /// the array are less than the specified key. Note that this guarantees that
        /// the return value will be &gt;= 0 if and only if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch(float[] a, float key)
        {
            return binarySearchGeneric(a, null, null, key, new FloatComparer());
        }

        /// &lt;summary&gt;
        /// Searches a range of the specified array of floats for the specified value
        /// using the binary search algorithm.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be searched
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be
        /// searched
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be searched
        /// &lt;/param&gt;&lt;param name="key"&gt;the value to be searched for
        /// &lt;/param&gt;&lt;returns&gt;index of the search key, if it is contained in the array within
        /// the specified range; otherwise, (-(insertion point) - 1). The insertion
        /// point is defined as the point at which the key would be inserted into the
        /// array: the index of the first element in the range greater than the key,
        /// or toIndex if all elements in the range are less than the specified key.
        /// Note that this guarantees that the return value will be &gt;= 0 if and only
        /// if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch(float[] a, int fromIndex, int toIndex, float key)
        {
            return binarySearchGeneric(a, fromIndex, toIndex, key, new FloatComparer());
        }

        /// &lt;summary&gt;
        /// Searches the specified array of ints for the specified value using the
        /// binary search algorithm.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be searched
        /// &lt;/param&gt;&lt;param name="key"&gt;the value to be searched for
        /// &lt;/param&gt;&lt;returns&gt;index of the search key, if it is contained in the array;
        /// otherwise, (-(insertion point) - 1). The insertion point is defined as
        /// the point at which the key would be inserted into the array: the index of
        /// the first element greater than the key, or a.length if all elements in
        /// the array are less than the specified key. Note that this guarantees that
        /// the return value will be &gt;= 0 if and only if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch(int[] a, int key)
        {
            return binarySearchGeneric(a, null, null, key, new IntegerComparer());
        }

        /// &lt;summary&gt;
        /// Searches a range of the specified array of ints for the specified value
        /// using the binary search algorithm.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be searched
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be
        /// searched
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be searched
        /// &lt;/param&gt;&lt;param name="key"&gt;the value to be searched for
        /// &lt;/param&gt;&lt;returns&gt;index of the search key, if it is contained in the array within
        /// the specified range; otherwise, (-(insertion point) - 1). The insertion
        /// point is defined as the point at which the key would be inserted into the
        /// array: the index of the first element in the range greater than the key,
        /// or toIndex if all elements in the range are less than the specified key.
        /// Note that this guarantees that the return value will be &gt;= 0 if and only
        /// if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch(int[] a, int fromIndex, int toIndex, int key)
        {
            return binarySearchGeneric(a, fromIndex, toIndex, key, new IntegerComparer());
        }

        /// &lt;summary&gt;
        /// Searches the specified array of longs for the specified value using the
        /// binary search algorithm.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be searched
        /// &lt;/param&gt;&lt;param name="key"&gt;the value to be searched for
        /// &lt;/param&gt;&lt;returns&gt;index of the search key, if it is contained in the array;
        /// otherwise, (-(insertion point) - 1). The insertion point is defined as
        /// the point at which the key would be inserted into the array: the index of
        /// the first element greater than the key, or a.length if all elements in
        /// the array are less than the specified key. Note that this guarantees that
        /// the return value will be &gt;= 0 if and only if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch(long[] a, long key)
        {
            return binarySearchGeneric(a, null, null, key, new LongComparer());
        }

        /// &lt;summary&gt;
        /// Searches a range of the specified array of longs for the specified value
        /// using the binary search algorithm.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be searched
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be
        /// searched
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be searched
        /// &lt;/param&gt;&lt;param name="key"&gt;the value to be searched for
        /// &lt;/param&gt;&lt;returns&gt;index of the search key, if it is contained in the array within
        /// the specified range; otherwise, (-(insertion point) - 1). The insertion
        /// point is defined as the point at which the key would be inserted into the
        /// array: the index of the first element in the range greater than the key,
        /// or toIndex if all elements in the range are less than the specified key.
        /// Note that this guarantees that the return value will be &gt;= 0 if and only
        /// if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch(long[] a, int fromIndex, int toIndex, long key)
        {
            return binarySearchGeneric(a, fromIndex, toIndex, key, new LongComparer());
        }

        /// &lt;summary&gt;
        /// Searches the specified array for the specified object using the binary
        /// search algorithm.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be searched
        /// &lt;/param&gt;&lt;param name="key"&gt;the value to be searched for
        /// &lt;/param&gt;&lt;returns&gt;index of the search key, if it is contained in the array;
        /// otherwise, (-(insertion point) - 1). The insertion point is defined as
        /// the point at which the key would be inserted into the array: the index of
        /// the first element greater than the key, or a.length if all elements in
        /// the array are less than the specified key. Note that this guarantees that
        /// the return value will be &gt;= 0 if and only if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch(Object[] a, Object key)
        {
            return binarySearchGeneric(a, null, null, key, new ObjectComparer());
        }

        /// &lt;summary&gt;
        /// Searches a range of the specified array for the specified object using
        /// the binary search algorithm.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be searched
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be
        /// searched
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be searched
        /// &lt;/param&gt;&lt;param name="key"&gt;the value to be searched for
        /// &lt;/param&gt;&lt;returns&gt;index of the search key, if it is contained in the array within
        /// the specified range; otherwise, (-(insertion point) - 1). The insertion
        /// point is defined as the point at which the key would be inserted into the
        /// array: the index of the first element in the range greater than the key,
        /// or toIndex if all elements in the range are less than the specified key.
        /// Note that this guarantees that the return value will be &gt;= 0 if and only
        /// if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch(Object[] a, int fromIndex, int toIndex, Object key)
        {
            return binarySearchGeneric(a, fromIndex, toIndex, key, new ObjectComparer());
        }

        /// &lt;summary&gt;
        /// Searches the specified array of shorts for the specified value using the
        /// binary search algorithm.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be searched
        /// &lt;/param&gt;&lt;param name="key"&gt;the value to be searched for
        /// &lt;/param&gt;&lt;returns&gt;index of the search key, if it is contained in the array;
        /// otherwise, (-(insertion point) - 1). The insertion point is defined as
        /// the point at which the key would be inserted into the array: the index of
        /// the first element greater than the key, or a.length if all elements in
        /// the array are less than the specified key. Note that this guarantees that
        /// the return value will be &gt;= 0 if and only if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch(short[] a, short key)
        {
            return binarySearchGeneric(a, null, null, key, new ShortComparer());
        }

        /// &lt;summary&gt;
        /// Searches a range of the specified array of shorts for the specified value
        /// using the binary search algorithm.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be searched
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be
        /// searched
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be searched
        /// &lt;/param&gt;&lt;param name="key"&gt;the value to be searched for
        /// &lt;/param&gt;&lt;returns&gt;index of the search key, if it is contained in the array within
        /// the specified range; otherwise, (-(insertion point) - 1). The insertion
        /// point is defined as the point at which the key would be inserted into the
        /// array: the index of the first element in the range greater than the key,
        /// or toIndex if all elements in the range are less than the specified key.
        /// Note that this guarantees that the return value will be &gt;= 0 if and only
        /// if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch(short[] a, int fromIndex, int toIndex, short key)
        {
            return binarySearchGeneric(a, fromIndex, toIndex, key, new ShortComparer());
        }

        /// &lt;summary&gt;
        /// Searches the specified array for the specified object using the binary
        /// search algorithm.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be searched
        /// &lt;/param&gt;&lt;param name="key"&gt;the value to be searched for
        /// &lt;/param&gt;&lt;param name="c"&gt;the comparator by which the array is ordered. A null value
        /// indicates that the elements' natural ordering should be used.
        /// &lt;/param&gt;&lt;returns&gt;index of the search key, if it is contained in the array;
        /// otherwise, (-(insertion point) - 1). The insertion point is defined as
        /// the point at which the key would be inserted into the array: the index of
        /// the first element greater than the key, or a.length if all elements in
        /// the array are less than the specified key. Note that this guarantees that
        /// the return value will be &gt;= 0 if and only if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch&lt;T&gt;(T[] a, T key, Comparator c) where T : Object
        {
            return binarySearchGeneric(a, null, null, key, c);
        }

        /// &lt;summary&gt;
        /// Searches a range of the specified array for the specified object using
        /// the binary search algorithm.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be searched
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be
        /// searched
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be searched
        /// &lt;/param&gt;&lt;param name="key"&gt;the value to be searched for
        /// &lt;/param&gt;&lt;param name="c"&gt;the comparator by which the array is ordered. A null value
        /// indicates that the elements' natural ordering should be used.
        /// &lt;/param&gt;&lt;returns&gt;index of the search key, if it is contained in the array within
        /// the specified range; otherwise, (-(insertion point) - 1). The insertion
        /// point is defined as the point at which the key would be inserted into the
        /// array: the index of the first element in the range greater than the key,
        /// or toIndex if all elements in the range are less than the specified key.
        /// Note that this guarantees that the return value will be &gt;= 0 if and only
        /// if the key is found.
        /// &lt;/returns&gt;
        public static int binarySearch&lt;T&gt;(T[] a, int fromIndex, int toIndex, T key, Comparator c) where T : Object
        {
            return binarySearchGeneric(a, fromIndex, toIndex, key, c);
        }

        /// &lt;summary&gt;
        /// Copies the specified array, truncating or padding with false (if
        /// necessary) so the copy has the specified length.
        /// &lt;/summary&gt;
        /// &lt;param name="original"&gt;the array to be copied
        /// &lt;/param&gt;&lt;param name="newLength"&gt;the length of the copy to be returned
        /// &lt;/param&gt;&lt;returns&gt;a copy of the original array, truncated or padded with false
        /// elements to obtain the specified length
        /// &lt;/returns&gt;
        public static bool[] copyOf(bool[] original, int newLength)
        {
            return copyOfRangeGeneric(original, null, newLength);
        }

        /// &lt;summary&gt;
        /// Copies the specified array, truncating or padding with zeros (if
        /// necessary) so the copy has the specified length.
        /// &lt;/summary&gt;
        /// &lt;param name="original"&gt;the array to be copied
        /// &lt;/param&gt;&lt;param name="newLength"&gt;the length of the copy to be returned
        /// &lt;/param&gt;&lt;returns&gt;a copy of the original array, truncated or padded with zeros to
        /// obtain the specified length
        /// &lt;/returns&gt;
        public static sbyte[] copyOf(sbyte[] original, int newLength)
        {
            return copyOfRangeGeneric(original, null, newLength);
        }

        /// &lt;summary&gt;
        /// Copies the specified array, truncating or padding with null characters
        /// (if necessary) so the copy has the specified length.
        /// &lt;/summary&gt;
        /// &lt;param name="original"&gt;the array to be copied
        /// &lt;/param&gt;&lt;param name="newLength"&gt;the length of the copy to be returned
        /// &lt;/param&gt;&lt;returns&gt;a copy of the original array, truncated or padded with null
        /// characters to obtain the specified length
        /// &lt;/returns&gt;
        public static char[] copyOf(char[] original, int newLength)
        {
            return copyOfRangeGeneric(original, null, newLength);
        }

        /// &lt;summary&gt;
        /// Copies the specified array, truncating or padding with zeros (if
        /// necessary) so the copy has the specified length.
        /// &lt;/summary&gt;
        /// &lt;param name="original"&gt;the array to be copied
        /// &lt;/param&gt;&lt;param name="newLength"&gt;the length of the copy to be returned
        /// &lt;/param&gt;&lt;returns&gt;a copy of the original array, truncated or padded with zeros to
        /// obtain the specified length
        /// &lt;/returns&gt;
        public static double[] copyOf(double[] original, int newLength)
        {
            return copyOfRangeGeneric(original, null, newLength);
        }

        /// &lt;summary&gt;
        /// Copies the specified array, truncating or padding with zeros (if
        /// necessary) so the copy has the specified length.
        /// &lt;/summary&gt;
        /// &lt;param name="original"&gt;the array to be copied
        /// &lt;/param&gt;&lt;param name="newLength"&gt;the length of the copy to be returned
        /// &lt;/param&gt;&lt;returns&gt;a copy of the original array, truncated or padded with zeros to
        /// obtain the specified length
        /// &lt;/returns&gt;
        public static float[] copyOf(float[] original, int newLength)
        {
            return copyOfRangeGeneric(original, null, newLength);
        }

        /// &lt;summary&gt;
        /// Copies the specified array, truncating or padding with zeros (if
        /// necessary) so the copy has the specified length.
        /// &lt;/summary&gt;
        /// &lt;param name="original"&gt;the array to be copied
        /// &lt;/param&gt;&lt;param name="newLength"&gt;the length of the copy to be returned
        /// &lt;/param&gt;&lt;returns&gt;a copy of the original array, truncated or padded with zeros to
        /// obtain the specified length
        /// &lt;/returns&gt;
        public static int[] copyOf(int[] original, int newLength)
        {
            return copyOfRangeGeneric(original, null, newLength);
        }

        /// &lt;summary&gt;
        /// Copies the specified array, truncating or padding with zeros (if
        /// necessary) so the copy has the specified length.
        /// &lt;/summary&gt;
        /// &lt;param name="original"&gt;the array to be copied
        /// &lt;/param&gt;&lt;param name="newLength"&gt;the length of the copy to be returned
        /// &lt;/param&gt;&lt;returns&gt;a copy of the original array, truncated or padded with zeros to
        /// obtain the specified length
        /// &lt;/returns&gt;
        public static long[] copyOf(long[] original, int newLength)
        {
            return copyOfRangeGeneric(original, null, newLength);
        }

        /// &lt;summary&gt;
        /// Copies the specified array, truncating or padding with zeros (if
        /// necessary) so the copy has the specified length.
        /// &lt;/summary&gt;
        /// &lt;param name="original"&gt;the array to be copied
        /// &lt;/param&gt;&lt;param name="newLength"&gt;the length of the copy to be returned
        /// &lt;/param&gt;&lt;returns&gt;a copy of the original array, truncated or padded with zeros to
        /// obtain the specified length
        /// &lt;/returns&gt;
        public static short[] copyOf(short[] original, int newLength)
        {
            return copyOfRangeGeneric(original, null, newLength);
        }

        /// &lt;summary&gt;
        /// Copies the specified array, truncating or padding with nulls (if
        /// necessary) so the copy has the specified length.
        /// &lt;/summary&gt;
        /// &lt;param name="original"&gt;the array to be copied
        /// &lt;/param&gt;&lt;param name="newLength"&gt;the length of the copy to be returned
        /// &lt;/param&gt;&lt;returns&gt;a copy of the original array, truncated or padded with nulls to
        /// obtain the specified length
        /// &lt;/returns&gt;
        public static T[] copyOf&lt;T&gt;(T[] original, int newLength)
        {
            return copyOfRangeGeneric(original, null, newLength);
        }

        /// &lt;summary&gt;
        /// Copies the specified range of the specified array into a new array.
        /// &lt;/summary&gt;
        /// &lt;param name="original"&gt;the array from which a range is to be copied
        /// &lt;/param&gt;&lt;param name="from"&gt;the initial index of the range to be copied, inclusive
        /// &lt;/param&gt;&lt;param name="to"&gt;the final index of the range to be copied, exclusive. (This
        /// index may lie outside the array.)
        /// &lt;/param&gt;&lt;returns&gt;a new array containing the specified range from the original
        /// array, truncated or padded with false elements to obtain the required
        /// length
        /// &lt;/returns&gt;
        public static bool[] copyOfRange(bool[] original, int from, int to)
        {
            return copyOfRangeGeneric(original, from, to);
        }

        /// &lt;summary&gt;
        /// Copies the specified range of the specified array into a new array.
        /// &lt;/summary&gt;
        /// &lt;param name="original"&gt;the array from which a range is to be copied
        /// &lt;/param&gt;&lt;param name="from"&gt;the initial index of the range to be copied, inclusive
        /// &lt;/param&gt;&lt;param name="to"&gt;the final index of the range to be copied, exclusive. (This
        /// index may lie outside the array.)
        /// &lt;/param&gt;&lt;returns&gt;a new array containing the specified range from the original
        /// array, truncated or padded with zeros to obtain the required length
        /// &lt;/returns&gt;
        public static sbyte[] copyOfRange(sbyte[] original, int from, int to)
        {
            return copyOfRangeGeneric(original, from, to);
        }

        /// &lt;summary&gt;
        /// Copies the specified range of the specified array into a new array.
        /// &lt;/summary&gt;
        /// &lt;param name="original"&gt;the array from which a range is to be copied
        /// &lt;/param&gt;&lt;param name="from"&gt;the initial index of the range to be copied, inclusive
        /// &lt;/param&gt;&lt;param name="to"&gt;the final index of the range to be copied, exclusive. (This
        /// index may lie outside the array.)
        /// &lt;/param&gt;&lt;returns&gt;a new array containing the specified range from the original
        /// array, truncated or padded with null characters to obtain the required
        /// length
        /// &lt;/returns&gt;
        public static char[] copyOfRange(char[] original, int from, int to)
        {
            return copyOfRangeGeneric(original, from, to);
        }

        /// &lt;summary&gt;
        /// Copies the specified range of the specified array into a new array.
        /// &lt;/summary&gt;
        /// &lt;param name="original"&gt;the array from which a range is to be copied
        /// &lt;/param&gt;&lt;param name="from"&gt;the initial index of the range to be copied, inclusive
        /// &lt;/param&gt;&lt;param name="to"&gt;the final index of the range to be copied, exclusive. (This
        /// index may lie outside the array.)
        /// &lt;/param&gt;&lt;returns&gt;a new array containing the specified range from the original
        /// array, truncated or padded with zeros to obtain the required length
        /// &lt;/returns&gt;
        public static double[] copyOfRange(double[] original, int from, int to)
        {
            return copyOfRangeGeneric(original, from, to);
        }

        /// &lt;summary&gt;
        /// Copies the specified range of the specified array into a new array.
        /// &lt;/summary&gt;
        /// &lt;param name="original"&gt;the array from which a range is to be copied
        /// &lt;/param&gt;&lt;param name="from"&gt;the initial index of the range to be copied, inclusive
        /// &lt;/param&gt;&lt;param name="to"&gt;the final index of the range to be copied, exclusive. (This
        /// index may lie outside the array.)
        /// &lt;/param&gt;&lt;returns&gt;a new array containing the specified range from the original
        /// array, truncated or padded with zeros to obtain the required length
        /// &lt;/returns&gt;
        public static float[] copyOfRange(float[] original, int from, int to)
        {
            return copyOfRangeGeneric(original, from, to);
        }

        /// &lt;summary&gt;
        /// Copies the specified range of the specified array into a new array.
        /// &lt;/summary&gt;
        /// &lt;param name="original"&gt;the array from which a range is to be copied
        /// &lt;/param&gt;&lt;param name="from"&gt;the initial index of the range to be copied, inclusive
        /// &lt;/param&gt;&lt;param name="to"&gt;the final index of the range to be copied, exclusive. (This
        /// index may lie outside the array.)
        /// &lt;/param&gt;&lt;returns&gt;a new array containing the specified range from the original
        /// array, truncated or padded with zeros to obtain the required length
        /// &lt;/returns&gt;
        public static int[] copyOfRange(int[] original, int from, int to)
        {
            return copyOfRangeGeneric(original, from, to);
        }

        /// &lt;summary&gt;
        /// Copies the specified range of the specified array into a new array.
        /// &lt;/summary&gt;
        /// &lt;param name="original"&gt;the array from which a range is to be copied
        /// &lt;/param&gt;&lt;param name="from"&gt;the initial index of the range to be copied, inclusive
        /// &lt;/param&gt;&lt;param name="to"&gt;the final index of the range to be copied, exclusive. (This
        /// index may lie outside the array.)
        /// &lt;/param&gt;&lt;returns&gt;a new array containing the specified range from the original
        /// array, truncated or padded with zeros to obtain the required length
        /// &lt;/returns&gt;
        public static long[] copyOfRange(long[] original, int from, int to)
        {
            return copyOfRangeGeneric(original, from, to);
        }

        /// &lt;summary&gt;
        /// Copies the specified range of the specified array into a new array.
        /// &lt;/summary&gt;
        /// &lt;param name="original"&gt;the array from which a range is to be copied
        /// &lt;/param&gt;&lt;param name="from"&gt;the initial index of the range to be copied, inclusive
        /// &lt;/param&gt;&lt;param name="to"&gt;the final index of the range to be copied, exclusive. (This
        /// index may lie outside the array.)
        /// &lt;/param&gt;&lt;returns&gt;a new array containing the specified range from the original
        /// array, truncated or padded with zeros to obtain the required length
        /// &lt;/returns&gt;
        public static short[] copyOfRange(short[] original, int from, int to)
        {
            return copyOfRangeGeneric(original, from, to);
        }

        /// &lt;summary&gt;
        /// Copies the specified range of the specified array into a new array.
        /// &lt;/summary&gt;
        /// &lt;param name="original"&gt;the array from which a range is to be copied
        /// &lt;/param&gt;&lt;param name="from"&gt;the initial index of the range to be copied, inclusive
        /// &lt;/param&gt;&lt;param name="to"&gt;the final index of the range to be copied, exclusive. (This
        /// index may lie outside the array.)
        /// &lt;/param&gt;&lt;returns&gt;a new array containing the specified range from the original
        /// array, truncated or padded with nulls to obtain the required length
        /// &lt;/returns&gt;
        public static T[] copyOfRange&lt;T&gt;(T[] original, int from, int to)
        {
            return copyOfRangeGeneric(original, from, to);
        }

        /// &lt;summary&gt;
        /// Returns true if the two specified arrays of booleans are equal to one
        /// another.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;one array to be tested for equality
        /// &lt;/param&gt;&lt;param name="a2"&gt;the other array to be tested for equality
        /// &lt;/param&gt;&lt;returns&gt;true if the two arrays are equal
        /// &lt;/returns&gt;
        public static bool equals(bool[] a, bool[] a2)
        {
            return equalsGeneric(a, a2, (x, y) =&gt;
            {
                return new Boolean(x).equals(new Boolean(y));
            });
        }

        /// &lt;summary&gt;
        /// Returns true if the two specified arrays of bytes are equal to one
        /// another.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;one array to be tested for equality
        /// &lt;/param&gt;&lt;param name="a2"&gt;the other array to be tested for equality
        /// &lt;/param&gt;&lt;returns&gt;true if the two arrays are equal
        /// &lt;/returns&gt;
        public static bool equals(sbyte[] a, sbyte[] a2)
        {
            return equalsGeneric(a, a2, (x, y) =&gt;
            {
                return new Byte(x).equals(new Byte(y));
            });
        }

        /// &lt;summary&gt;
        /// Returns true if the two specified arrays of chars are equal to one
        /// another.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;one array to be tested for equality
        /// &lt;/param&gt;&lt;param name="a2"&gt;the other array to be tested for equality
        /// &lt;/param&gt;&lt;returns&gt;true if the two arrays are equal
        /// &lt;/returns&gt;
        public static bool equals(char[] a, char[] a2)
        {
            return equalsGeneric(a, a2, (x, y) =&gt;
            {
                return new Character(x).equals(new Character(y));
            });
        }

        /// &lt;summary&gt;
        /// Returns true if the two specified arrays of doubles are equal to one
        /// another.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;one array to be tested for equality
        /// &lt;/param&gt;&lt;param name="a2"&gt;the other array to be tested for equality
        /// &lt;/param&gt;&lt;returns&gt;true if the two arrays are equal
        /// &lt;/returns&gt;
        public static bool equals(double[] a, double[] a2)
        {
            return equalsGeneric(a, a2, (x, y) =&gt;
            {
                return new Double(x).equals(new Double(y));
            });
        }

        /// &lt;summary&gt;
        /// Returns true if the two specified arrays of floats are equal to one
        /// another.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;one array to be tested for equality
        /// &lt;/param&gt;&lt;param name="a2"&gt;the other array to be tested for equality
        /// &lt;/param&gt;&lt;returns&gt;true if the two arrays are equal
        /// &lt;/returns&gt;
        public static bool equals(float[] a, float[] a2)
        {
            return equalsGeneric(a, a2, (x, y) =&gt;
            {
                return new Float(x).equals(new Float(y));
            });
        }

        /// &lt;summary&gt;
        /// Returns true if the two specified arrays of ints are equal to one
        /// another.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;one array to be tested for equality
        /// &lt;/param&gt;&lt;param name="a2"&gt;the other array to be tested for equality
        /// &lt;/param&gt;&lt;returns&gt;true if the two arrays are equal
        /// &lt;/returns&gt;
        public static bool equals(int[] a, int[] a2)
        {
            return equalsGeneric(a, a2, (x, y) =&gt;
            {
                return new Integer(x).equals(new Integer(y));
            });
        }

        /// &lt;summary&gt;
        /// Returns true if the two specified arrays of longs are equal to one
        /// another.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;one array to be tested for equality
        /// &lt;/param&gt;&lt;param name="a2"&gt;the other array to be tested for equality
        /// &lt;/param&gt;&lt;returns&gt;true if the two arrays are equal
        /// &lt;/returns&gt;
        public static bool equals(long[] a, long[] a2)
        {
            return equalsGeneric(a, a2, (x, y) =&gt;
            {
                return new Long(x).equals(new Long(y));
            });
        }

        /// &lt;summary&gt;
        /// Returns true if the two specified arrays of Objects are equal to one
        /// another.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;one array to be tested for equality
        /// &lt;/param&gt;&lt;param name="a2"&gt;the other array to be tested for equality
        /// &lt;/param&gt;&lt;returns&gt;true if the two arrays are equal
        /// &lt;/returns&gt;
        public static bool equals(Object[] a, Object[] a2)
        {
            return equalsGeneric(a, a2, (o1, o2) =&gt;
            {
                return (o1 == null ? o2 == null : o1.Equals(o2));
            });
        }

        /// &lt;summary&gt;
        /// Returns true if the two specified arrays of shorts are equal to one
        /// another.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;one array to be tested for equality
        /// &lt;/param&gt;&lt;param name="a2"&gt;the other array to be tested for equality
        /// &lt;/param&gt;&lt;returns&gt;true if the two arrays are equal
        /// &lt;/returns&gt;
        public static bool equals(short[] a, short[] a2)
        {
            return equalsGeneric(a, a2, (x, y) =&gt;
            {
                return new Short(x).equals(new Short(y));
            });
        }

        /// &lt;summary&gt;
        /// Assigns the specified boolean value to each element of the specified
        /// array of booleans.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be filled
        /// &lt;/param&gt;&lt;param name="val"&gt;the value to be stored in all elements of the array
        /// &lt;/param&gt;
        public static void fill(bool[] a, bool val)
        {
            fillGeneric(a, null, null, val);
        }

        /// &lt;summary&gt;
        /// Assigns the specified boolean value to each element of the specified
        /// range of the specified array of booleans.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be filled
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be filled
        /// with the specified value
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be filled
        /// with the specified value
        /// &lt;/param&gt;&lt;param name="val"&gt;the value to be stored in all elements of the array
        /// &lt;/param&gt;
        public static void fill(bool[] a, int fromIndex, int toIndex, bool val)
        {
            fillGeneric(a, fromIndex, toIndex, val);
        }

        /// &lt;summary&gt;
        /// Assigns the specified byte value to each element of the specified array
        /// of bytes.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be filled
        /// &lt;/param&gt;&lt;param name="val"&gt;the value to be stored in all elements of the array
        /// &lt;/param&gt;
        public static void fill(sbyte[] a, sbyte val)
        {
            fillGeneric(a, null, null, val);
        }

        /// &lt;summary&gt;
        /// Assigns the specified byte value to each element of the specified range
        /// of the specified array of bytes.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be filled
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be filled
        /// with the specified value
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be filled
        /// with the specified value
        /// &lt;/param&gt;&lt;param name="val"&gt;the value to be stored in all elements of the array
        /// &lt;/param&gt;
        public static void fill(sbyte[] a, int fromIndex, int toIndex, sbyte val)
        {
            fillGeneric(a, fromIndex, toIndex, val);
        }

        /// &lt;summary&gt;
        /// Assigns the specified char value to each element of the specified array
        /// of chars.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be filled
        /// &lt;/param&gt;&lt;param name="val"&gt;the value to be stored in all elements of the array
        /// &lt;/param&gt;
        public static void fill(char[] a, char val)
        {
            fillGeneric(a, null, null, val);
        }

        /// &lt;summary&gt;
        /// Assigns the specified char value to each element of the specified range
        /// of the specified array of chars.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be filled
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be filled
        /// with the specified value
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be filled
        /// with the specified value
        /// &lt;/param&gt;&lt;param name="val"&gt;the value to be stored in all elements of the array
        /// &lt;/param&gt;
        public static void fill(char[] a, int fromIndex, int toIndex, char val)
        {
            fillGeneric(a, fromIndex, toIndex, val);
        }

        /// &lt;summary&gt;
        /// Assigns the specified double value to each element of the specified array
        /// of doubles.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be filled
        /// &lt;/param&gt;&lt;param name="val"&gt;the value to be stored in all elements of the array
        /// &lt;/param&gt;
        public static void fill(double[] a, double val)
        {
            fillGeneric(a, null, null, val);
        }

        /// &lt;summary&gt;
        /// Assigns the specified double value to each element of the specified range
        /// of the specified array of doubles.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be filled
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be filled
        /// with the specified value
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be filled
        /// with the specified value
        /// &lt;/param&gt;&lt;param name="val"&gt;the value to be stored in all elements of the array
        /// &lt;/param&gt;
        public static void fill(double[] a, int fromIndex, int toIndex, double val)
        {
            fillGeneric(a, fromIndex, toIndex, val);
        }

        /// &lt;summary&gt;
        /// Assigns the specified float value to each element of the specified array
        /// of floats.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be filled
        /// &lt;/param&gt;&lt;param name="val"&gt;the value to be stored in all elements of the array
        /// &lt;/param&gt;
        public static void fill(float[] a, float val)
        {
            fillGeneric(a, null, null, val);
        }

        /// &lt;summary&gt;
        /// Assigns the specified float value to each element of the specified range
        /// of the specified array of floats.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be filled
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be filled
        /// with the specified value
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be filled
        /// with the specified value
        /// &lt;/param&gt;&lt;param name="val"&gt;the value to be stored in all elements of the array
        /// &lt;/param&gt;
        public static void fill(float[] a, int fromIndex, int toIndex, float val)
        {
            fillGeneric(a, fromIndex, toIndex, val);
        }

        /// &lt;summary&gt;
        /// Assigns the specified int value to each element of the specified array of
        /// ints.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be filled
        /// &lt;/param&gt;&lt;param name="val"&gt;the value to be stored in all elements of the array
        /// &lt;/param&gt;
        public static void fill(int[] a, int val)
        {
            fillGeneric(a, null, null, val);
        }

        /// &lt;summary&gt;
        /// Assigns the specified int value to each element of the specified range of
        /// the specified array of ints.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be filled
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be filled
        /// with the specified value
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be filled
        /// with the specified value
        /// &lt;/param&gt;&lt;param name="val"&gt;the value to be stored in all elements of the array
        /// &lt;/param&gt;
        public static void fill(int[] a, int fromIndex, int toIndex, int val)
        {
            fillGeneric(a, fromIndex, toIndex, val);
        }

        /// &lt;summary&gt;
        /// Assigns the specified long value to each element of the specified array
        /// of longs.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be filled
        /// &lt;/param&gt;&lt;param name="val"&gt;the value to be stored in all elements of the array
        /// &lt;/param&gt;
        public static void fill(long[] a, long val)
        {
            fillGeneric(a, null, null, val);
        }

        /// &lt;summary&gt;
        /// Assigns the specified long value to each element of the specified range
        /// of the specified array of longs.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be filled
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be filled
        /// with the specified value
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be filled
        /// with the specified value
        /// &lt;/param&gt;&lt;param name="val"&gt;the value to be stored in all elements of the array
        /// &lt;/param&gt;
        public static void fill(long[] a, int fromIndex, int toIndex, long val)
        {
            fillGeneric(a, fromIndex, toIndex, val);
        }

        /// &lt;summary&gt;
        /// Assigns the specified Object reference to each element of the specified
        /// array of Objects.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be filled
        /// &lt;/param&gt;&lt;param name="val"&gt;the value to be stored in all elements of the array
        /// &lt;/param&gt;
        public static void fill(Object[] a, Object val)
        {
            fillGeneric(a, null, null, val);
        }

        /// &lt;summary&gt;
        /// Assigns the specified Object reference to each element of the specified
        /// range of the specified array of Objects.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be filled
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be filled
        /// with the specified value
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be filled
        /// with the specified value
        /// &lt;/param&gt;&lt;param name="val"&gt;the value to be stored in all elements of the array
        /// &lt;/param&gt;
        public static void fill(Object[] a, int fromIndex, int toIndex, Object val)
        {
            fillGeneric(a, fromIndex, toIndex, val);
        }

        /// &lt;summary&gt;
        /// Assigns the specified short value to each element of the specified array
        /// of shorts.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be filled
        /// &lt;/param&gt;&lt;param name="val"&gt;the value to be stored in all elements of the array
        /// &lt;/param&gt;
        public static void fill(short[] a, short val)
        {
            fillGeneric(a, null, null, val);
        }

        /// &lt;summary&gt;
        /// Assigns the specified short value to each element of the specified range
        /// of the specified array of shorts.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be filled
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be filled
        /// with the specified value
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be filled
        /// with the specified value
        /// &lt;/param&gt;&lt;param name="val"&gt;the value to be stored in all elements of the array
        /// &lt;/param&gt;
        public static void fill(short[] a, int fromIndex, int toIndex, short val)
        {
            fillGeneric(a, fromIndex, toIndex, val);
        }

        /// &lt;summary&gt;
        /// Sorts the specified array into ascending numerical order.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be sorted
        /// &lt;/param&gt;
        public static void sort(sbyte[] a)
        {
            sortGeneric(a, null, null, new ByteComparer());
        }

        /// &lt;summary&gt;
        /// Sorts the specified range of the array into ascending order.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be sorted
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be sorted
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be sorted
        /// &lt;/param&gt;
        public static void sort(sbyte[] a, int fromIndex, int toIndex)
        {
            sortGeneric(a, fromIndex, toIndex, new ByteComparer());
        }

        /// &lt;summary&gt;
        /// Sorts the specified array into ascending numerical order.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be sorted
        /// &lt;/param&gt;
        public static void sort(char[] a)
        {
            sortGeneric(a, null, null, new CharacterComparer());
        }

        /// &lt;summary&gt;
        /// Sorts the specified range of the array into ascending order.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be sorted
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be sorted
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be sorted
        /// &lt;/param&gt;
        public static void sort(char[] a, int fromIndex, int toIndex)
        {
            sortGeneric(a, fromIndex, toIndex, new CharacterComparer());
        }

        /// &lt;summary&gt;
        /// Sorts the specified array into ascending numerical order.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be sorted
        /// &lt;/param&gt;
        public static void sort(double[] a)
        {
            sortGeneric(a, null, null, new DoubleComparer());
        }

        /// &lt;summary&gt;
        /// Sorts the specified range of the array into ascending order.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be sorted
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be sorted
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be sorted
        /// &lt;/param&gt;
        public static void sort(double[] a, int fromIndex, int toIndex)
        {
            sortGeneric(a, fromIndex, toIndex, new DoubleComparer());
        }

        /// &lt;summary&gt;
        /// Sorts the specified array into ascending numerical order.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be sorted
        /// &lt;/param&gt;
        public static void sort(float[] a)
        {
            sortGeneric(a, null, null, new FloatComparer());
        }

        /// &lt;summary&gt;
        /// Sorts the specified range of the array into ascending order.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be sorted
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be sorted
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be sorted
        /// &lt;/param&gt;
        public static void sort(float[] a, int fromIndex, int toIndex)
        {
            sortGeneric(a, fromIndex, toIndex, new FloatComparer());
        }

        /// &lt;summary&gt;
        /// Sorts the specified array into ascending numerical order.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be sorted
        /// &lt;/param&gt;
        public static void sort(int[] a)
        {
            sortGeneric(a, null, null, new IntegerComparer());
        }

        /// &lt;summary&gt;
        /// Sorts the specified range of the array into ascending order.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be sorted
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be sorted
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be sorted
        /// &lt;/param&gt;
        public static void sort(int[] a, int fromIndex, int toIndex)
        {
            sortGeneric(a, fromIndex, toIndex, new IntegerComparer());
        }

        /// &lt;summary&gt;
        /// Sorts the specified array into ascending numerical order.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be sorted
        /// &lt;/param&gt;
        public static void sort(long[] a)
        {
            sortGeneric(a, null, null, new LongComparer());
        }

        /// &lt;summary&gt;
        /// Sorts the specified range of the array into ascending order.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be sorted
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be sorted
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be sorted
        /// &lt;/param&gt;
        public static void sort(long[] a, int fromIndex, int toIndex)
        {
            sortGeneric(a, fromIndex, toIndex, new LongComparer());
        }

        /// &lt;summary&gt;
        /// Sorts the specified array of objects into ascending order, according to
        /// the natural ordering of its elements.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be sorted
        /// &lt;/param&gt;
        public static void sort(Object[] a)
        {
            sortGeneric(a, null, null, new ObjectComparer());
        }

        /// &lt;summary&gt;
        /// Sorts the specified range of the specified array of objects into
        /// ascending order, according to the natural ordering of its elements.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be sorted
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be sorted
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be sorted
        /// &lt;/param&gt;
        public static void sort(Object[] a, int fromIndex, int toIndex)
        {
            sortGeneric(a, fromIndex, toIndex, new ObjectComparer());
        }

        /// &lt;summary&gt;
        /// Sorts the specified array into ascending numerical order.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be sorted
        /// &lt;/param&gt;
        public static void sort(short[] a)
        {
            sortGeneric(a, null, null, new ShortComparer());
        }

        /// &lt;summary&gt;
        /// Sorts the specified range of the array into ascending order.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be sorted
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be sorted
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be sorted
        /// &lt;/param&gt;
        public static void sort(short[] a, int fromIndex, int toIndex)
        {
            sortGeneric(a, fromIndex, toIndex, new ShortComparer());
        }

        /// &lt;summary&gt;
        /// Sorts the specified array of objects according to the order induced by
        /// the specified comparator.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be sorted
        /// &lt;/param&gt;&lt;param name="c"&gt;the comparator to determine the order of the array. A null value
        /// indicates that the elements' natural ordering should be used.
        /// &lt;/param&gt;
        public static void sort&lt;T&gt;(T[] a, Comparator c) where T : Object
        {
            sortGeneric(a, null, null, c);
        }

        /// &lt;summary&gt;
        /// Sorts the specified range of the specified array of objects according to
        /// the order induced by the specified comparator.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array to be sorted
        /// &lt;/param&gt;&lt;param name="fromIndex"&gt;the index of the first element (inclusive) to be sorted
        /// &lt;/param&gt;&lt;param name="toIndex"&gt;the index of the last element (exclusive) to be sorted
        /// &lt;/param&gt;&lt;param name="c"&gt;the comparator to determine the order of the array. A null value
        /// indicates that the elements' natural ordering should be used.
        /// &lt;/param&gt;
        public static void sort&lt;T&gt;(T[] a, int fromIndex, int toIndex, Comparator c) where T : Object
        {
            sortGeneric(a, fromIndex, toIndex, c);
        }

        /// &lt;summary&gt;
        /// Returns a string representation of the contents of the specified array.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array whose string representation to return
        /// &lt;/param&gt;&lt;returns&gt;a string representation of a
        /// &lt;/returns&gt;
        public static String toString(bool[] a)
        {
            return toStringGeneric(a).toLowerCase();
        }

        /// &lt;summary&gt;
        /// Returns a string representation of the contents of the specified array.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array whose string representation to return
        /// &lt;/param&gt;&lt;returns&gt;a string representation of a
        /// &lt;/returns&gt;
        public static String toString(sbyte[] a)
        {
            return toStringGeneric(a);
        }

        /// &lt;summary&gt;
        /// Returns a string representation of the contents of the specified array.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array whose string representation to return
        /// &lt;/param&gt;&lt;returns&gt;a string representation of a
        /// &lt;/returns&gt;
        public static String toString(char[] a)
        {
            return toStringGeneric(a);
        }

        /// &lt;summary&gt;
        /// Returns a string representation of the contents of the specified array.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array whose string representation to return
        /// &lt;/param&gt;&lt;returns&gt;a string representation of a
        /// &lt;/returns&gt;
        public static String toString(double[] a)
        {
            return toStringGeneric(a);
        }

        /// &lt;summary&gt;
        /// Returns a string representation of the contents of the specified array.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array whose string representation to return
        /// &lt;/param&gt;&lt;returns&gt;a string representation of a
        /// &lt;/returns&gt;
        public static String toString(float[] a)
        {
            return toStringGeneric(a);
        }

        /// &lt;summary&gt;
        /// Returns a string representation of the contents of the specified array.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array whose string representation to return
        /// &lt;/param&gt;&lt;returns&gt;a string representation of a
        /// &lt;/returns&gt;
        public static String toString(int[] a)
        {
            return toStringGeneric(a);
        }

        /// &lt;summary&gt;
        /// Returns a string representation of the contents of the specified array.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array whose string representation to return
        /// &lt;/param&gt;&lt;returns&gt;a string representation of a
        /// &lt;/returns&gt;
        public static String toString(long[] a)
        {
            return toStringGeneric(a);
        }

        /// &lt;summary&gt;
        /// Returns a string representation of the contents of the specified array.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array whose string representation to return
        /// &lt;/param&gt;&lt;returns&gt;a string representation of a
        /// &lt;/returns&gt;
        public static String toString(Object[] a)
        {
            return toStringGeneric(a);
        }

        /// &lt;summary&gt;
        /// Returns a string representation of the contents of the specified array.
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;the array whose string representation to return
        /// &lt;/param&gt;&lt;returns&gt;a string representation of a
        /// &lt;/returns&gt;
        public static String toString(short[] a)
        {
            return toStringGeneric(a);
        }

    }

}</code>
<code lang="Free Pascal">unit ArraysUnit;

{$mode objfpc}{$H+}

interface

uses
  SystemUnit, StringUnit;

type

  (*
   * pointer definitions for casting the pointers so they can be dereferenced
   * for getting the value of the specified type
   *)
  PBoolean = ^boolean;
  PShortInt = ^shortInt;
  PAnsiChar = ^ansiChar;
  PDouble = ^double;
  PSingle = ^single;
  PLongInt = ^longInt;
  PInt64 = ^int64;
  PSmallInt = ^smallInt;

  (*
   * default values used for copying one array to the another with greater length:
   *)
  BooleanArray = array of boolean;
  ShortIntArray = array of shortInt;
  AnsiCharArray = array of ansiChar;
  DoubleArray = array of double;
  SingleArray = array of single;
  LongIntArray = array of longInt;
  Int64Array = array of int64;
  SmallIntArray = array of smallInt;
  ObjectArray = array of Object_;

  // pointer to function for testing if two values are equal
  EqualsFunction = function(a, b: pointer): boolean;
  // pointer to function for returning the string representation of the specified value
  ToStringFunction = function(a: pointer): String_;

  (**
   * This class contains various methods for manipulating arrays (such as sorting and searching).
   *
   * @author Petr Kozler (A13B0359P)
   *)
  Arrays = class
    private
      class function binarySearchPointer(a: pointer; fromIndex, toIndex, size: longInt; key: pointer; c: CompareFunction) : longInt;
      class function binarySearchObject(var a: array of Object_; fromIndex, toIndex: longInt; key: Object_; c: Comparator) : longInt;
      class function copyOfRangePointer(original, copyArray: pointer; length, size, from, to_: longInt; defaultValue: pointer) : pointer;
      class function copyOfRangeObject(var original: array of Object_; from, to_: longInt) : ObjectArray;
      class function equalsPointer(a: pointer; length: longInt; a2: pointer; length2, size: longInt; e: EqualsFunction) : boolean;
      class function equalsObject(var a: array of Object_; a2: array of Object_) : boolean;
      class procedure fillPointer(a: pointer; fromIndex, toIndex, size: longInt; val: pointer);
      class procedure fillObject(var a: array of Object_; fromIndex, toIndex: longInt; val: Object_);
      class procedure sortPointer(a: pointer; fromIndex, toIndex, size: longInt; c: CompareFunction);
      class procedure sortObject(var a: array of Object_; fromIndex, toIndex: longInt; c: Comparator);
      class function toStringPointer(a: pointer; length, size: longInt; ts: ToStringFunction) : String_;
      class function toStringObject(var a: array of Object_) : String_;
    public
      class function binarySearch(var a: array of shortInt; key: shortInt) : longInt;
      class function binarySearch(var a: array of shortInt; fromIndex: longInt; toIndex: longInt; key: shortInt) : longInt;
      class function binarySearch(var a: array of ansiChar; key: ansiChar) : longInt;
      class function binarySearch(var a: array of ansiChar; fromIndex: longInt; toIndex: longInt; key: ansiChar) : longInt;
      class function binarySearch(var a: array of double; key: double) : longInt;
      class function binarySearch(var a: array of double; fromIndex: longInt; toIndex: longInt; key: double) : longInt;
      class function binarySearch(var a: array of single; key: single) : longInt;
      class function binarySearch(var a: array of single; fromIndex: longInt; toIndex: longInt; key: single) : longInt;
      class function binarySearch(var a: array of longInt; key: longInt) : longInt;
      class function binarySearch(var a: array of longInt; fromIndex: longInt; toIndex: longInt; key: longInt) : longInt;
      class function binarySearch(var a: array of int64; key: int64) : longInt;
      class function binarySearch(var a: array of int64; fromIndex: longInt; toIndex: longInt; key: int64) : longInt;
      class function binarySearch(var a: array of Object_; key: Object_) : longInt;
      class function binarySearch(var a: array of Object_; fromIndex: longInt; toIndex: longInt; key: Object_) : longInt;
      class function binarySearch(var a: array of smallInt; key: smallInt) : longInt;
      class function binarySearch(var a: array of smallInt; fromIndex: longInt; toIndex: longInt; key: smallInt) : longInt;
      class function binarySearch(var a: array of Object_; key: Object_; c: Comparator) : longInt;
      class function binarySearch(var a: array of Object_; fromIndex: longInt; toIndex: longInt; key: Object_; c: Comparator) : longInt;
      class function copyOf(var original: array of boolean; newLength: longInt) : BooleanArray;
      class function copyOf(var original: array of shortInt; newLength: longInt) : ShortIntArray;
      class function copyOf(var original: array of ansiChar; newLength: longInt) : AnsiCharArray;
      class function copyOf(var original: array of double; newLength: longInt) : DoubleArray;
      class function copyOf(var original: array of single; newLength: longInt) : SingleArray;
      class function copyOf(var original: array of longInt; newLength: longInt) : LongIntArray;
      class function copyOf(var original: array of int64; newLength: longInt) : Int64Array;
      class function copyOf(var original: array of smallInt; newLength: longInt) : SmallIntArray;
      class function copyOf(var original: array of Object_; newLength: longInt) : ObjectArray;
      class function copyOfRange(var original: array of boolean; from: longInt; to_: longInt) : BooleanArray;
      class function copyOfRange(var original: array of shortInt; from: longInt; to_: longInt) : ShortIntArray;
      class function copyOfRange(var original: array of ansiChar; from: longInt; to_: longInt) : AnsiCharArray;
      class function copyOfRange(var original: array of double; from: longInt; to_: longInt) : DoubleArray;
      class function copyOfRange(var original: array of single; from: longInt; to_: longInt) : SingleArray;
      class function copyOfRange(var original: array of longInt; from: longInt; to_: longInt) : LongIntArray;
      class function copyOfRange(var original: array of int64; from: longInt; to_: longInt) : Int64Array;
      class function copyOfRange(var original: array of smallInt; from: longInt; to_: longInt) : SmallIntArray;
      class function copyOfRange(var original: array of Object_; from: longInt; to_: longInt) : ObjectArray;
      class function equals(a: array of boolean; a2: array of boolean) : boolean;
      class function equals(a: array of shortInt; a2: array of shortInt) : boolean;
      class function equals(a: array of ansiChar; a2: array of ansiChar) : boolean;
      class function equals(a: array of double; a2: array of double) : boolean;
      class function equals(a: array of single; a2: array of single) : boolean;
      class function equals(a: array of longInt; a2: array of longInt) : boolean;
      class function equals(a: array of int64; a2: array of int64) : boolean;
      class function equals(a: array of Object_; a2: array of Object_) : boolean;
      class function equals(a: array of smallInt; a2: array of smallInt) : boolean;
      class procedure fill(var a: array of boolean; val: boolean);
      class procedure fill(var a: array of boolean; fromIndex: longInt; toIndex: longInt; val: boolean);
      class procedure fill(var a: array of shortInt; val: shortInt);
      class procedure fill(var a: array of shortInt; fromIndex: longInt; toIndex: longInt; val: shortInt);
      class procedure fill(var a: array of ansiChar; val: ansiChar);
      class procedure fill(var a: array of ansiChar; fromIndex: longInt; toIndex: longInt; val: ansiChar);
      class procedure fill(var a: array of double; val: double);
      class procedure fill(var a: array of double; fromIndex: longInt; toIndex: longInt; val: double);
      class procedure fill(var a: array of single; val: single);
      class procedure fill(var a: array of single; fromIndex: longInt; toIndex: longInt; val: single);
      class procedure fill(var a: array of longInt; val: longInt);
      class procedure fill(var a: array of longInt; fromIndex: longInt; toIndex: longInt; val: longInt);
      class procedure fill(var a: array of int64; val: int64);
      class procedure fill(var a: array of int64; fromIndex: longInt; toIndex: longInt; val: int64);
      class procedure fill(var a: array of Object_; val: Object_);
      class procedure fill(var a: array of Object_; fromIndex: longInt; toIndex: longInt; val: Object_);
      class procedure fill(var a: array of smallInt; val: smallInt);
      class procedure fill(var a: array of smallInt; fromIndex: longInt; toIndex: longInt; val: smallInt);
      class procedure sort(var a: array of shortInt);
      class procedure sort(var a: array of shortInt; fromIndex: longInt; toIndex: longInt);
      class procedure sort(var a: array of ansiChar);
      class procedure sort(var a: array of ansiChar; fromIndex: longInt; toIndex: longInt);
      class procedure sort(var a: array of double);
      class procedure sort(var a: array of double; fromIndex: longInt; toIndex: longInt);
      class procedure sort(var a: array of single);
      class procedure sort(var a: array of single; fromIndex: longInt; toIndex: longInt);
      class procedure sort(var a: array of longInt);
      class procedure sort(var a: array of longInt; fromIndex: longInt; toIndex: longInt);
      class procedure sort(var a: array of int64);
      class procedure sort(var a: array of int64; fromIndex: longInt; toIndex: longInt);
      class procedure sort(var a: array of Object_);
      class procedure sort(var a: array of Object_; fromIndex: longInt; toIndex: longInt);
      class procedure sort(var a: array of smallInt);
      class procedure sort(var a: array of smallInt; fromIndex: longInt; toIndex: longInt);
      class procedure sort(var a: array of Object_; c: Comparator);
      class procedure sort(var a: array of Object_; fromIndex: longInt; toIndex: longInt; c: Comparator);
      class function toString(var a: array of boolean) : String_;
      class function toString(var a: array of shortInt) : String_;
      class function toString(var a: array of ansiChar) : String_;
      class function toString(var a: array of double) : String_;
      class function toString(var a: array of single) : String_;
      class function toString(var a: array of longInt) : String_;
      class function toString(var a: array of int64) : String_;
      class function toString(var a: array of Object_) : String_;
      class function toString(var a: array of smallInt) : String_;
  end;

implementation

uses
  BooleanUnit, ByteUnit, DoubleUnit, FloatUnit, CharacterUnit, IntegerUnit, LongUnit, ShortUnit, StringBuilderUnit, SysUtils, Classes;

(*
 * default values used for copying one array to the another with greater length:
 *)

var
  defaultBoolean: boolean = false;
  defaultByte: shortInt = 0;
  defaultShort: smallInt = 0;
  defaultInt: longInt = 0;
  defaultLong: int64 = 0;
  defaultFloat: single = 0;
  defaultDouble: double = 0;
  defaultChar: ansiChar = #0;

(*
 * functions for comparing the two specified values:
 *)

function _compareB(a, b: pointer) : longInt;
begin
  _compareB := Byte_.compare(PShortInt(a)^, PShortInt(b)^);
end;

function _compareC(a, b: pointer) : longInt;
begin
  _compareC := Character.compare(PAnsiChar(a)^, PAnsiChar(b)^);
end;

function _compareD(a, b: pointer) : longInt;
begin
  _compareD := Double_.compare(PDouble(a)^, PDouble(b)^);
end;

function _compareF(a, b: pointer) : longInt;
begin
  _compareF := Float.compare(PSingle(a)^, PSingle(b)^);
end;

function _compareI(a, b: pointer) : longInt;
begin
  _compareI := Integer_.compare(PLongInt(a)^, PLongInt(b)^);
end;

function _compareL(a, b: pointer) : longInt;
begin
  _compareL := Long.compare(PInt64(a)^, PInt64(b)^);
end;

function _compareS(a, b: pointer) : longInt;
begin
  _compareS := Short.compare(PSmallInt(a)^, PSmallInt(b)^);
end;

(*
 * functions for testing if the two specified values are equal:
 *)

function _equalsBool(a, b: pointer) : boolean;
var
  x, y: Boolean_;
begin
  x := Boolean_.create(PBoolean(a)^);
  y := Boolean_.create(PBoolean(b)^);
  _equalsBool := x.equals(y);
  freeAndNil(x);
  freeAndNil(y);
end;

function _equalsB(a, b: pointer) : boolean;
var
  x, y: Byte_;
begin
  x := Byte_.create(PShortInt(a)^);
  y := Byte_.create(PShortInt(b)^);
  _equalsB := x.equals(y);
  freeAndNil(x);
  freeAndNil(y);
end;

function _equalsC(a, b: pointer) : boolean;
var
  x, y: Character;
begin
  x := Character.create(PAnsiChar(a)^);
  y := Character.create(PAnsiChar(b)^);
  _equalsC := x.equals(y);
  freeAndNil(x);
  freeAndNil(y);
end;

function _equalsD(a, b: pointer) : boolean;
var
  x, y: Double_;
begin
  x := Double_.create(PDouble(a)^);
  y := Double_.create(PDouble(b)^);
  _equalsD := x.equals(y);
  freeAndNil(x);
  freeAndNil(y);
end;

function _equalsF(a, b: pointer) : boolean;
var
  x, y: Float;
begin
  x := Float.create(PSingle(a)^);
  y := Float.create(PSingle(b)^);
  _equalsF := x.equals(y);
  freeAndNil(x);
  freeAndNil(y);
end;

function _equalsI(a, b: pointer) : boolean;
var
  x, y: Integer_;
begin
  x := Integer_.create(PLongInt(a)^);
  y := Integer_.create(PLongInt(b)^);
  _equalsI := x.equals(y);
  freeAndNil(x);
  freeAndNil(y);
end;

function _equalsL(a, b: pointer) : boolean;
var
  x, y: Long;
begin
  x := Long.create(PInt64(a)^);
  y := Long.create(PInt64(b)^);
  _equalsL := x.equals(y);
  freeAndNil(x);
  freeAndNil(y);
end;

function _equalsS(a, b: pointer) : boolean;
var
  x, y: Short;
begin
  x := Short.create(PSmallInt(a)^);
  y := Short.create(PSmallInt(b)^);
  _equalsS := x.equals(y);
  freeAndNil(x);
  freeAndNil(y);
end;

function _equalsObj(o1, o2: Object_) : boolean;
begin
  if o1 = nil then begin
    _equalsObj := (o2 = nil);
  end
  else begin
    _equalsObj := o1.Equals(o2);
  end;
end;

(*
 * functions for returning the string representation of the specified value:
 *)

function _toStringBool(a: pointer) : String_;
begin
  _toStringBool := Boolean_.toString_(PBoolean(a)^);
end;

function _toStringB(a: pointer) : String_;
begin
  _toStringB := Byte_.toString_(PShortInt(a)^);
end;

function _toStringC(a: pointer) : String_;
begin
  _toStringC := Character.toString_(PAnsiChar(a)^);
end;

function _toStringD(a: pointer) : String_;
begin
  _toStringD := Double_.toString_(PDouble(a)^);
end;

function _toStringF(a: pointer) : String_;
begin
  _toStringF := Float.toString_(PSingle(a)^);
end;

function _toStringI(a: pointer) : String_;
begin
  _toStringI := Integer_.toString_(PLongInt(a)^);
end;

function _toStringL(a: pointer) : String_;
begin
  _toStringL := Long.toString_(PInt64(a)^);
end;

function _toStringS(a: pointer) : String_;
begin
  _toStringS := Short.toString_(PSmallInt(a)^);
end;

(*
    Represents the type-agnostic method for binary searching
    in the specified sorted part of any primitive value array
    according to a specified compare function.
 *)
class function Arrays.binarySearchPointer(a: pointer; fromIndex, toIndex, size: longInt; key: pointer; c: CompareFunction) : longInt;
var
  lower, upper, middle : longInt;
  middleValue : pointer;
begin
  // initial lower index
  lower := fromIndex;
  // initial upper index
  upper := toIndex - 1;

  while lower &lt;= upper do begin
    // middle index
    middle := lower + ((upper - lower) div 2);
    middleValue := a + middle * size;

    // middle index is the new lower index if the key is greater than middle value
    if c(middleValue, key) &lt; 0 then begin
      lower := middle + 1;
    end
    // middle index is the new upper index if the key is greater than middle value
    else if c(middleValue, key) &gt; 0 then begin
      upper := middle - 1;
    end
    // returning the element if middle index value is equal to the key
    else begin
      exit(middle);
    end;
  end;

  // returning the negative index if element not found
  binarySearchPointer := -(lower + 1);
end;

(*
    Represents the type-agnostic method for binary searching
    in the specified sorted part of any object reference array
    according to a specified comparator.
 *)
class function Arrays.binarySearchObject(var a: array of Object_; fromIndex, toIndex: longInt; key: Object_; c: Comparator) : longInt;
var
  lower, upper, middle : longInt;
  middleValue : Object_;
begin
  // initial lower index
  lower := fromIndex;
  // initial upper index
  upper := toIndex - 1;

  while lower &lt;= upper do begin
    // middle index
    middle := lower + ((upper - lower) div 2);
    middleValue := a[middle];

    // middle index is the new lower index if the key is greater than middle value
    if c.compare(middleValue, key) &lt; 0 then begin
      lower := middle + 1;
    end
    // middle index is the new upper index if the key is greater than middle value
    else if c.compare(middleValue, key) &gt; 0 then begin
      upper := middle - 1;
    end
    // returning the element if middle index value is equal to the key
    else begin
      exit(middle);
    end;
  end;

  // returning the negative index if element not found
  binarySearchObject := -(lower + 1);
end;

(*
    Represents the type-agnostic method for copying
    the specified part of any primitive value array.
 *)
class function Arrays.copyOfRangePointer(original, copyArray: pointer; length, size, from, to_: longInt; defaultValue: pointer) : pointer;
var
  src, dest: pointer;
  i: longInt;
begin
  // the specified upper boundary if greater than the original array length
  if to_ &gt; length then begin
    // copying the values from the original array to its last element
    for i := from to length - 1 do begin
      src := original + i * size;
      dest := copyArray + (i - from) * size;
      move(src^, dest^, size);
    end;

    // filling the rest of the new array with the default value of the given type
    for i := length to to_ - 1 do begin
      src := defaultValue;
      dest := copyArray + (i - from) * size;
      move(src^, dest^, size);
    end;
  end
  // the specified upper boundary is less then the original array length
  else begin
    // copying the values from the original array to the element on the specified upper boundary
    for i := from to to_ - 1 do begin
      src := original + i * size;
      dest := copyArray + (i - from) * size;
      move(src^, dest^, size);
    end;
  end;

  copyOfRangePointer := copyArray;
end;

(*
    Represents the type-agnostic method for copying
    the specified part of any object reference array.
 *)
class function Arrays.copyOfRangeObject(var original: array of Object_; from, to_: longInt) : ObjectArray;
var
  a: array of Object_;
  len, i: longInt;
begin
  // a new array with the length equal to the difference of boundaries of the original array
  setLength(a, to_ - from);
  len := length(original);

  // the specified upper boundary if greater than the original array length
  if to_ &gt; len then begin
    // copying the values from the original array to its last element
    for i := from to len - 1 do begin
      a[i - from] := original[i];
    end;

    // filling the rest of the new array with the default value of the given type
    for i := len to to_ - 1 do begin
      a[i - from] := nil;
    end;
  end
  // the specified upper boundary is less then the original array length
  else begin
    // copying the values from the original array to the element on the specified upper boundary
    for i := from to to_ - 1 do begin
      a[i - from] := original[i];
    end;
  end;

  copyOfRangeObject := a;
end;

(*
    Represents the type-agnostic method for testing if two
    specified primitive value arrays are equal.
 *)
class function Arrays.equalsPointer(a: pointer; length: longInt; a2: pointer; length2, size: longInt; e: EqualsFunction) : boolean;
var
  i: longInt;
begin
  // comparing pointers
  if a = a2 then begin
    exit(true);
  end;

  // comparing the array lengths
  if length2 &lt;&gt; length then begin
    exit(false);
  end;

  // comparing corresponding elements of arrays
  for i := 0 to length - 1 do begin
    if not e(a + i * size, a2 + i * size) then begin
      exit(false);
    end;
  end;

  equalsPointer := true;
end;

(*
    Represents the type-agnostic method for testing if two
    specified object reference arrays are equal.
 *)
class function Arrays.equalsObject(var a: array of Object_; a2: array of Object_) : boolean;
var
  len, i: longInt;
  e: boolean;
begin
  len := length(a);

  // comparing the array lengths (if array is NULL, then its length is 0)
  if length(a2) &lt;&gt; len then begin
    exit(false);
  end;

  // comparing corresponding elements of arrays
  for i := 0 to len - 1 do begin
    // checking NULL values for object pointers
    if a[i] = nil then begin
      e := a2[i] = nil;
    end
    else begin
      e := a[i].equals_(a2[i]);
    end;

    if not e then begin
      exit(false);
    end;
  end;

  equalsObject := true;
end;

(*
    Represents the type-agnostic method for filling
    the specified part of any primitive value array
    with the specified value.
 *)
class procedure Arrays.fillPointer(a: pointer; fromIndex, toIndex, size: longInt; val: pointer);
var
  i: longInt;
  dest: pointer;
begin

  // setting each element to the value
  for i := fromIndex to toIndex - 1 do begin
    dest := a + i * size;
    move(val^, dest^, size);
  end;
end;

(*
    Represents the type-agnostic method for filling
    the specified part of any object reference array
    with the specified value.
 *)
class procedure Arrays.fillObject(var a: array of Object_; fromIndex, toIndex: longInt; val: Object_);
var
  i: longInt;
begin
  // setting each element to the value
  for i := fromIndex to toIndex - 1 do begin
    a[i] := val;
  end;
end;

(*
    Represents the type-agnostic method for sorting
    the specified part of any primitive value array
    according to a specified compare function.
 *)
class procedure Arrays.sortPointer(a: pointer; fromIndex, toIndex, size: longInt; c: CompareFunction);
begin
  // unstable sort for primitive values
  _java.quickSort(a, fromIndex, toIndex - 1, size, c);
end;

(*
    Represents the type-agnostic method for sorting
    the specified part of any object reference array
    according to a specified comparator.
 *)
class procedure Arrays.sortObject(var a: array of Object_; fromIndex, toIndex: longInt; c: Comparator);
var
  aux: array of Object_;
begin
  // creating the auxilliary array for the function implementing the stable sorting algoritm
  setLength(aux, toIndex - fromIndex);
  // stable sort for object references
  _java.mergeSort(a, aux, fromIndex, toIndex - 1, c);
end;

(*
    Represents the type-agnostic method for creating
    the string representation of any primitive value array.
 *)
class function Arrays.toStringPointer(a: pointer; length, size: longInt; ts: ToStringFunction) : String_;
var
  sb: StringBuilder;
  str: String_;
  i: longInt;
begin
  // create StringBuilder for appending the text
  sb := StringBuilder.create();
  str := String_.create('[');
  sb.append(str);
  freeAndNil(str);

  // append first element string representation
  if length &gt; 0 then begin
    str := ts(a);
    sb.append(str);
    freeAndNil(str);
  end;

  // append another elements string representation
  for i := 1 to length - 1 do begin
    str := String_.create(', ');
    sb.append(str);
    freeAndNil(str);
    str := ts(a + i * size);
    sb.append(str);
    freeAndNil(str);
  end;

  // create Java-like string
  str := String_.create(']');
  sb.append(str);
  freeAndNil(str);
  str := sb.toString_();
  freeAndNil(sb);
  toStringPointer := str;
end;

(*
    Represents the type-agnostic method for creating
    the string representation of any object reference array.
 *)
class function Arrays.toStringObject(var a: array of Object_) : String_;
var
  sb: StringBuilder;
  str: String_;
  len, i: longInt;
begin
  // create StringBuilder for appending the text
  len := length(a);
  sb := StringBuilder.create();
  str := String_.create('[');
  sb.append(str);
  freeAndNil(str);

  // append first element string representation
  if len &gt; 0 then begin
    // checking NULL values
    if a[0] = nil then begin
      str := String_.create('null');
    end
    else begin
      str := a[0].toString_();
    end;

    sb.append(str);
    freeAndNil(str);
  end;

  // append another elements string representation
  for i := 1 to len - 1 do begin
    str := String_.create(', ');
    sb.append(str);
    freeAndNil(str);

    // checking NULL values
    if a[i] = nil then begin
      str := String_.create('null');
    end
    else begin
      str := a[i].toString_();
    end;

    sb.append(str);
    freeAndNil(str);
  end;

  // create Java-like string
  str := String_.create(']');
  sb.append(str);
  freeAndNil(str);
  str := sb.toString_();
  freeAndNil(sb);
  toStringObject := str;
end;

(**
 * Searches the specified array of bytes for the specified value using the
 * binary search algorithm
 *
 * @param a the array to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 *)
class function Arrays.binarySearch(var a: array of shortInt; key: shortInt) : longInt;
begin
  binarySearch := binarySearchPointer(@a[0], 0, length(a), sizeOf(shortInt), @key, @_compareB);
end;

(**
 * Searches a range of the specified array of bytes for the specified value
 * using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 *)
class function Arrays.binarySearch(var a: array of shortInt; fromIndex: longInt; toIndex: longInt; key: shortInt) : longInt;
begin
  binarySearch := binarySearchPointer(@a[0], fromIndex, toIndex, sizeOf(shortInt), @key, @_compareB);
end;

(**
 * Searches the specified array of chars for the specified value using the
 * binary search algorithm.
 *
 * @param a the array to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 *)
class function Arrays.binarySearch(var a: array of ansiChar; key: ansiChar) : longInt;
begin
  binarySearch := binarySearchPointer(@a[0], 0, length(a), sizeOf(ansiChar), @key, @_compareC);
end;

(**
 * Searches a range of the specified array of chars for the specified value
 * using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 *)
class function Arrays.binarySearch(var a: array of ansiChar; fromIndex: longInt; toIndex: longInt; key: ansiChar) : longInt;
begin
  binarySearch := binarySearchPointer(@a[0], fromIndex, toIndex, sizeOf(ansiChar), @key, @_compareC);
end;

(**
 * Searches the specified array of doubles for the specified value using the
 * binary search algorithm.
 *
 * @param a the array to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 *)
class function Arrays.binarySearch(var a: array of double; key: double) : longInt;
begin
  binarySearch := binarySearchPointer(@a[0], 0, length(a), sizeOf(double), @key, @_compareD);
end;

(**
 * Searches a range of the specified array of doubles for the specified
 * value using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 *)
class function Arrays.binarySearch(var a: array of double; fromIndex: longInt; toIndex: longInt; key: double) : longInt;
begin
  binarySearch := binarySearchPointer(@a[0], fromIndex, toIndex, sizeOf(double), @key, @_compareD);
end;

(**
 * Searches the specified array of floats for the specified value using the
 * binary search algorithm.
 *
 * @param a the array to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 *)
class function Arrays.binarySearch(var a: array of single; key: single) : longInt;
begin
  binarySearch := binarySearchPointer(@a[0], 0, length(a), sizeOf(single), @key, @_compareF);
end;

(**
 * Searches a range of the specified array of floats for the specified value
 * using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 *)
class function Arrays.binarySearch(var a: array of single; fromIndex: longInt; toIndex: longInt; key: single) : longInt;
begin
  binarySearch := binarySearchPointer(@a[0], fromIndex, toIndex, sizeOf(single), @key, @_compareF);
end;

(**
 * Searches the specified array of ints for the specified value using the
 * binary search algorithm.
 *
 * @param a the array to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 *)
class function Arrays.binarySearch(var a: array of longInt; key: longInt) : longInt;
begin
  binarySearch := binarySearchPointer(@a[0], 0, length(a), sizeOf(longInt), @key, @_compareI);
end;

(**
 * Searches a range of the specified array of ints for the specified value
 * using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 *)
class function Arrays.binarySearch(var a: array of longInt; fromIndex: longInt; toIndex: longInt; key: longInt) : longInt;
begin
  binarySearch := binarySearchPointer(@a[0], fromIndex, toIndex, sizeOf(longInt), @key, @_compareI);
end;

(**
 * Searches the specified array of longs for the specified value using the
 * binary search algorithm.
 *
 * @param a the array to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 *)
class function Arrays.binarySearch(var a: array of int64; key: int64) : longInt;
begin
  binarySearch := binarySearchPointer(@a[0], 0, length(a), sizeOf(int64), @key, @_compareL);
end;

(**
 * Searches a range of the specified array of longs for the specified value
 * using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 *)
class function Arrays.binarySearch(var a: array of int64; fromIndex: longInt; toIndex: longInt; key: int64) : longInt;
begin
  binarySearch := binarySearchPointer(@a[0], fromIndex, toIndex, sizeOf(int64), @key, @_compareL);
end;

(**
 * Searches the specified array for the specified object using the binary
 * search algorithm.
 *
 * @param a the array to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 *)
class function Arrays.binarySearch(var a: array of Object_; key: Object_) : longInt;
begin
  binarySearch := binarySearchObject(a, 0, length(a), key, ObjectComparator.create());
end;

(**
 * Searches a range of the specified array for the specified object using
 * the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 *)
class function Arrays.binarySearch(var a: array of Object_; fromIndex: longInt; toIndex: longInt; key: Object_) : longInt;
begin
  binarySearch := binarySearchObject(a, fromIndex, toIndex, key, ObjectComparator.create());
end;

(**
 * Searches the specified array of shorts for the specified value using the
 * binary search algorithm.
 *
 * @param a the array to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 *)
class function Arrays.binarySearch(var a: array of smallInt; key: smallInt) : longInt;
begin
  binarySearch := binarySearchPointer(@a[0], 0, length(a), sizeOf(smallInt), @key, @_compareS);
end;

(**
 * Searches a range of the specified array of shorts for the specified value
 * using the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 *)
class function Arrays.binarySearch(var a: array of smallInt; fromIndex: longInt; toIndex: longInt; key: smallInt) : longInt;
begin
  binarySearch := binarySearchPointer(@a[0], fromIndex, toIndex, sizeOf(smallInt), @key, @_compareS);
end;

(**
 * Searches the specified array for the specified object using the binary
 * search algorithm.
 *
 * @param a the array to be searched
 * @param key the value to be searched for
 * @param c the comparator by which the array is ordered. A null value
 * indicates that the elements' natural ordering should be used.
 * @return index of the search key, if it is contained in the array;
 * otherwise, (-(insertion point) - 1). The insertion point is defined as
 * the point at which the key would be inserted into the array: the index of
 * the first element greater than the key, or a.length if all elements in
 * the array are less than the specified key. Note that this guarantees that
 * the return value will be &gt;= 0 if and only if the key is found.
 *)
class function Arrays.binarySearch(var a: array of Object_; key: Object_; c: Comparator) : longInt;
begin
  binarySearch := binarySearchObject(a, 0, length(a), key, c);
end;

(**
 * Searches a range of the specified array for the specified object using
 * the binary search algorithm.
 *
 * @param a the array to be searched
 * @param fromIndex the index of the first element (inclusive) to be
 * searched
 * @param toIndex the index of the last element (exclusive) to be searched
 * @param key the value to be searched for
 * @param c the comparator by which the array is ordered. A null value
 * indicates that the elements' natural ordering should be used.
 * @return index of the search key, if it is contained in the array within
 * the specified range; otherwise, (-(insertion point) - 1). The insertion
 * point is defined as the point at which the key would be inserted into the
 * array: the index of the first element in the range greater than the key,
 * or toIndex if all elements in the range are less than the specified key.
 * Note that this guarantees that the return value will be &gt;= 0 if and only
 * if the key is found.
 *)
class function Arrays.binarySearch(var a: array of Object_; fromIndex: longInt; toIndex: longInt; key: Object_; c: Comparator) : longInt;
begin
  binarySearch := binarySearchObject(a, fromIndex, toIndex, key, c);
end;

(**
 * Copies the specified array, truncating or padding with false (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with false
 * elements to obtain the specified length
 *)
class function Arrays.copyOf(var original: array of boolean; newLength: longInt) : BooleanArray;
var
  copyArray: array of boolean;
begin
  // creating a new array with the specified length so its elements can be passed as the pointer
  setLength(copyArray, newLength);
  copyOf := copyOfRangePointer(@original[0], @copyArray[0], length(original), sizeOf(boolean), 0, newLength, @defaultBoolean);
end;

(**
 * Copies the specified array, truncating or padding with zeros (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with zeros to
 * obtain the specified length
 *)
class function Arrays.copyOf(var original: array of shortInt; newLength: longInt) : ShortIntArray;
var
  copyArray: array of shortInt;
begin
  // creating a new array with the specified length so its elements can be passed as the pointer
  setLength(copyArray, newLength);
  copyOf := copyOfRangePointer(@original[0], @copyArray[0], length(original), sizeOf(shortInt), 0, newLength, @defaultByte);
end;

(**
 * Copies the specified array, truncating or padding with null characters
 * (if necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with null
 * characters to obtain the specified length
 *)
class function Arrays.copyOf(var original: array of ansiChar; newLength: longInt) : AnsiCharArray;
var
  copyArray: array of ansiChar;
begin
  // creating a new array with the specified length so its elements can be passed as the pointer
  setLength(copyArray, newLength);
  copyOf := copyOfRangePointer(@original[0], @copyArray[0], length(original), sizeOf(ansiChar), 0, newLength, @defaultChar);
end;

(**
 * Copies the specified array, truncating or padding with zeros (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with zeros to
 * obtain the specified length
 *)
class function Arrays.copyOf(var original: array of double; newLength: longInt) : DoubleArray;
var
  copyArray: array of double;
begin
  // creating a new array with the specified length so its elements can be passed as the pointer
  setLength(copyArray, newLength);
  copyOf := copyOfRangePointer(@original[0], @copyArray[0], length(original), sizeOf(double), 0, newLength, @defaultDouble);
end;

(**
 * Copies the specified array, truncating or padding with zeros (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with zeros to
 * obtain the specified length
 *)
class function Arrays.copyOf(var original: array of single; newLength: longInt) : SingleArray;
var
  copyArray: array of single;
begin
  // creating a new array with the specified length so its elements can be passed as the pointer
  setLength(copyArray, newLength);
  copyOf := copyOfRangePointer(@original[0], @copyArray[0], length(original), sizeOf(single), 0, newLength, @defaultFloat);
end;

(**
 * Copies the specified array, truncating or padding with zeros (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with zeros to
 * obtain the specified length
 *)
class function Arrays.copyOf(var original: array of longInt; newLength: longInt) : LongIntArray;
var
  copyArray: array of longInt;
begin
  // creating a new array with the specified length so its elements can be passed as the pointer
  setLength(copyArray, newLength);
  copyOf := copyOfRangePointer(@original[0], @copyArray[0], length(original), sizeOf(longInt), 0, newLength, @defaultInt);
end;

(**
 * Copies the specified array, truncating or padding with zeros (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with zeros to
 * obtain the specified length
 *)
class function Arrays.copyOf(var original: array of int64; newLength: longInt) : Int64Array;
var
  copyArray: array of int64;
begin
  // creating a new array with the specified length so its elements can be passed as the pointer
  setLength(copyArray, newLength);
  copyOf := copyOfRangePointer(@original[0], @copyArray[0], length(original), sizeOf(int64), 0, newLength, @defaultLong);
end;

(**
 * Copies the specified array, truncating or padding with zeros (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with zeros to
 * obtain the specified length
 *)
class function Arrays.copyOf(var original: array of smallInt; newLength: longInt) : SmallIntArray;
var
  copyArray: array of smallInt;
begin
  // creating a new array with the specified length so its elements can be passed as the pointer
  setLength(copyArray, newLength);
  copyOf := copyOfRangePointer(@original[0], @copyArray[0], length(original), sizeOf(smallInt), 0, newLength, @defaultShort);
end;

(**
 * Copies the specified array, truncating or padding with nulls (if
 * necessary) so the copy has the specified length.
 *
 * @param original the array to be copied
 * @param newLength the length of the copy to be returned
 * @return a copy of the original array, truncated or padded with nulls to
 * obtain the specified length
 *)
class function Arrays.copyOf(var original: array of Object_; newLength: longInt) : ObjectArray;
begin
  copyOf := copyOfRangeObject(original, 0, newLength);
end;

(**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with false elements to obtain the required
 * length
 *)
class function Arrays.copyOfRange(var original: array of boolean; from: longInt; to_: longInt) : BooleanArray;
var
  copyArray: array of boolean;
begin
  // creating a new array with the specified length so its elements can be passed as the pointer
  setLength(copyArray, to_ - from);
  copyOfRange := copyOfRangePointer(@original[0], @copyArray[0], length(original), sizeOf(boolean), from, to_, @defaultBoolean);
end;

(**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with zeros to obtain the required length
 *)
class function Arrays.copyOfRange(var original: array of shortInt; from: longInt; to_: longInt) : ShortIntArray;
var
  copyArray: array of shortInt;
begin
  // creating a new array with the specified length so its elements can be passed as the pointer
  setLength(copyArray, to_ - from);
  copyOfRange := copyOfRangePointer(@original[0], @copyArray[0], length(original), sizeOf(shortInt), from, to_, @defaultByte);
end;

(**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with null characters to obtain the required
 * length
 *)
class function Arrays.copyOfRange(var original: array of ansiChar; from: longInt; to_: longInt) : AnsiCharArray;
var
  copyArray: array of ansiChar;
begin
  // creating a new array with the specified length so its elements can be passed as the pointer
  setLength(copyArray, to_ - from);
  copyOfRange := copyOfRangePointer(@original[0], @copyArray[0], length(original), sizeOf(ansiChar), from, to_, @defaultChar);
end;

(**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with zeros to obtain the required length
 *)
class function Arrays.copyOfRange(var original: array of double; from: longInt; to_: longInt) : DoubleArray;
var
  copyArray: array of double;
begin
  // creating a new array with the specified length so its elements can be passed as the pointer
  setLength(copyArray, to_ - from);
  copyOfRange := copyOfRangePointer(@original[0], @copyArray[0], length(original), sizeOf(double), from, to_, @defaultDouble);
end;

(**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with zeros to obtain the required length
 *)
class function Arrays.copyOfRange(var original: array of single; from: longInt; to_: longInt) : SingleArray;
var
  copyArray: array of single;
begin
  // creating a new array with the specified length so its elements can be passed as the pointer
  setLength(copyArray, to_ - from);
  copyOfRange := copyOfRangePointer(@original[0], @copyArray[0], length(original), sizeOf(single), from, to_, @defaultFloat);
end;

(**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with zeros to obtain the required length
 *)
class function Arrays.copyOfRange(var original: array of longInt; from: longInt; to_: longInt) : LongIntArray;
var
  copyArray: array of longInt;
begin
  // creating a new array with the specified length so its elements can be passed as the pointer
  setLength(copyArray, to_ - from);
  copyOfRange := copyOfRangePointer(@original[0], @copyArray[0], length(original), sizeOf(longInt), from, to_, @defaultInt);
end;

(**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with zeros to obtain the required length
 *)
class function Arrays.copyOfRange(var original: array of int64; from: longInt; to_: longInt) : Int64Array;
var
  copyArray: array of int64;
begin
  // creating a new array with the specified length so its elements can be passed as the pointer
  setLength(copyArray, to_ - from);
  copyOfRange := copyOfRangePointer(@original[0], @copyArray[0], length(original), sizeOf(int64), from, to_, @defaultLong);
end;

(**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with zeros to obtain the required length
 *)
class function Arrays.copyOfRange(var original: array of smallInt; from: longInt; to_: longInt) : SmallIntArray;
var
  copyArray: array of smallInt;
begin
  // creating a new array with the specified length so its elements can be passed as the pointer
  setLength(copyArray, to_ - from);
  copyOfRange := copyOfRangePointer(@original[0], @copyArray[0], length(original), sizeOf(smallInt), from, to_, @defaultShort);
end;

(**
 * Copies the specified range of the specified array into a new array.
 *
 * @param original the array from which a range is to be copied
 * @param from the initial index of the range to be copied, inclusive
 * @param to the final index of the range to be copied, exclusive. (This
 * index may lie outside the array.)
 * @return a new array containing the specified range from the original
 * array, truncated or padded with nulls to obtain the required length
 *)
class function Arrays.copyOfRange(var original: array of Object_; from: longInt; to_: longInt) : ObjectArray;
begin
  copyOfRange := copyOfRangeObject(original, from, to_);
end;

(**
 * Returns true if the two specified arrays of booleans are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param a2 the other array to be tested for equality
 * @return true if the two arrays are equal
 *)
class function Arrays.equals(a: array of boolean; a2: array of boolean) : boolean;
var
  p, p2: pointer;
  l, l2: longInt;
begin
  // setting each pointer to NULL if the corresponding array length is 0
  l := length(a);
  l2 := length(a2);

  if length(a) = 0 then begin
    p := nil;
  end
  else begin
    p := @a[0];
  end;

  if length(a2) = 0 then begin
    p2 := nil;
  end
  else begin
    p2 := @a2[0];
  end;

  equals := equalsPointer(p, l, p2, l2, sizeOf(boolean), @_equalsBool);
end;

(**
 * Returns true if the two specified arrays of bytes are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param a2 the other array to be tested for equality
 * @return true if the two arrays are equal
 *)
class function Arrays.equals(a: array of shortInt; a2: array of shortInt) : boolean;
var
  p, p2: pointer;
  l, l2: longInt;
begin
  // setting each pointer to NULL if the corresponding array length is 0
  l := length(a);
  l2 := length(a2);

  if length(a) = 0 then begin
    p := nil;
  end
  else begin
    p := @a[0];
  end;

  if length(a2) = 0 then begin
    p2 := nil;
  end
  else begin
    p2 := @a2[0];
  end;

  equals := equalsPointer(p, l, p2, l2, sizeOf(shortInt), @_equalsB);
end;

(**
 * Returns true if the two specified arrays of chars are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param a2 the other array to be tested for equality
 * @return true if the two arrays are equal
 *)
class function Arrays.equals(a: array of ansiChar; a2: array of ansiChar) : boolean;
var
  p, p2: pointer;
  l, l2: longInt;
begin
  // setting each pointer to NULL if the corresponding array length is 0
  l := length(a);
  l2 := length(a2);

  if length(a) = 0 then begin
    p := nil;
  end
  else begin
    p := @a[0];
  end;

  if length(a2) = 0 then begin
    p2 := nil;
  end
  else begin
    p2 := @a2[0];
  end;

  equals := equalsPointer(p, l, p2, l2, sizeOf(ansiChar), @_equalsC);
end;

(**
 * Returns true if the two specified arrays of doubles are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param a2 the other array to be tested for equality
 * @return true if the two arrays are equal
 *)
class function Arrays.equals(a: array of double; a2: array of double) : boolean;
var
  p, p2: pointer;
  l, l2: longInt;
begin
  // setting each pointer to NULL if the corresponding array length is 0
  l := length(a);
  l2 := length(a2);

  if length(a) = 0 then begin
    p := nil;
  end
  else begin
    p := @a[0];
  end;

  if length(a2) = 0 then begin
    p2 := nil;
  end
  else begin
    p2 := @a2[0];
  end;

  equals := equalsPointer(p, l, p2, l2, sizeOf(double), @_equalsD);
end;

(**
 * Returns true if the two specified arrays of floats are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param a2 the other array to be tested for equality
 * @return true if the two arrays are equal
 *)
class function Arrays.equals(a: array of single; a2: array of single) : boolean;
var
  p, p2: pointer;
  l, l2: longInt;
begin
  // setting each pointer to NULL if the corresponding array length is 0
  l := length(a);
  l2 := length(a2);

  if length(a) = 0 then begin
    p := nil;
  end
  else begin
    p := @a[0];
  end;

  if length(a2) = 0 then begin
    p2 := nil;
  end
  else begin
    p2 := @a2[0];
  end;

  equals := equalsPointer(p, l, p2, l2, sizeOf(single), @_equalsF);
end;

(**
 * Returns true if the two specified arrays of ints are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param a2 the other array to be tested for equality
 * @return true if the two arrays are equal
 *)
class function Arrays.equals(a: array of longInt; a2: array of longInt) : boolean;
var
  p, p2: pointer;
  l, l2: longInt;
begin
  // setting each pointer to NULL if the corresponding array length is 0
  l := length(a);
  l2 := length(a2);

  if length(a) = 0 then begin
    p := nil;
  end
  else begin
    p := @a[0];
  end;

  if length(a2) = 0 then begin
    p2 := nil;
  end
  else begin
    p2 := @a2[0];
  end;

  equals := equalsPointer(p, l, p2, l2, sizeOf(longInt), @_equalsI);
end;

(**
 * Returns true if the two specified arrays of longs are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param a2 the other array to be tested for equality
 * @return true if the two arrays are equal
 *)
class function Arrays.equals(a: array of int64; a2: array of int64) : boolean;
var
  p, p2: pointer;
  l, l2: longInt;
begin
  // setting each pointer to NULL if the corresponding array length is 0
  l := length(a);
  l2 := length(a2);

  if length(a) = 0 then begin
    p := nil;
  end
  else begin
    p := @a[0];
  end;

  if length(a2) = 0 then begin
    p2 := nil;
  end
  else begin
    p2 := @a2[0];
  end;

  equals := equalsPointer(p, l, p2, l2, sizeOf(int64), @_equalsL);
end;

(**
 * Returns true if the two specified arrays of Objects are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param a2 the other array to be tested for equality
 * @return true if the two arrays are equal
 *)
class function Arrays.equals(a: array of Object_; a2: array of Object_) : boolean;
begin
  equals := equalsObject(a, a2);
end;

(**
 * Returns true if the two specified arrays of shorts are equal to one
 * another.
 *
 * @param a one array to be tested for equality
 * @param a2 the other array to be tested for equality
 * @return true if the two arrays are equal
 *)
class function Arrays.equals(a: array of smallInt; a2: array of smallInt) : boolean;
var
  p, p2: pointer;
  l, l2: longInt;
begin
  // setting each pointer to NULL if the corresponding array length is 0
  l := length(a);
  l2 := length(a2);

  if length(a) = 0 then begin
    p := nil;
  end
  else begin
    p := @a[0];
  end;

  if length(a2) = 0 then begin
    p2 := nil;
  end
  else begin
    p2 := @a2[0];
  end;

  equals := equalsPointer(p, l, p2, l2, sizeOf(smallInt), @_equalsS);
end;

(**
 * Assigns the specified boolean value to each element of the specified
 * array of booleans.
 *
 * @param a the array to be filled
 * @param val the value to be stored in all elements of the array
 *)
class procedure Arrays.fill(var a: array of boolean; val: boolean);
begin
  fillPointer(@a[0], 0, length(a), sizeOf(boolean), @val);
end;

(**
 * Assigns the specified boolean value to each element of the specified
 * range of the specified array of booleans.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 *)
class procedure Arrays.fill(var a: array of boolean; fromIndex: longInt; toIndex: longInt; val: boolean);
begin
  fillPointer(@a[0], fromIndex, toIndex, sizeOf(boolean), @val);
end;

(**
 * Assigns the specified byte value to each element of the specified array
 * of bytes.
 *
 * @param a the array to be filled
 * @param val the value to be stored in all elements of the array
 *)
class procedure Arrays.fill(var a: array of shortInt; val: shortInt);
begin
  fillPointer(@a[0], 0, length(a), sizeOf(shortInt), @val);
end;

(**
 * Assigns the specified byte value to each element of the specified range
 * of the specified array of bytes.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 *)
class procedure Arrays.fill(var a: array of shortInt; fromIndex: longInt; toIndex: longInt; val: shortInt);
begin
  fillPointer(@a[0], fromIndex, toIndex, sizeOf(shortInt), @val);
end;

(**
 * Assigns the specified char value to each element of the specified array
 * of chars.
 *
 * @param a the array to be filled
 * @param val the value to be stored in all elements of the array
 *)
class procedure Arrays.fill(var a: array of ansiChar; val: ansiChar);
begin
  fillPointer(@a[0], 0, length(a), sizeOf(ansiChar), @val);
end;

(**
 * Assigns the specified char value to each element of the specified range
 * of the specified array of chars.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 *)
class procedure Arrays.fill(var a: array of ansiChar; fromIndex: longInt; toIndex: longInt; val: ansiChar);
begin
  fillPointer(@a[0], fromIndex, toIndex, sizeOf(ansiChar), @val);
end;

(**
 * Assigns the specified double value to each element of the specified array
 * of doubles.
 *
 * @param a the array to be filled
 * @param val the value to be stored in all elements of the array
 *)
class procedure Arrays.fill(var a: array of double; val: double);
begin
  fillPointer(@a[0], 0, length(a), sizeOf(double), @val);
end;

(**
 * Assigns the specified double value to each element of the specified range
 * of the specified array of doubles.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 *)
class procedure Arrays.fill(var a: array of double; fromIndex: longInt; toIndex: longInt; val: double);
begin
  fillPointer(@a[0], fromIndex, toIndex, sizeOf(double), @val);
end;

(**
 * Assigns the specified float value to each element of the specified array
 * of floats.
 *
 * @param a the array to be filled
 * @param val the value to be stored in all elements of the array
 *)
class procedure Arrays.fill(var a: array of single; val: single);
begin
  fillPointer(@a[0], 0, length(a), sizeOf(single), @val);
end;

(**
 * Assigns the specified float value to each element of the specified range
 * of the specified array of floats.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 *)
class procedure Arrays.fill(var a: array of single; fromIndex: longInt; toIndex: longInt; val: single);
begin
  fillPointer(@a[0], fromIndex, toIndex, sizeOf(single), @val);
end;

(**
 * Assigns the specified int value to each element of the specified array of
 * ints.
 *
 * @param a the array to be filled
 * @param val the value to be stored in all elements of the array
 *)
class procedure Arrays.fill(var a: array of longInt; val: longInt);
begin
  fillPointer(@a[0], 0, length(a), sizeOf(longInt), @val);
end;

(**
 * Assigns the specified int value to each element of the specified range of
 * the specified array of ints.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 *)
class procedure Arrays.fill(var a: array of longInt; fromIndex: longInt; toIndex: longInt; val: longInt);
begin
  fillPointer(@a[0], fromIndex, toIndex, sizeOf(longInt), @val);
end;

(**
 * Assigns the specified long value to each element of the specified array
 * of longs.
 *
 * @param a the array to be filled
 * @param val the value to be stored in all elements of the array
 *)
class procedure Arrays.fill(var a: array of int64; val: int64);
begin
  fillPointer(@a[0], 0, length(a), sizeOf(int64), @val);
end;

(**
 * Assigns the specified long value to each element of the specified range
 * of the specified array of longs.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 *)
class procedure Arrays.fill(var a: array of int64; fromIndex: longInt; toIndex: longInt; val: int64);
begin
  fillPointer(@a[0], fromIndex, toIndex, sizeOf(int64), @val);
end;

(**
 * Assigns the specified Object reference to each element of the specified
 * array of Objects.
 *
 * @param a the array to be filled
 * @param val the value to be stored in all elements of the array
 *)
class procedure Arrays.fill(var a: array of Object_; val: Object_);
begin
  fillObject(a, 0, length(a), val);
end;

(**
 * Assigns the specified Object reference to each element of the specified
 * range of the specified array of Objects.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 *)
class procedure Arrays.fill(var a: array of Object_; fromIndex: longInt; toIndex: longInt; val: Object_);
begin
  fillObject(a, fromIndex, toIndex, val);
end;

(**
 * Assigns the specified short value to each element of the specified array
 * of shorts.
 *
 * @param a the array to be filled
 * @param val the value to be stored in all elements of the array
 *)
class procedure Arrays.fill(var a: array of smallInt; val: smallInt);
begin
  fillPointer(@a[0], 0, length(a), sizeOf(smallInt), @val);
end;

(**
 * Assigns the specified short value to each element of the specified range
 * of the specified array of shorts.
 *
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to be filled
 * with the specified value
 * @param toIndex the index of the last element (exclusive) to be filled
 * with the specified value
 * @param val the value to be stored in all elements of the array
 *)
class procedure Arrays.fill(var a: array of smallInt; fromIndex: longInt; toIndex: longInt; val: smallInt);
begin
  fillPointer(@a[0], fromIndex, toIndex, sizeOf(smallInt), @val);
end;

(**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 *)
class procedure Arrays.sort(var a: array of shortInt);
begin
  sortPointer(@a[0], 0, length(a), sizeOf(shortInt), @_compareB);
end;

(**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 *)
class procedure Arrays.sort(var a: array of shortInt; fromIndex: longInt; toIndex: longInt);
begin
  sortPointer(@a[0], fromIndex, toIndex, sizeOf(shortInt), @_compareB);
end;

(**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 *)
class procedure Arrays.sort(var a: array of ansiChar);
begin
  sortPointer(@a[0], 0, length(a), sizeOf(ansiChar), @_compareC);
end;

(**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 *)
class procedure Arrays.sort(var a: array of ansiChar; fromIndex: longInt; toIndex: longInt);
begin
  sortPointer(@a[0], fromIndex, toIndex, sizeOf(ansiChar), @_compareC);
end;

(**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 *)
class procedure Arrays.sort(var a: array of double);
begin
  sortPointer(@a[0], 0, length(a), sizeOf(double), @_compareD);
end;

(**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 *)
class procedure Arrays.sort(var a: array of double; fromIndex: longInt; toIndex: longInt);
begin
  sortPointer(@a[0], fromIndex, toIndex, sizeOf(double), @_compareD);
end;

(**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 *)
class procedure Arrays.sort(var a: array of single);
begin
  sortPointer(@a[0], 0, length(a), sizeOf(single), @_compareF);
end;

(**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 *)
class procedure Arrays.sort(var a: array of single; fromIndex: longInt; toIndex: longInt);
begin
  sortPointer(@a[0], fromIndex, toIndex, sizeOf(single), @_compareF);
end;

(**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 *)
class procedure Arrays.sort(var a: array of longInt);
begin
  sortPointer(@a[0], 0, length(a), sizeOf(longInt), @_compareI);
end;

(**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 *)
class procedure Arrays.sort(var a: array of longInt; fromIndex: longInt; toIndex: longInt);
begin
  sortPointer(@a[0], fromIndex, toIndex, sizeOf(longInt), @_compareI);
end;

(**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 *)
class procedure Arrays.sort(var a: array of int64);
begin
  sortPointer(@a[0], 0, length(a), sizeOf(int64), @_compareL);
end;

(**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 *)
class procedure Arrays.sort(var a: array of int64; fromIndex: longInt; toIndex: longInt);
begin
  sortPointer(@a[0], fromIndex, toIndex, sizeOf(int64), @_compareL);
end;

(**
 * Sorts the specified array of objects into ascending order, according to
 * the natural ordering of its elements.
 *
 * @param a the array to be sorted
 *)
class procedure Arrays.sort(var a: array of Object_);
begin
  sortObject(a, 0, length(a), ObjectComparator.create());
end;

(**
 * Sorts the specified range of the specified array of objects into
 * ascending order, according to the natural ordering of its elements.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 *)
class procedure Arrays.sort(var a: array of Object_; fromIndex: longInt; toIndex: longInt);
begin
  sortObject(a, fromIndex, toIndex, ObjectComparator.create());
end;

(**
 * Sorts the specified array into ascending numerical order.
 *
 * @param a the array to be sorted
 *)
class procedure Arrays.sort(var a: array of smallInt);
begin
  sortPointer(@a[0], 0, length(a), sizeOf(smallInt), @_compareS);
end;

(**
 * Sorts the specified range of the array into ascending order.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 *)
class procedure Arrays.sort(var a: array of smallInt; fromIndex: longInt; toIndex: longInt);
begin
  sortPointer(@a[0], fromIndex, toIndex, sizeOf(smallInt), @_compareS);
end;

(**
 * Sorts the specified array of objects according to the order induced by
 * the specified comparator.
 *
 * @param a the array to be sorted
 * @param c the comparator to determine the order of the array. A null value
 * indicates that the elements' natural ordering should be used.
 *)
class procedure Arrays.sort(var a: array of Object_; c: Comparator);
begin
  sortObject(a, 0, length(a), c);
end;

(**
 * Sorts the specified range of the specified array of objects according to
 * the order induced by the specified comparator.
 *
 * @param a the array to be sorted
 * @param fromIndex the index of the first element (inclusive) to be sorted
 * @param toIndex the index of the last element (exclusive) to be sorted
 * @param c the comparator to determine the order of the array. A null value
 * indicates that the elements' natural ordering should be used.
 *)
class procedure Arrays.sort(var a: array of Object_; fromIndex: longInt; toIndex: longInt; c: Comparator);
begin
  sortObject(a, fromIndex, toIndex, c);
end;

(**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @return a string representation of a
 *)
class function Arrays.toString(var a: array of boolean) : String_;
begin
  toString := toStringPointer(@a[0], length(a), sizeOf(boolean), @_toStringBool);
end;

(**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @return a string representation of a
 *)
class function Arrays.toString(var a: array of shortInt) : String_;
begin
  toString := toStringPointer(@a[0], length(a), sizeOf(shortInt), @_toStringB);
end;

(**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @return a string representation of a
 *)
class function Arrays.toString(var a: array of ansiChar) : String_;
begin
  toString := toStringPointer(@a[0], length(a), sizeOf(ansiChar), @_toStringC);
end;

(**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @return a string representation of a
 *)
class function Arrays.toString(var a: array of double) : String_;
begin
  toString := toStringPointer(@a[0], length(a), sizeOf(double), @_toStringD);
end;

(**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @return a string representation of a
 *)
class function Arrays.toString(var a: array of single) : String_;
begin
  toString := toStringPointer(@a[0], length(a), sizeOf(single), @_toStringF);
end;

(**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @return a string representation of a
 *)
class function Arrays.toString(var a: array of longInt) : String_;
begin
  toString := toStringPointer(@a[0], length(a), sizeOf(longInt), @_toStringI);
end;

(**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @return a string representation of a
 *)
class function Arrays.toString(var a: array of int64) : String_;
begin
  toString := toStringPointer(@a[0], length(a), sizeOf(int64), @_toStringL);
end;

(**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @return a string representation of a
 *)
class function Arrays.toString(var a: array of Object_) : String_;
begin
  toString := toStringObject(a);
end;

(**
 * Returns a string representation of the contents of the specified array.
 *
 * @param a the array whose string representation to return
 * @return a string representation of a
 *)
class function Arrays.toString(var a: array of smallInt) : String_;
begin
  toString := toStringPointer(@a[0], length(a), sizeOf(smallInt), @_toStringS);
end;

end.
</code>

</codes>
