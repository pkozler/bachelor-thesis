<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef LONG_INCLUDED
#define LONG_INCLUDED

#include "String_.h"
#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;

/**
 * The Long struct wraps a value of the type int64_t, representing a long value.
 *
 * @author Petr Kozler (A13B0359P)
 */

/**
 * A constant holding the maximum value a long can have, 2^63-1.
 */
#define Long_MAX_VALUE 9223372036854775807LL
/**
 * A constant holding the minimum value a long can have, -2^63.
 */
#define Long_MIN_VALUE -9223372036854775808LL

typedef struct {
    int64_t v;
} Long;

Long *new_Long(int64_t value);
int64_t longValue(Long *ptr);
int32_t compareToL(Long *ptr, Long *anotherLong);
int32_t Long_compare(int64_t x, int64_t y);
bool equalsL(Long *ptr, Long *obj);
String *toStringL(Long *ptr);
String *Long_toString(int64_t l);
int64_t Long_parseLong(String *s);

#endif /* LONG_INCLUDED */


#include "Long.h"

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

// maximum possible string length of the int64_t value used as the string buffer size
#define _MAX_LONG_STRLEN 20

/**
 * Constructs a newly allocated Long structure that represents the specified
 * long argument.
 *
 * @param value the value to be represented by the Long structure.
 */
Long *new_Long(int64_t value) {
    Long *l = malloc(sizeof(Long));
    l-&gt;v = value;

    return l;
}

/**
 * Returns the value of the specified Long as a long value.
 *
 * @param ptr The allocated structure
 * @return the numeric value represented by the specified structure after conversion to
 * type long.
 */
int64_t longValue(Long *ptr) {
    return ptr-&gt;v;
}

/**
 * Compares two Long structures numerically.
 *
 * @param ptr The allocated structure
 * @param anotherLong the Long to be compared.
 * @return the value 0 if the first Long is equal to the second Long; a value
 * less than 0 if the first Long is numerically less than the second Long; and
 * a value greater than 0 if the first Long is numerically greater than the
 * second Long (signed comparison).
 */
int32_t compareToL(Long *ptr, Long *anotherLong) {
    return Long_compare(ptr-&gt;v, anotherLong-&gt;v);
}

/**
 * Compares two long values numerically.
 *
 * @param x the first long to compare
 * @param y the second long to compare
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
 * &gt; y
 */
int32_t Long_compare(int64_t x, int64_t y) {
    // 1 if x is greater, 0 if x equals y, -1 otherwise
    return (x &lt; y) ? -1 : ((x == y) ? 0 : 1);
}

/**
 * Compares the one structure to the other.
 *
 * @param ptr The allocated structure
 * @param obj the structure to compare with.
 * @return true if the structures are the same; false otherwise.
 */
bool equalsL(Long *ptr, Long *obj) {
    // testing another object reference for a NULL value
    if (ptr == NULL || obj == NULL) {
        return false;
    }

    // testing object class equality
    if (sizeof(*ptr) != sizeof(*obj)) {
        return false;
    }

    // testing object fields equality
    return (ptr-&gt;v == obj-&gt;v);
}

/**
 * Returns a String structure representing the specified Long's value.
 *
 * @param ptr The allocated structure
 * @return a string representation of the value of the specified structure in base 10.
 */
String *toStringL(Long *ptr) {
    return Long_toString(ptr-&gt;v);
}

/**
 * Returns a String structure representing the specified long.
 *
 * @param l a long to be converted.
 * @return a string representation of the argument in base 10.
 */
String *Long_toString(int64_t l) {
    char *str = malloc(_MAX_LONG_STRLEN + 1);
    char buf[_MAX_LONG_STRLEN];

    str[0] = '\0';
    // printing the string representation to the buffer
    sprintf(buf, "%lld", l);
    // creating the null-terminated string from the buffer
    strcat(str, buf);
    String *s = new_String(str);
    free(str);
    
    return s;
}

/**
 * Parses the string argument as a signed long in the radix specified by the
 * second argument.
 *
 * @param s a String containing the long representation to be parsed
 * @return the long represented by the argument in decimal.
 */
int64_t Long_parseLong(String *s) {
    String *str = trim(s);
    int64_t value = strtoll(str-&gt;s, NULL, 10);
    free(str);
    
    return value;
}
</code>
<code lang="C++">#ifndef LONG_INCLUDED
#define LONG_INCLUDED

#include "String_.h"
#include &lt;cstdint&gt;

/**
 * The Long class wraps a value of the primitive type int64_t (representing a long value) in an object.
 *
 * @author Petr Kozler (A13B0359P)
 */
class Long : public Comparable {
    // an inner value
    int64_t v;
public:
    /**
     * A constant holding the maximum value a long can have, 2^63-1.
     */
    static const int64_t MIN_VALUE;
    
    /**
     * A constant holding the minimum value a long can have, -2^63.
     */
    static const int64_t MAX_VALUE;
    
    Long(int64_t value);
    int64_t longValue();
    int32_t compareTo(Object *anotherLong);
    static int32_t compare(int64_t x, int64_t y);
    bool equals(Object *obj);
    String *toString();
    static String *toString(int64_t l);
    static int64_t parseLong(String *s);
};

#endif // LONG_INCLUDED


#include "Long.h"

#include &lt;string&gt;
#include &lt;cstdlib&gt;

const int64_t Long::MAX_VALUE = 9223372036854775807LL;
const int64_t Long::MIN_VALUE = -9223372036854775808LL;

/**
 * Constructs a newly allocated Long object that represents the specified
 * long argument.
 *
 * @param value the value to be represented by the Long object.
 */
Long::Long(int64_t value) {
    v = value;
}

/**
 * Returns the value of this Long as a long value.
 *
 * @return the numeric value represented by this object after conversion to
 * type long.
 */
int64_t Long::longValue() {
    return v;
}

/**
 * Compares two Long objects numerically.
 *
 * @param anotherLong the Long to be compared.
 * @return the value 0 if this Long is equal to the argument Long; a value
 * less than 0 if this Long is numerically less than the argument Long; and
 * a value greater than 0 if this Long is numerically greater than the
 * argument Long (signed comparison).
 */
int32_t Long::compareTo(Object *anotherLong) {
    return Long::compare(v, ((Long *)anotherLong)-&gt;v);
}

/**
 * Compares two long values numerically.
 *
 * @param x the first long to compare
 * @param y the second long to compare
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
 * &gt; y
 */
int32_t Long::compare(int64_t x, int64_t y) {
    // 1 if x is greater, 0 if x equals y, -1 otherwise
    return (x &lt; y) ? -1 : ((x == y) ? 0 : 1);
}

/**
 * Compares this object to the specified object.
 *
 * @param obj the object to compare with.
 * @return true if the objects are the same; false otherwise.
 */
bool Long::equals(Object *obj) {
    // testing another object reference for a NULL value
    if (obj == nullptr) {
        return false;
    }

    // testing object class equality
    if (sizeof(this) != sizeof(*obj)) {
        return false;
    }

    // testing object fields equality
    return (v == ((Long *)obj)-&gt;v);
}

/**
 * Returns a String object representing this Long's value.
 *
 * @return a string representation of the value of this object in base 10.
 */
String *Long::toString() {
    return toString(v);
}

/**
 * Returns a String object representing the specified long.
 *
 * @param l a long to be converted.
 * @return a string representation of the argument in base 10.
 */
String *Long::toString(int64_t l) {
    return new String(std::to_string(l));
}

/**
 * Parses the string argument as a signed long in the radix specified by the
 * second argument.
 *
 * @param s a String containing the long representation to be parsed
 * @return the long represented by the argument in decimal.
 */
int64_t Long::parseLong(String *s) {
    String *str = s-&gt;trim();
    int64_t value = strtoll(str-&gt;_s().c_str(), nullptr, 10);
    delete str;
    
    return value;
}
</code>
<code lang="C#">ï»¿using System;

namespace JavaClasses
{

    /// &lt;summary&gt;
    /// The Long class wraps a value of the primitive type long in an object.
    /// &lt;/summary&gt;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;
    public class Long : Comparable
    {

        /// &lt;summary&gt;
        /// A constant holding the maximum value a long can have, 2^63-1.
        /// &lt;/summary&gt;
        public const long MAX_VALUE = 9223372036854775807;

        /// &lt;summary&gt;
        /// A constant holding the minimum value a long can have, -2^63.
        /// &lt;/summary&gt;
        public const long MIN_VALUE = -9223372036854775808;

        // an inner value
        private long v;

        /// &lt;summary&gt;
        /// Constructs a newly allocated Long object that represents the specified
        /// long argument.
        /// &lt;/summary&gt;
        /// &lt;param name="value"&gt;the value to be represented by the Long object.
        /// &lt;/param&gt;
        public Long(long value)
        {
            v = value;
        }

        /// &lt;summary&gt;
        /// Returns the value of this Long as a long value.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the numeric value represented by this object after conversion to
        /// type long.
        /// &lt;/returns&gt;
        public long longValue()
        {
            return v;
        }

        /// &lt;summary&gt;
        /// Compares two Long objects numerically.
        /// &lt;/summary&gt;
        /// &lt;param name="anotherLong"&gt;the Long to be compared.
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if this Long is equal to the argument Long; a value
        /// less than 0 if this Long is numerically less than the argument Long; and
        /// a value greater than 0 if this Long is numerically greater than the
        /// argument Long (signed comparison).
        /// &lt;/returns&gt;
        public override int compareTo(Object anotherLong)
        {
            return compare(v, (anotherLong as Long).v);
        }

        /// &lt;summary&gt;
        /// Compares two long values numerically.
        /// &lt;/summary&gt;
        /// &lt;param name="x"&gt;the first long to compare
        /// &lt;/param&gt;&lt;param name="y"&gt;the second long to compare
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
        /// &gt; y
        /// &lt;/returns&gt;
        public static int compare(long x, long y)
        {
            // 1 if x is greater, 0 if x equals y, -1 otherwise
            return (x &lt; y) ? -1 : ((x == y) ? 0 : 1);
        }

        /// &lt;summary&gt;
        /// Compares this object to the specified object.
        /// &lt;/summary&gt;
        /// &lt;param name="obj"&gt;the object to compare with.
        /// &lt;/param&gt;&lt;returns&gt;true if the objects are the same; false otherwise.
        /// &lt;/returns&gt;
        public override bool equals(Object obj)
        {
            // testing another object reference for a NULL value
            if (obj == null)
            {
                return false;
            }

            // testing object class equality
            if (GetType() != obj.GetType())
            {
                return false;
            }

            // testing object fields equality
            return v.Equals((obj as Long).v);
        }

        /// &lt;summary&gt;
        /// Returns a String object representing this Long's value.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;a string representation of the value of this object in base 10.
        /// &lt;/returns&gt;
        public override String toString()
        {
            return Long.toString(v);
        }

        /// &lt;summary&gt;
        /// Returns a String object representing the specified long.
        /// &lt;/summary&gt;
        /// &lt;param name="l"&gt;a long to be converted.
        /// &lt;/param&gt;&lt;returns&gt;a string representation of the argument in base 10.
        /// &lt;/returns&gt;
        public static String toString(long l)
        {
            return new String(l.ToString());
        }

        /// &lt;summary&gt;
        /// Parses the string argument as a signed long in the radix specified by the
        /// second argument.
        /// &lt;/summary&gt;
        /// &lt;param name="s"&gt;a String containing the long representation to be parsed
        /// &lt;/param&gt;&lt;returns&gt;the long represented by the argument in decimal.
        /// &lt;/returns&gt;
        public static long parseLong(String s)
        {
            return long.Parse(s.ToString());
        }
        
        public static implicit operator Long(long original)
        {
            return new Long(original);
        }
        
    }

}
</code>
<code lang="Free Pascal">unit LongUnit;

{$mode objfpc}{$H+}

interface

uses
  SysUtils, StringUnit;

type
  (**
   * The Long class wraps a value of the primitive type int64 (representing a long value) in an object.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  Long = class(Comparable)
    private
      var
        // an inner value
        v: int64;
    public
      const
          (**
           * A constant holding the maximum value a long can have, 2^63-1.
           *)
           MAX_VALUE = 9223372036854775807;
          (**
           * A constant holding the minimum value a long can have, -2^63.
           *)
           MIN_VALUE = -9223372036854775808;
      constructor create(value: int64);
      function longValue() : int64;
      function compareTo(anotherLong: Object_) : longInt; override;
      class function compare(x, y: int64) : longInt;
      function equals_(obj: Object_) : boolean; override;
      function toString_() : String_; override;
      class function toString_(l: int64) : String_;
      class function parseLong(s: String_) : int64;
  end;

implementation

(**
 * Constructs a newly allocated Long object that represents the specified
 * long argument.
 *
 * @param value the value to be represented by the Long object.
 *)
constructor Long.create(value: int64);
begin
  v := value;
end;

(**
 * Returns the value of this Long as a long value.
 *
 * @return the numeric value represented by this object after conversion to
 * type long.
 *)
function Long.longValue() : int64;
begin
  longValue := v;
end;

(**
 * Compares two Long objects numerically.
 *
 * @param anotherLong the Long to be compared.
 * @return the value 0 if this Long is equal to the argument Long; a value
 * less than 0 if this Long is numerically less than the argument Long; and
 * a value greater than 0 if this Long is numerically greater than the
 * argument Long (signed comparison).
 *)
function Long.compareTo(anotherLong: Object_) : longInt;
begin
  compareTo := compare(v, (anotherLong as Long).v);
end;

(**
 * Compares two long values numerically.
 *
 * @param x the first long to compare
 * @param y the second long to compare
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
 * &gt; y
 *)
class function Long.compare(x, y: int64) : longInt;
begin
  // 1 if x is greater, 0 if x equals y, -1 otherwise
  if x &lt; y then begin
     compare := -1;
  end
  else if x = y then begin
     compare := 0;
  end
  else begin
    compare := 1;
  end;
end;

(**
 * Compares this object to the specified object.
 *
 * @param obj the object to compare with.
 * @return true if the objects are the same; false otherwise.
 *)
function Long.equals_(obj: Object_) : boolean;
begin
  // testing another object reference for a NULL value
  if obj = nil then begin
    exit(false);
  end;

  // testing object class equality
  if typeOf(self) &lt;&gt; typeOf(obj) then begin
    exit(false);
  end;

  // testing object fields equality
  equals_ := v = (obj as Long).v;
end;

(**
 * Returns a String object representing this Long's value.
 *
 * @return a string representation of the value of this object in base 10.
 *)
function Long.toString_() : String_;
begin
  toString_ := Long.toString_(v);
end;

(**
 * Returns a String object representing the specified long.
 *
 * @param l a long to be converted.
 * @return a string representation of the argument in base 10.
 *)
class function Long.toString_(l: int64) : String_;
begin
  toString_ := String_.create(IntToStr(l));
end;

(**
 * Parses the string argument as a signed long in the radix specified by the
 * second argument.
 *
 * @param s a String containing the long representation to be parsed
 * @return the long represented by the argument in decimal.
 *)
class function Long.parseLong(s: String_) : int64;
begin
  parseLong := strToInt64(trim(s.strProperty));
end;

operator := (original: int64) s: Long;
begin
  s.create(original);
end;

end.

</code>

</codes>
