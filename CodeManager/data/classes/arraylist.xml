<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef ARRAYLIST_INCLUDED
#define	ARRAYLIST_INCLUDED

#include "String_.h"
#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;

/**
 * Struct definition for the resizable-array implementation of the list data structure.
 *
 * @author Petr Kozler (A13B0359P)
 */

typedef struct {
    // current element count
    int32_t count;
    // current array capacity
    int32_t capacity;
    // dynamically resized array
    void **dynamicArray;
} ArrayList;

ArrayList *new_ArrayList();
ArrayList *new_ArrayListAddAll(ArrayList *c);
void delete_ArrayList(ArrayList *ptr);
bool addAl(ArrayList *ptr, void *e);
void addAtAl(ArrayList *ptr, int32_t index, void *element);
void *getAl(ArrayList *ptr, int32_t index);
void *setAl(ArrayList *ptr, int32_t index, void *element);
void *removeAl(ArrayList *ptr, int32_t index);
int32_t sizeAl(ArrayList *ptr);
bool isEmptyAl(ArrayList *ptr);
void clearAl(ArrayList *ptr);
String *toStringAl(ArrayList *ptr, String *(*toString)(void *));

#endif	/* ARRAYLIST_INCLUDED */



#include "ArrayList.h"

#include "StringBuilder.h"
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;wchar.h&gt;

// initial capacity for the inner dynamically resized array
#define _DEFAULT_CAPACITY 10
// coefficient for increasing or decreasing the capacity of inner array
#define _RESIZE_COEF 2

/**
 * Constructs an empty list with an initial capacity of ten.
 */
ArrayList *new_ArrayList() {
    ArrayList *list = malloc(sizeof (ArrayList));
    list-&gt;count = 0;
    list-&gt;capacity = _DEFAULT_CAPACITY;
    // allocating the inner array to the default capacity
    list-&gt;dynamicArray = malloc(list-&gt;capacity * sizeof (void *));

    return list;
}

/**
 * Constructs a list containing the elements of the specified array list, in
 * the order they are returned by the iteration over the list.
 *
 * @param c the array list whose elements are to be placed into the specified list
 */
ArrayList *new_ArrayListAddAll(ArrayList *c) {
    ArrayList *list = malloc(sizeof (ArrayList));
    list-&gt;count = c-&gt;count;
    list-&gt;capacity = c-&gt;capacity;
    // allocating the inner array to the specified list capacity
    list-&gt;dynamicArray = malloc(list-&gt;capacity * sizeof(void *));

    // copying all elements from the specified list
    int32_t i;
    for (i = 0; i &lt; list-&gt;count; i++) {
        list-&gt;dynamicArray[i] = c-&gt;dynamicArray[i];
    }

    return list;
}

/*
    Destructs the ArrayList.
 */
void delete_ArrayList(ArrayList *ptr) {
    clearAl(ptr);
    free(ptr);
}

/*
    Increases the capacity of the inner array if the element count
    reaches the current capacity.
 */
void _expandList(ArrayList *ptr) {
    ptr-&gt;count++;

    if (ptr-&gt;count == ptr-&gt;capacity) {
        ptr-&gt;capacity *= _RESIZE_COEF;
        // reallocating the memory (expanding the allocated memory by the resize coefficient)
        ptr-&gt;dynamicArray = realloc(ptr-&gt;dynamicArray, ptr-&gt;capacity * sizeof(void *));
    }
}

/*
    Decreases the capacity of the inner array if the element count reaches the half
    of the current capacity (and the current capacity is greater than the default capacity).
 */
void _shrinkList(ArrayList *ptr) {
    ptr-&gt;count--;

    if (ptr-&gt;count &lt; ptr-&gt;capacity / _RESIZE_COEF
            &amp;&amp; ptr-&gt;capacity &gt;= _DEFAULT_CAPACITY * _RESIZE_COEF) {
        ptr-&gt;capacity /= _RESIZE_COEF;
        // reallocating the memory (shrinking the allocated memory by the resize coefficient)
        ptr-&gt;dynamicArray = realloc(ptr-&gt;dynamicArray, ptr-&gt;capacity * sizeof(void *));
    }
}

/**
 * Appends the specified element to the end of the specified list.
 *
 * @param ptr The allocated structure
 * @param e element to be appended to the specified list
 * @return true
 */
bool addAl(ArrayList *ptr, void *e) {
    // storing the element on the index specified by the current element count
    ptr-&gt;dynamicArray[ptr-&gt;count] = e;
    _expandList(ptr);

    return true;
}

/**
 * Inserts the specified element at the specified position in the specified list.
 *
 * @param ptr The allocated structure
 * @param index index at which the specified element is to be inserted
 * @param element element to be inserted
 */
void addAtAl(ArrayList *ptr, int32_t index, void *element) {
    int32_t i;

    // moving the elements with greater index than specified by 1 away from the beginning of array
    for (i = ptr-&gt;count; i &gt; index; i--) {
        ptr-&gt;dynamicArray[i] = ptr-&gt;dynamicArray[i - 1];
    }

    // storing the element on the specified index
    ptr-&gt;dynamicArray[index] = element;
    _expandList(ptr);
}

/**
 * Returns the element at the specified position in the specified list.
 *
 * @param ptr The allocated structure
 * @param index index of the element to return
 * @return the element at the specified position in the specified list
 */
void *getAl(ArrayList *ptr, int32_t index) {
    return ptr-&gt;dynamicArray[index];
}

/**
 * Replaces the element at the specified position in the specified list with the
 * specified element.
 *
 * @param ptr The allocated structure
 * @param index index of the element to replace
 * @param element element to be stored at the specified position
 * @return the element previously at the specified position
 */
void *setAl(ArrayList *ptr, int32_t index, void *element) {
    void *original = ptr-&gt;dynamicArray[index];
    ptr-&gt;dynamicArray[index] = element;

    return original;
}

/**
 * Removes the element at the specified position in the specified list.
 *
 * @param ptr The allocated structure
 * @param index the index of the element to be removed
 * @return the element that was removed from the list
 */
void *removeAl(ArrayList *ptr, int32_t index) {
    void *removed = ptr-&gt;dynamicArray[index];
    int32_t i;

    // moving the elements with greater index than removed by 1 towards the beginning of array
    for (i = index; i &lt; ptr-&gt;count - 1; i++) {
        ptr-&gt;dynamicArray[i] = ptr-&gt;dynamicArray[i + 1];
    }

    _shrinkList(ptr);
    return removed;
}

/**
 * Returns the number of elements in the specified list.
 *
 * @param ptr The allocated structure
 * @return the number of elements in the specified list
 */
int32_t sizeAl(ArrayList *ptr) {
    return ptr-&gt;count;
}

/**
 * Returns true if the specified list contains no elements.
 *
 * @param ptr The allocated structure
 * @return true if the specified list contains no elements
 */
bool isEmptyAl(ArrayList *ptr) {
    return (ptr-&gt;count == 0);
}

/**
 * Removes all of the elements from the specified list.
 *
 * @param ptr The allocated structure
 */
void clearAl(ArrayList *ptr) {
    free(ptr-&gt;dynamicArray);

    ptr-&gt;count = 0;
    ptr-&gt;capacity = _DEFAULT_CAPACITY;
    // allocating the array with the default capacity
    ptr-&gt;dynamicArray = malloc(ptr-&gt;capacity * sizeof (void *));
}

/**
 * Returns a string representation of the structure.
 *
 * @param ptr The allocated structure
 * @param toString The list element toString function
 * @return a string representation of the structure.
 */
String *toStringAl(ArrayList *ptr, String *(*toString)(void *)) {
    int32_t length = ptr-&gt;count;
    
    // create StringBuilder for appending the text
    StringBuilder *sb = new_StringBuilder();
    String *str = new_String("[");
    append(sb, str);
    delete_String(str);

    // append first element string representation
    if (length &gt; 0) {
        str = ptr-&gt;dynamicArray[0] == NULL ? new_String("null") : toString(ptr-&gt;dynamicArray[0]);
        append(sb, str);
        delete_String(str);
    }
    
    // append another elements string representation
    int32_t i;
    for (i = 1; i &lt; length; i++) {
        str = new_String(", ");
        append(sb, str);
        delete_String(str);
        str = ptr-&gt;dynamicArray[i] == NULL ? new_String("null") : toString(ptr-&gt;dynamicArray[i]);
        append(sb, str);
        delete_String(str);
    }

    // create Java-like string
    str = new_String("]");
    append(sb, str);
    delete_String(str);
    str = toStringSb(sb);
    delete_StringBuilder(sb);

    return str;
}
</code>
<code lang="C++">#ifndef ARRAYLIST_INCLUDED
#define	ARRAYLIST_INCLUDED

#include "List.h"
#include "String_.h"
#include &lt;vector&gt;
#include &lt;cstdint&gt;
#include &lt;sstream&gt;

/**
 * Resizable-array implementation of the List abstract class.
 *
 * @author Petr Kozler (A13B0359P)
 */
template &lt;class E&gt; class ArrayList : public List&lt;E&gt; {
    // initial inner vector capacity
    static const int32_t DEFAULT_CAPACITY;
    // inner vector for storing the elements
    std::vector&lt;E *&gt; v;
public:
    std::vector&lt;E *&gt; _v() { return v; }
    ArrayList();
    ArrayList(ArrayList&lt;E&gt; *c);
    ~ArrayList();
    bool add(E *e);
    void add(int32_t index, E *element);
    E *get(int32_t index);
    E *set(int32_t index, E *element);
    E *remove(int32_t index);
    int32_t size();
    void clear();
    String *toString();
};

template &lt;class E&gt; const int32_t ArrayList&lt;E&gt;::DEFAULT_CAPACITY = 10;

/**
 * Constructs an empty list with an initial capacity of ten.
 */
template &lt;class E&gt; ArrayList&lt;E&gt;::ArrayList() {}

/**
 * Constructs a list containing the elements of the specified collection, in
 * the order they are returned by the collection's iterator.
 *
 * @param c the collection whose elements are to be placed into this list
 */
template &lt;class E&gt; ArrayList&lt;E&gt;::ArrayList(ArrayList&lt;E&gt; *c) {
    int32_t length = c-&gt;size();
    
    // copying all elements from the specified list
    for (int32_t i = 0; i &lt; length; i++) {
        add(c-&gt;get(i));
    }
}

/*
 Destructs an ArrayList.
 */
template &lt;class E&gt; ArrayList&lt;E&gt;::~ArrayList() {
    v.clear();
}

/**
 * Appends the specified element to the end of this list.
 *
 * @param e element to be appended to this list
 * @return true
 */
template &lt;class E&gt; bool ArrayList&lt;E&gt;::add(E *e) {
    v.push_back(e);

    return true;
}

/**
 * Inserts the specified element at the specified position in this list.
 *
 * @param index index at which the specified element is to be inserted
 * @param element element to be inserted
 */
template &lt;class E&gt; void ArrayList&lt;E&gt;::add(int32_t index, E *element) {
    v.insert(v.begin() + index, element);
}

/**
 * Returns the element at the specified position in this list.
 *
 * @param index index of the element to return
 * @return the element at the specified position in this list
 */
template &lt;class E&gt; E *ArrayList&lt;E&gt;::get(int32_t index) {
    return v[index];
}

/**
 * Replaces the element at the specified position in this list with the
 * specified element.
 *
 * @param index index of the element to replace
 * @param element element to be stored at the specified position
 * @return the element previously at the specified position
 */
template &lt;class E&gt; E *ArrayList&lt;E&gt;::set(int32_t index, E *element) {
    E *original = v[index];
    v[index] = element;

    return original;
}

/**
 * Removes the element at the specified position in this list.
 *
 * @param index the index of the element to be removed
 * @return the element that was removed from the list
 */
template &lt;class E&gt; E *ArrayList&lt;E&gt;::remove(int32_t index) {
    E *removed = v[index];
    v.erase(v.begin() + index);

    return removed;
}

/**
 * Returns the number of elements in this list.
 *
 * @return the number of elements in this list
 */
template &lt;class E&gt; int32_t ArrayList&lt;E&gt;::size() {
    return v.size();
}

/**
 * Removes all of the elements from this list.
 */
template &lt;class E&gt; void ArrayList&lt;E&gt;::clear() {
    v.clear();
}

/**
 * Returns a string representation of the object.
 *
 * @return a string representation of the object.
 */
template &lt;class E&gt; String *ArrayList&lt;E&gt;::toString() {
    int32_t length = v.size();
    // create ostringstream for appending the text
    std::ostringstream oss("");
    oss &lt;&lt; "[";

    // append first element string representation
    if (length &gt; 0) {
        String *str = v[0] == nullptr ? new String("null") : ((Object *)v[0])-&gt;toString();
        oss &lt;&lt; str-&gt;_s();
        delete str;
    }

    // append another elements string representation
    for (int32_t i = 1; i &lt; length; i++) {
        String *str = v[i] == nullptr ? new String("null") : ((Object *)v[i])-&gt;toString();
        oss &lt;&lt; ", " &lt;&lt; str-&gt;_s();
        delete str;
    }

    oss &lt;&lt; "]";

    // create Java-like string
    return new String(oss.str());
}

#endif	// ARRAYLIST_INCLUDED


#include "ArrayList.h"
// for future purposes</code>
<code lang="C#">﻿namespace JavaClasses
{

    /// &lt;summary&gt;
    /// Resizable-array implementation of the List abstract class.
    /// &lt;/summary&gt;
    /// &lt;typeparam name="E"&gt;the type of elements in this list&lt;/typeparam&gt;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;
    public class ArrayList&lt;E&gt; : List&lt;E&gt; where E : Object
    {

        // an inner list
        public System.Collections.Generic.List&lt;E&gt; l { get; private set; }

        /// &lt;summary&gt;
        /// Constructs an empty list with an initial capacity of ten.
        /// &lt;/summary&gt;
        public ArrayList()
        {
            l = new System.Collections.Generic.List&lt;E&gt;(10);
        }

        /// &lt;summary&gt;
        /// Constructs a list containing the elements of the specified collection, in
        /// the order they are returned by the collection's iterator.
        /// &lt;/summary&gt;
        /// &lt;param name="c"&gt;the collection whose elements are to be placed into this list
        /// &lt;/param&gt;
        public ArrayList(ArrayList&lt;E&gt; c)
        {
            l = new System.Collections.Generic.List&lt;E&gt;(c.l);
        }

        /// &lt;summary&gt;
        /// Appends the specified element to the end of this list.
        /// &lt;/summary&gt;
        /// &lt;param name="e"&gt;element to be appended to this list
        /// &lt;/param&gt;&lt;returns&gt;true
        /// &lt;/returns&gt;
        public override bool add(E e)
        {
            l.Add(e);
            return true;
        }

        /// &lt;summary&gt;
        /// Inserts the specified element at the specified position in this list.
        /// &lt;/summary&gt;
        /// &lt;param name="index"&gt;index at which the specified element is to be inserted
        /// &lt;/param&gt;&lt;param name="element"&gt;element to be inserted
        /// &lt;/param&gt;
        public override void add(int index, E element)
        {
            l.Insert(index, element);
        }

        /// &lt;summary&gt;
        /// Returns the element at the specified position in this list.
        /// &lt;/summary&gt;
        /// &lt;param name="index"&gt;index of the element to return
        /// &lt;/param&gt;&lt;returns&gt;the element at the specified position in this list
        /// &lt;/returns&gt;
        public override E get(int index)
        {
            return l[index];
        }

        /// &lt;summary&gt;
        /// Replaces the element at the specified position in this list with the
        /// specified element.
        /// &lt;/summary&gt;
        /// &lt;param name="index"&gt;index of the element to replace
        /// &lt;/param&gt;&lt;param name="element"&gt;element to be stored at the specified position
        /// &lt;/param&gt;&lt;returns&gt;the element previously at the specified position
        /// &lt;/returns&gt;
        public override E set(int index, E element)
        {
            // replacing the element on the specified index and returning its original value
            E original = l[index];
            l[index] = element;
            return original;
        }

        /// &lt;summary&gt;
        /// Removes the element at the specified position in this list.
        /// &lt;/summary&gt;
        /// &lt;param name="index"&gt;the index of the element to be removed
        /// &lt;/param&gt;&lt;returns&gt;the element that was removed from the list
        /// &lt;/returns&gt;
        public override E remove(int index)
        {
            // removing the element on the specified index and returning its value
            E removed = l[index];
            l.RemoveAt(index);
            return removed;
        }

        /// &lt;summary&gt;
        /// Returns the number of elements in this list.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the number of elements in this list
        /// &lt;/returns&gt;
        public override int size()
        {
            return l.Count;
        }

        /// &lt;summary&gt;
        /// Removes all of the elements from this list.
        public override void clear()
        {
            l.Clear();
        }

        /// &lt;summary&gt;
        /// Returns a string representation of the object.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;a string representation of the object.
        /// &lt;/returns&gt;
        public override String toString()
        {
            // create StringBuilder for appending the text
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append("[");

            // append the first element string representation
            if (l.Count &gt; 0)
            {
                sb.Append(l[0] == null ? "null" : l[0].ToString());
            }

            // append another elements string representation
            for (int i = 1; i &lt; l.Count; i++)
            {
                sb.Append(", ").Append(l[i] == null ? "null" : l[i].ToString());
            }

            // create Java-like string
            return new String(sb.Append("]").ToString());
        }
        
    }

}
</code>
<code lang="Free Pascal">unit ArrayListUnit;

{$mode objfpc}{$H+}

interface

uses
  StringUnit, ListUnit;

type
  ObjectArray = array of Object_;

  (**
   * Resizable-array implementation of the List abstract class.
   *
   * @param E the type of elements in this list
   * @author Petr Kozler (A13B0359P)
   *)
  ArrayList = class(List)
    private
      const
        // initial length of the inner dynamically resized array
        DEFAULT_CAPACITY = 10;
        // coefficient for increasing or decreasing the capacity of inner array
        RESIZE_COEF = 2;
      var
        // dynamically resized array
        dynamicArray: array of Object_;
        // current element count
        count: longInt;
      procedure expand();
      procedure shrink();
    public
      property arrProperty: ObjectArray read dynamicArray;
      constructor create();
      constructor create(c: ArrayList);
      function add(e: Object_) : boolean; override;
      procedure add(index: longInt; element: Object_); override;
      function get(index: longInt) : Object_; override;
      function set_(index: longInt; element: Object_) : Object_; override;
      function remove(index: longInt) : Object_; override;
      function size() : longInt; override;
      procedure clear(); override;
      function toString_() : String_; override;
  end;

implementation

uses
  StringBuilderUnit, Classes, SysUtils;

(**
 * Constructs an empty list with an initial capacity of ten.
 *)
constructor ArrayList.create();
begin
  // setting the inner array length to the default capacity
  setLength(dynamicArray, DEFAULT_CAPACITY);
  count := 0;
end;

(**
 * Constructs a list containing the elements of the specified collection, in
 * the order they are returned by the collection's iterator.
 *
 * @param c the collection whose elements are to be placed into this list
 *)
constructor ArrayList.create(c: ArrayList);
var
  i: longInt;
begin
  // setting the inner array length to the specified list capacity
  setLength(dynamicArray, length(c.dynamicArray));
  count := c.count;

  // copying all elements from the specified list
  for i := 0 to count - 1 do begin
    dynamicArray[i] := c.dynamicArray[i];
  end;
end;

(*
    Increases the capacity of the inner array if the element count
    reaches the current capacity.
 *)
procedure ArrayList.expand();
var
  len: longInt;
begin
  inc(count);
  len := length(dynamicArray);

  // expanding the array by the resize coefficient
  if count = len then begin
    setLength(dynamicArray, len * RESIZE_COEF);
  end;
end;

(*
    Decreases the capacity of the inner array if the element count reaches the half
    of the current capacity (and the current capacity is greater than the default capacity).
 *)
procedure ArrayList.shrink();
var
  len: longInt;
begin
  dec(count);
  len := length(dynamicArray);

  if (count &lt; len div RESIZE_COEF) and (len &gt;= DEFAULT_CAPACITY * RESIZE_COEF) then begin
    // shrinking the array by the resize coefficient
    setLength(dynamicArray, len div RESIZE_COEF);
  end;
end;

(**
 * Appends the specified element to the end of this list.
 *
 * @param e element to be appended to this list
 * @return true
 *)
function ArrayList.add(e: Object_) : boolean;
begin
  // storing the element on the index specified by the current element count
  dynamicArray[count] := e;
  expand();
  add := true;
end;

(**
 * Inserts the specified element at the specified position in this list.
 *
 * @param index index at which the specified element is to be inserted
 * @param element element to be inserted
 *)
procedure ArrayList.add(index: longInt; element: Object_);
var
  i: longInt;
begin
  // moving the elements with greater index than specified by 1 away from the beginning of array
  for i := count downto index + 1 do begin
    dynamicArray[i] := dynamicArray[i - 1];
  end;

  // storing the element on the specified index
  dynamicArray[index] := element;
  expand();
end;

(**
 * Returns the element at the specified position in this list.
 *
 * @param index index of the element to return
 * @return the element at the specified position in this list
 *)
function ArrayList.get(index: longInt) : Object_;
begin
  get := dynamicArray[index];
end;

(**
 * Replaces the element at the specified position in this list with the
 * specified element.
 *
 * @param index index of the element to replace
 * @param element element to be stored at the specified position
 * @return the element previously at the specified position
 *)
function ArrayList.set_(index: longInt; element: Object_) : Object_;
var
  original: Object_;
begin
  original := dynamicArray[index];
  dynamicArray[index] := element;
  set_ := original;
end;

(**
 * Removes the element at the specified position in this list.
 *
 * @param index the index of the element to be removed
 * @return the element that was removed from the list
 *)
function ArrayList.remove(index: longInt) : Object_;
var
  removed: Object_;
  i: longInt;
begin
  removed := dynamicArray[index];

  // moving the elements with greater index than removed by 1 towards the beginning of array
  for i := index to count - 1 do begin
    dynamicArray[i] := dynamicArray[i + 1];
  end;

  shrink();
  remove := removed;
end;

(**
 * Returns the number of elements in this list.
 *
 * @return the number of elements in this list
 *)
function ArrayList.size() : longInt;
begin
  size := count;
end;

(**
 * Removes all of the elements from this list.
 *)
procedure ArrayList.clear();
begin
  setLength(dynamicArray, 0);
  count := 0;
  // resizing the inner array to the default capacity
  setLength(dynamicArray, DEFAULT_CAPACITY);
end;

(**
 * Returns a string representation of the object.
 *
 * @return a string representation of the object.
 *)
function ArrayList.toString_() : String_;
var
  sb: StringBuilder;
  str: String_;
  i: longInt;
begin
  // create StringBuilder for appending the text
  sb := StringBuilder.create();
  str := String_.create('[');
  sb.append(str);
  freeAndNil(str);

  // append first element string representation
  if count &gt; 0 then begin
    if dynamicArray[0] = nil then begin
      str := String_.create('null');
    end
    else begin
      str := dynamicArray[0].toString_();
    end;

    sb.append(str);
    freeAndNil(str);
  end;

  // append another elements string representation
  for i := 1 to count - 1 do begin
    str := String_.create(', ');
    sb.append(str);
    freeAndNil(str);

    if dynamicArray[i] = nil then begin
      str := String_.create('null');
    end
    else begin
      str := dynamicArray[i].toString_();
    end;

    sb.append(str);
    freeAndNil(str);
  end;

  // create Java-like string
  str := String_.create(']');
  sb.append(str);
  freeAndNil(str);
  str := sb.toString_();
  freeAndNil(sb);
  toString_ := str;
end;

end.

</code>

</codes>
