<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef STRINGBUILDER_INCLUDED
#define	STRINGBUILDER_INCLUDED

#include "String_.h"
#include &lt;stdint.h&gt;

/**
 * A mutable sequence of characters.
 *
 * @author Petr Kozler (A13B0359P)
 */

typedef struct {
    // string buffer
    char *buffer;
    // current appended character count
    int32_t count;
    // current buffer capacity
    int32_t capacity;
} StringBuilder;

StringBuilder *new_StringBuilder();
void delete_StringBuilder(StringBuilder *ptr);
StringBuilder *append(StringBuilder *ptr, String *str);
String *toStringSb(StringBuilder *ptr);

#endif	/* STRINGBUILDER_INCLUDED */

#include "StringBuilder.h"

#include "String_.h"
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

// initial capacity for the inner dynamically resized string buffer
#define _STR_DEFAULT_CAPACITY 16
// coefficient for increasing the string buffer capacity
#define _STR_RESIZE_COEF 2

/**
 * Constructs a string builder with no characters in it and an initial
 * capacity of 16 characters.
 */
StringBuilder *new_StringBuilder() {
    StringBuilder *sb = (StringBuilder *) malloc(sizeof (StringBuilder));
    sb-&gt;count = 1;
    sb-&gt;capacity = _STR_DEFAULT_CAPACITY;
    // allocating the inner buffer to the default capacity
    sb-&gt;buffer = (char *) malloc(sb-&gt;capacity * sizeof (char));
    sb-&gt;buffer[0] = '\0';

    return sb;
}

/*
    Destructs the StringBuilder.
 */
void delete_StringBuilder(StringBuilder *ptr) {
    free(ptr-&gt;buffer);
    free(ptr);
}

/**
 * Appends the specified string to the specified character sequence.
 *
 * @param ptr The allocated structure
 * @param str a string.
 * @return a pointer to the specified structure.
 */
StringBuilder *append(StringBuilder *ptr, String *str) {
    // increasing the buffer capacity if the new string length reaches the current capacity
    if (ptr-&gt;count + str-&gt;len &gt;= ptr-&gt;capacity) {
        ptr-&gt;capacity += str-&gt;len * _STR_RESIZE_COEF;
        // reallocating the memory (expanding the allocated memory by the resize coefficient)
        ptr-&gt;buffer = realloc(ptr-&gt;buffer, ptr-&gt;capacity * sizeof (char));
    }

    // concatenating the new string
    strcat(ptr-&gt;buffer, str-&gt;s);
    ptr-&gt;count += str-&gt;len;

    return ptr;
}

/**
 * Returns a string representing the data in the specified sequence.
 *
 * @param ptr The allocated structure
 * @return a string representation of the specified sequence of characters.
 */
String *toStringSb(StringBuilder *ptr) {
    return new_String(ptr-&gt;buffer);
}
</code>
<code lang="C++">#ifndef STRINGBUILDER_INCLUDED
#define	STRINGBUILDER_INCLUDED

#include "String_.h"
#include &lt;sstream&gt;

/**
 * A mutable sequence of characters.
 *
 * @author Petr Kozler (A13B0359P)
 */
class StringBuilder : public Object {
    // an inner string builder
    std::ostringstream oss;
public:
    StringBuilder();
    StringBuilder *append(String *str);
    String *toString();
};

#endif	// STRINGBUILDER_INCLUDED


#include "StringBuilder.h"

/**
 * Constructs a string builder with no characters in it and an initial
 * capacity of 16 characters.
 */
StringBuilder::StringBuilder() {
    // no code yet
}

/**
 * Appends the specified string to this character sequence.
 *
 * @param str a string.
 * @return a pointer to this object.
 */
StringBuilder *StringBuilder::append(String *str) {
    oss &lt;&lt; str-&gt;_s();
    
    return this;
}

/**
 * Returns a string representing the data in this sequence.
 *
 * @return a string representation of this sequence of characters.
 */
String *StringBuilder::toString() {
    return new String(oss.str());
}
</code>
<code lang="C#">ï»¿namespace JavaClasses
{

    /// &lt;summary&gt;
    /// A mutable sequence of characters.
    /// &lt;/summary&gt;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;
    public class StringBuilder : Object
    {

        // an inner string builder
        private System.Text.StringBuilder sb;

        /// &lt;summary&gt;
        /// Constructs a string builder with no characters in it and an initial
        /// capacity of 16 characters.
        /// &lt;/summary&gt;
        public StringBuilder()
        {
            sb = new System.Text.StringBuilder();
        }

        /// &lt;summary&gt;
        /// Appends the specified string to this character sequence.
        /// &lt;/summary&gt;
        /// &lt;param name="str"&gt;a string.
        /// &lt;/param&gt;&lt;returns&gt;a reference to this object.
        /// &lt;/returns&gt;
        public StringBuilder append(String str)
        {
            sb.Append(str.ToString());

            return this;
        }

        /// &lt;summary&gt;
        /// Returns a string representing the data in this sequence.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;a string representation of this sequence of characters.
        /// &lt;/returns&gt;
        public override String toString()
        {
            return sb.ToString();
        }

    }

}
</code>
<code lang="Free Pascal">unit StringBuilderUnit;

{$mode objfpc}{$H+}

interface

uses
  Classes, StringUnit;

type
  (**
   * A mutable sequence of characters.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  StringBuilder = class(Object_)
    private
      const
        // initial capacity for the inner dynamically resized string buffer
        DEFAULT_CAPACITY = 16;
        // coefficient for increasing the string buffer capacity
        RESIZE_COEF = 2;
      var
        // char pointer used as a string buffer
        buffer: ^ansiChar;
        // current appended character count
        count: longInt;
        // current buffer capacity
        capacity: longInt;
    public
      constructor create();
      destructor destroy(); override;
      function append(str: String_) : StringBuilder;
      function toString_() : String_;
  end;

implementation

uses
  SysUtils;

(**
 * Constructs a string builder with no characters in it and an initial
 * capacity of 16 characters.
 *)
constructor StringBuilder.create();
begin
  count := 0;
  capacity := DEFAULT_CAPACITY;
  // allocating the inner buffer to the default capacity
  buffer := getMem(capacity);
  buffer[0] := #0;
end;

(*
    Destructs the StringBuilder.
 *)
destructor StringBuilder.destroy();
begin
  freeMem(buffer);
  inherited;
end;

(**
 * Appends the specified string to this character sequence.
 *
 * @param str a string.
 * @return a reference to this object.
 *)
function StringBuilder.append(str: String_) : StringBuilder;
var
  cStr: ^ansiChar;
  len: longInt;
begin
  len := str.length();

  // converting the string into the null-terminated char array for appending it to the buffer
  cStr := getMem(len + 1);
  strPCopy(cStr, str.strProperty);

  // increasing the buffer capacity if the new string length reaches the current capacity
  if count + len &gt;= capacity then begin
    capacity := count + len * RESIZE_COEF;
    // reallocating the memory (expanding the allocated memory by the resize coefficient)
    buffer := reAllocMem(buffer, capacity);
  end;

  // concatenating the new string
  strcat(buffer, cStr);
  count := count + len;
  append := self;
end;

(**
 * Returns a string representing the data in this sequence.
 *
 * @return a string representation of this sequence of characters.
 *)
function StringBuilder.toString_() : String_;
begin
  // converting the null-terminated char array into string
  toString_ := String_.create(strPas(buffer));
end;

end.

</code>

</codes>
