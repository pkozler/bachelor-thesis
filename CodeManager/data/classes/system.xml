<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef SYSTEM_INCLUDED
#define	SYSTEM_INCLUDED

#include "String_.h"
#include &lt;stddef.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdint.h&gt;

/**
 * The System module contains several useful global variables and functions.
 *
 * @author Petr Kozler (A13B0359P)
 */

/**
 * A struct representing PrintStream which provides ability to print
 * representations of various data values conveniently.
 * Currently serves only as a fake structure for the purpose
 * of the Java code imitation.
 *
 * @author Petr Kozler (A13B0359P)
 */

typedef struct {
    // dummy variable for the struct to have at least one member
    void *dummy;
} PrintStream;

/**
 * This struct represents an input stream of bytes.
 * Currently serves only as a fake structure for the purpose
 * of the Java code imitation.
 * 
 * @author Petr Kozler (A13B0359P)
 */

typedef struct {
    // dummy variable for the struct to have at least one member
    void *dummy;
} InputStream;

void printBool(PrintStream *ptr, bool b);
void printC(PrintStream *ptr, char c);
void printS(PrintStream *ptr, char *s, int32_t length);
void printD(PrintStream *ptr, double d);
void printF(PrintStream *ptr, float f);
void printI(PrintStream *ptr, int32_t i);
void printL(PrintStream *ptr, int64_t l);
void printObj(PrintStream *ptr, void *obj, String *(*toString)(void *));
void printStr(PrintStream *ptr, String *s);
void println(PrintStream *ptr);
void printlnBool(PrintStream *ptr, bool x);
void printlnC(PrintStream *ptr, char x);
void printlnS(PrintStream *ptr, char *x, int32_t length);
void printlnD(PrintStream *ptr, double x);
void printlnF(PrintStream *ptr, float x);
void printlnI(PrintStream *ptr, int32_t x);
void printlnL(PrintStream *ptr, int64_t x);
void printlnObj(PrintStream *ptr, void *obj, String *(*toString)(void *));
void printlnStr(PrintStream *ptr, String *x);

/**
 * The struct instance representing the fake "standard" input stream
 * (for purpose of the imitation of Java code).
 */
InputStream *System_in;

/**
 * The struct instance representing the fake "standard" output stream
 * (for purpose of the imitation of Java code).
 */
PrintStream *System_out;

void _mergeSort(void **array, void **aux, int32_t left, int32_t right, int32_t (*compare)(const void *, const void *));

#endif	/* SYSTEM_INCLUDED */


#include &lt;stdlib.h&gt;
#include &lt;wchar.h&gt;

#include "System.h"

/*
    Merges the specified subarrays for Merge sort.
 */
void _merge(void **array, void **aux, int32_t left, int32_t right, int32_t (*compare)(const void *, const void *)) {
    int32_t middleIndex = (left + right) / 2;
    int32_t leftIndex = left;
    int32_t rightIndex = middleIndex + 1;
    int32_t auxIndex = left;

    // moving elements to the auxilliary array until one of the indices leaves the specified boundary
    while (leftIndex &lt;= middleIndex &amp;&amp; rightIndex &lt;= right) {
        // comparing the struct pointer values and setting the less one as the auxilliary array element
        if (compare((void *) array[leftIndex], (void *) array[rightIndex]) &lt;= 0) {
            aux[auxIndex] = array[leftIndex++];
        }
        else {
            aux[auxIndex] = array[rightIndex++];
        }

        // incrementing the auxilliary array index
        auxIndex++;
    }

    // setting the rest of the left subarray
    while (leftIndex &lt;= middleIndex) {
        aux[auxIndex] = array[leftIndex++];
        auxIndex++;
    }

    // setting the rest of the right subarray
    while (rightIndex &lt;= right) {
        aux[auxIndex] = array[rightIndex++];
        auxIndex++;
    }
}

/*
    Implements the recursive Mergesort stable sorting algorithm for the struct pointer arrays.
 */
void _mergeSort(void **array, void **aux, int32_t left, int32_t right, int32_t (*compare)(const void *, const void *)) {
    if (left == right) {
        return;
    }

    // setting the middle index for splitting the specified array into subarrays
    int32_t middleIndex = (left + right) / 2;

    // sorting the left subarray recursively
    _mergeSort(array, aux, left, middleIndex, compare);
    // sorting the right subarray recursively
    _mergeSort(array, aux, middleIndex + 1, right, compare);
    // merging the sorted subarrays back into one array
    _merge(array, aux, left, right, compare);

    // setting the values from the auxilliary array into original array
    int32_t i;
    for (i = left; i &lt;= right; i++) {
        array[i] = aux[i];
    }
}

/**
 * Prints a boolean value.
 *
 * @param ptr The allocated structure
 * @param b The boolean to be printed
 */
void printBool(PrintStream *ptr, bool b) {
    printf("%s", b ? "true" : "false");
    fflush(stdout);
}

/**
 * Prints a character.
 *
 * @param ptr The allocated structure
 * @param c The char to be printed
 */
void printC(PrintStream *ptr, char c) {
    printf("%c", c);
    fflush(stdout);
}

/**
 * Prints an array of characters.
 *
 * @param ptr The allocated structure
 * @param s The array of chars to be printed
 * @param length The array length
 */
void printS(PrintStream *ptr, char *s, int32_t length) {
    int i;
    for (i = 0; i &lt; length; i++) {
        printf("%c", s[i]);
    }

    fflush(stdout);
}

/**
 * Prints a double-precision floating-point number.
 *
 * @param ptr The allocated structure
 * @param d The double to be printed
 */
void printD(PrintStream *ptr, double d) {
    printf("%lG", d);
    fflush(stdout);
}

/**
 * Prints a floating-point number.
 *
 * @param ptr The allocated structure
 * @param f The float to be printed
 */
void printF(PrintStream *ptr, float f) {
    printf("%G", f);
    fflush(stdout);
}

/**
 * Prints an integer.
 *
 * @param ptr The allocated structure
 * @param i The int to be printed
 */
void printI(PrintStream *ptr, int32_t i) {
    printf("%d", i);
    fflush(stdout);
}

/**
 * Prints a long integer.
 *
 * @param ptr The allocated structure
 * @param l The long to be printed
 */
void printL(PrintStream *ptr, int64_t l) {
    printf("%lld", l);
    fflush(stdout);
}

/**
 * Prints a structure.
 *
 * @param ptr The allocated structure
 * @param obj The structure to be printed
 * @param toString The structure toString function
 */
void printObj(PrintStream *ptr, void *obj, String *(*toString)(void *)) {
    String *s = toString(obj);
    printf("%s", s-&gt;s);
    delete_String(s);
    fflush(stdout);
}

/**
 * Prints a string.
 *
 * @param ptr The allocated structure
 * @param s The String to be printed
 */
void printStr(PrintStream *ptr, String *s) {
    printf("%s", s-&gt;s);
    fflush(stdout);
}

/**
 * Terminates the current line by writing the line separator string.
 *
 * @param ptr The allocated structure
 */
void println(PrintStream *ptr) {
    printf("\n");
    fflush(stdout);
}

/**
 * Prints a boolean and then terminate the line.
 *
 * @param ptr The allocated structure
 * @param x The boolean to be printed
 */
void printlnBool(PrintStream *ptr, bool x) {
    printf("%s\n", x ? "true" : "false");
    fflush(stdout);
}

/**
 * Prints a character and then terminate the line.
 *
 * @param ptr The allocated structure
 * @param x The char to be printed.
 */
void printlnC(PrintStream *ptr, char x) {
    printf("%c\n", x);
    fflush(stdout);
}

/**
 * Prints an array of characters and then terminate the line.
 *
 * @param ptr The allocated structure
 * @param x an array of chars to print.
 * @param length The array length
 */
void printlnS(PrintStream *ptr, char *x, int32_t length) {
    int i;
    for (i = 0; i &lt; length; i++) {
        printf("%c", x[i]);
    }

    printf("\n");
    fflush(stdout);
}

/**
 * Prints a double and then terminate the line.
 *
 * @param ptr The allocated structure
 * @param x The double to be printed.
 */
void printlnD(PrintStream *ptr, double x) {
    printf("%lG\n", x);
    fflush(stdout);
}

/**
 * Prints a float and then terminate the line.
 *
 * @param ptr The allocated structure
 * @param x The float to be printed.
 */
void printlnF(PrintStream *ptr, float x) {
    printf("%G\n", x);
    fflush(stdout);
}

/**
 * Prints an integer and then terminate the line.
 *
 * @param ptr The allocated structure
 * @param x The int to be printed.
 */
void printlnI(PrintStream *ptr, int32_t x) {
    printf("%d\n", x);
    fflush(stdout);
}

/**
 * Prints a long and then terminate the line.
 *
 * @param ptr The allocated structure
 * @param x The long to be printed.
 */
void printlnL(PrintStream *ptr, int64_t x) {
    printf("%lld\n", x);
    fflush(stdout);
}

/**
 * Prints a structure and then terminate the line.
 *
 * @param ptr The allocated structure
 * @param x The structure to be printed.
 * @param toString The structure toString function
 */
void printlnObj(PrintStream *ptr, void *obj, String *(*toString)(void *)) {
    String *s = toString(obj);
    printf("%s\n", s-&gt;s);
    delete_String(s);
    fflush(stdout);
}

/**
 * Prints a String and then terminate the line.
 *
 * @param ptr The allocated structure
 * @param x The String to be printed.
 */
void printlnStr(PrintStream *ptr, String *x) {
    printf("%s\n", x-&gt;s);
    fflush(stdout);
}

InputStream sysIn;
InputStream *System_in = &amp;sysIn;
PrintStream sysOut;
PrintStream *System_out = &amp;sysOut;</code>
<code lang="C++">#ifndef SYSTEM_INCLUDED
#define	SYSTEM_INCLUDED

#include "String_.h"
#include &lt;cstdint&gt;

/**
 * A PrintStream adds functionality to another output stream,
 * namely the ability to print representations of various data values conveniently.
 *
 * @author Petr Kozler (A13B0359P)
 */
class PrintStream : public Object {
public:
    void print(bool b);
    void print(char c);
    void print(char* s, int32_t length);
    void print(double d);
    void print(float f);
    void print(int32_t i);
    void print(int64_t l);
    void print(Object *obj);
    void print(String *s);
    void println();
    void println(bool x);
    void println(char x);
    void println(char* x, int32_t length);
    void println(double x);
    void println(float x);
    void println(int32_t x);
    void println(int64_t x);
    void println(Object *obj);
    void println(String *x);
};

/**
 * This abstract class is the superclass of all classes
 * representing an input stream of bytes.
 * 
 * @author Petr Kozler (A13B0359P)
 */
class InputStream : public Object {
    // really no code
};

/**
 * The System class contains several useful class fields and methods.
 *
 * @author Petr Kozler (A13B0359P)
 */
class System {
public:
    /**
     * The "standard" input stream.
     */
    static InputStream *in;
    
    /**
     * The "standard" output stream.
     */
    static PrintStream *out;
};

#endif	// SYSTEM_INCLUDED


#include "System.h"

#include &lt;iostream&gt;

/**
 * Prints a boolean value.
 *
 * @param b The boolean to be printed
 */
void PrintStream::print(bool b) {
    std::cout &lt;&lt; (b ? "true" : "false");
}

/**
 * Prints a character.
 *
 * @param c The char to be printed
 */
void PrintStream::print(char c) {
    std::cout &lt;&lt; c;
}

/**
 * Prints an array of characters.
 *
 * @param s The array of chars to be printed
 * @param length The array length
 */
void PrintStream::print(char* s, int32_t length) {
    for (int i = 0; i &lt; length; i++) {
        std::cout &lt;&lt; s[i];
    }
}

/**
 * Prints a double-precision floating-point number.
 *
 * @param d The double to be printed
 */
void PrintStream::print(double d) {
    std::cout &lt;&lt; d;
}

/**
 * Prints a floating-point number.
 *
 * @param f The float to be printed
 */
void PrintStream::print(float f) {
    std::cout &lt;&lt; f;
}

/**
 * Prints an integer.
 *
 * @param i The int to be printed
 */
void PrintStream::print(int32_t i) {
    std::cout &lt;&lt; i;
}

/**
 * Prints a long integer.
 *
 * @param l The long to be printed
 */
void PrintStream::print(int64_t l) {
    std::cout &lt;&lt; l;
}

/**
 * Prints an object.
 *
 * @param obj The Object to be printed
 */
void PrintStream::print(Object *obj) {
    String *s = obj-&gt;toString();
    std::cout &lt;&lt; s-&gt;_s();
    delete s;
}

/**
 * Prints a string.
 *
 * @param s The String to be printed
 */
void PrintStream::print(String *s) {
    std::cout &lt;&lt; s-&gt;_s();
}

/**
 * Terminates the current line by writing the line separator string.
 */
void PrintStream::println() {
    std::cout &lt;&lt; std::endl;
}

/**
 * Prints a boolean and then terminate the line.
 *
 * @param x The boolean to be printed
 */
void PrintStream::println(bool x) {
    std::cout &lt;&lt; (x ? "true" : "false") &lt;&lt; std::endl;
}

/**
 * Prints a character and then terminate the line.
 *
 * @param x The char to be printed.
 */
void PrintStream::println(char x) {
    std::cout &lt;&lt; x &lt;&lt; std::endl;
}

/**
 * Prints an array of characters and then terminate the line.
 *
 * @param x an array of chars to print.
 * @param length The array length
 */
void PrintStream::println(char* x, int32_t length) {
    for (int i = 0; i &lt; length; i++) {
        std::cout &lt;&lt; x[i];
    }
    
    std::cout &lt;&lt; "" &lt;&lt; std::endl;
}

/**
 * Prints a double and then terminate the line.
 *
 * @param x The double to be printed.
 */
void PrintStream::println(double x) {
    std::cout &lt;&lt; x &lt;&lt; std::endl;
}

/**
 * Prints a float and then terminate the line.
 *
 * @param x The float to be printed.
 */
void PrintStream::println(float x) {
    std::cout &lt;&lt; x &lt;&lt; std::endl;
}

/**
 * Prints an integer and then terminate the line.
 *
 * @param x The int to be printed.
 */
void PrintStream::println(int32_t x) {
    std::cout &lt;&lt; x &lt;&lt; std::endl;
}

/**
 * Prints a long and then terminate the line.
 *
 * @param x The long to be printed.
 */
void PrintStream::println(int64_t x) {
    std::cout &lt;&lt; x &lt;&lt; std::endl;
}

/**
 * Prints an Object and then terminate the line.
 *
 * @param x The Object to be printed.
 */
void PrintStream::println(Object *obj) {
    String *s = obj-&gt;toString();
    std::cout &lt;&lt; s-&gt;_s() &lt;&lt; std::endl;
    delete s;
}

/**
 * Prints a String and then terminate the line.
 *
 * @param x The String to be printed.
 */
void PrintStream::println(String *x) {
    std::cout &lt;&lt; x-&gt;_s() &lt;&lt; std::endl;
}

InputStream *System::in = new InputStream();
PrintStream *System::out = new PrintStream();</code>
<code lang="C#">﻿using System;
using System.Threading;

namespace JavaClasses
{

    /// &lt;summary&gt;
    /// A PrintStream adds functionality to another output stream,
    /// namely the ability to print representations of various data values conveniently.
    /// &lt;/summary&gt;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;
    public class PrintStream : Object
    {
        /// &lt;summary&gt;
        /// Creates a new print stream.
        /// &lt;/summary&gt;
        public PrintStream()
        {
            // setting the standard output format
            Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
        }

        /// &lt;summary&gt;
        /// Prints a boolean value.
        /// &lt;/summary&gt;
        /// &lt;param name="b"&gt;The boolean to be printed
        /// &lt;/param&gt;
        public void print(bool b)
        {
            Console.Write(b.ToString().ToLower());
        }

        /// &lt;summary&gt;
        /// Prints a character.
        /// &lt;/summary&gt;
        /// &lt;param name="c"&gt;The char to be printed
        /// &lt;/param&gt;
        public void print(char c)
        {
            Console.Write(c);
        }

        /// &lt;summary&gt;
        /// Prints an array of characters.
        /// &lt;/summary&gt;
        /// &lt;param name="s"&gt;The array of chars to be printed
        /// &lt;/param&gt;
        public void print(char[] s)
        {
            Console.Write(s);
        }

        /// &lt;summary&gt;
        /// Prints a double-precision floating-point number.
        /// &lt;/summary&gt;
        /// &lt;param name="d"&gt;The double to be printed
        /// &lt;/param&gt;
        public void print(double d)
        {
            Console.Write(d);
        }

        /// &lt;summary&gt;
        /// Prints a floating-point number.
        /// &lt;/summary&gt;
        /// &lt;param name="f"&gt;The float to be printed
        /// &lt;/param&gt;
        public void print(float f)
        {
            Console.Write(f);
        }

        /// &lt;summary&gt;
        /// Prints an integer.
        /// &lt;/summary&gt;
        /// &lt;param name="i"&gt;The int to be printed
        /// &lt;/param&gt;
        public void print(int i)
        {
            Console.Write(i);
        }

        /// &lt;summary&gt;
        /// Prints a long integer.
        /// &lt;/summary&gt;
        /// &lt;param name="l"&gt;The long to be printed
        /// &lt;/param&gt;
        public void print(long l)
        {
            Console.Write(l);
        }

        /// &lt;summary&gt;
        /// Prints an object.
        /// &lt;/summary&gt;
        /// &lt;param name="obj"&gt;The Object to be printed
        /// &lt;/param&gt;
        public void print(Object obj)
        {
            Console.Write(obj);
        }

        /// &lt;summary&gt;
        /// Prints a string.
        /// &lt;/summary&gt;
        /// &lt;param name="s"&gt;The String to be printed
        /// &lt;/param&gt;
        public void print(String s)
        {
            Console.Write(s);
        }

        /// &lt;summary&gt;
        /// Terminates the current line by writing the line separator string.
        public void println()
        {
            Console.WriteLine();
        }

        /// &lt;summary&gt;
        /// Prints a boolean and then terminate the line.
        /// &lt;/summary&gt;
        /// &lt;param name="x"&gt;The boolean to be printed
        /// &lt;/param&gt;
        public void println(bool x)
        {
            Console.WriteLine(x.ToString().ToLower());
        }

        /// &lt;summary&gt;
        /// Prints a character and then terminate the line.
        /// &lt;/summary&gt;
        /// &lt;param name="x"&gt;The char to be printed.
        /// &lt;/param&gt;
        public void println(char x)
        {
            Console.WriteLine(x);
        }

        /// &lt;summary&gt;
        /// Prints an array of characters and then terminate the line.
        /// &lt;/summary&gt;
        /// &lt;param name="x"&gt;an array of chars to print.
        /// &lt;/param&gt;
        public void println(char[] x)
        {
            Console.WriteLine(x);
        }

        /// &lt;summary&gt;
        /// Prints a double and then terminate the line.
        /// &lt;/summary&gt;
        /// &lt;param name="x"&gt;The double to be printed.
        /// &lt;/param&gt;
        public void println(double x)
        {
            Console.WriteLine(x);
        }

        /// &lt;summary&gt;
        /// Prints a float and then terminate the line.
        /// &lt;/summary&gt;
        /// &lt;param name="x"&gt;The float to be printed.
        /// &lt;/param&gt;
        public void println(float x)
        {
            Console.WriteLine(x);
        }

        /// &lt;summary&gt;
        /// Prints an integer and then terminate the line.
        /// &lt;/summary&gt;
        /// &lt;param name="x"&gt;The int to be printed.
        /// &lt;/param&gt;
        public void println(int x)
        {
            Console.WriteLine(x);
        }

        /// &lt;summary&gt;
        /// Prints a long and then terminate the line.
        /// &lt;/summary&gt;
        /// &lt;param name="x"&gt;The long to be printed.
        /// &lt;/param&gt;
        public void println(long x)
        {
            Console.WriteLine(x);
        }

        /// &lt;summary&gt;
        /// Prints an Object and then terminate the line.
        /// &lt;/summary&gt;
        /// &lt;param name="x"&gt;The Object to be printed.
        /// &lt;/param&gt;
        public void println(Object x)
        {
            Console.WriteLine(x);
        }

        /// &lt;summary&gt;
        /// Prints a String and then terminate the line.
        /// &lt;/summary&gt;
        /// &lt;param name="x"&gt;The String to be printed.
        /// &lt;/param&gt;
        public void println(String x)
        {
            Console.WriteLine(x);
        }

    }

    /// &lt;summary&gt;
    /// This abstract class is the superclass of all classes 
    /// representing an input stream of bytes.
    /// &lt;/summary&gt;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;
    public class InputStream : Object
    {
        // no code yet
    }

    /// &lt;summary&gt;
    /// The System class contains several useful class fields and methods.
    /// &lt;/summary&gt;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;
    public class System_ : Object
    {

        /// &lt;summary&gt;
        /// The "standard" input stream.
        /// &lt;/summary&gt;
        public readonly static InputStream in_ = new InputStream();

        /// &lt;summary&gt;
        /// The "standard" output stream.
        /// &lt;/summary&gt;
        public readonly static PrintStream out_ = new PrintStream();

    }

}
</code>
<code lang="Free Pascal">unit SystemUnit;

{$mode objfpc}{$H+}

interface

uses
  StringUnit, Classes;

type
  (**
   * A PrintStream adds functionality to another output stream,
   * namely the ability to print representations of various data values conveniently.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  PrintStream = class(Object_)
    private
      class function charArrayToString(s: array of ansiChar): ansiString;
    public
      procedure print(b: boolean);
      procedure print(c: ansiChar);
      procedure print(s: array of ansiChar);
      procedure print(d: double);
      procedure print(f: single);
      procedure print(i: longInt);
      procedure print(l: int64);
      procedure print(obj: Object_);
      procedure print(s: String_);
      procedure println();
      procedure println(x: boolean);
      procedure println(x: ansiChar);
      procedure println(x: array of ansiChar);
      procedure println(x: double);
      procedure println(x: single);
      procedure println(x: longInt);
      procedure println(x: int64);
      procedure println(x: Object_);
      procedure println(x: String_);
  end;

  (**
   * This abstract class is the superclass of all classes
   * representing an input stream of bytes.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  InputStream = class(Object_)
    // no code yet
  end;

  (**
   * The System class contains several useful class fields and methods.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  System_ = class
    public
      class var
        (**
         * The "standard" input stream.
         *)
        in_: InputStream;

        (**
         * The "standard" output stream.
         *)
        out_: PrintStream;
  end;

  // pointer to function for comparing the two specified values
  CompareFunction = function(a, b: pointer) : longInt;

  // comparator class for objects
  ObjectComparator = class(Comparator)
    public function compare(o1, o2: Object_) : longInt; override;
  end;

  // helper class containing the sorting algorithm implementations
  _java = class
    private
      class procedure merge(var arr, aux: array of Object_; left, right: longInt; c: Comparator);
    public
      class procedure mergeSort(var arr, aux: array of Object_; left, right: longInt; c: Comparator);
      class procedure quickSort(x: pointer; left, right, size: longInt; c: CompareFunction);
  end;

implementation

uses
  SysUtils;

(*
    Compares the two specified objects.
 *)
function ObjectComparator.compare(o1, o2: Object_) : longInt;
begin
  compare := (o1 as Comparable).compareTo(o2 as Comparable);
end;

(*
    Merges the specified subarrays for Merge sort.
 *)
class procedure _java.merge(var arr, aux: array of Object_; left, right: longInt; c: Comparator);
var
  middleIndex, leftIndex, rightIndex, auxIndex: longInt;
begin
  middleIndex := (left + right) div 2;
  leftIndex := left;
  rightIndex := middleIndex + 1;
  auxIndex := left;

  // moving elements to the auxilliary array until one of the indices leaves the specified boundary
  while (leftIndex &lt;= middleIndex) and (rightIndex &lt;= right) do begin
    // comparing the objects and setting the less one as the auxilliary array element
    if c.compare(arr[leftIndex], arr[rightIndex]) &lt;= 0 then begin
      aux[auxIndex] := arr[leftIndex];
      inc(leftIndex);
    end
    else begin
      aux[auxIndex] := arr[rightIndex];
      inc(rightIndex);
    end;

    // incrementing the auxilliary array index
    inc(auxIndex);
  end;

  // setting the rest of the left subarray
  while leftIndex &lt;= middleIndex do begin
    aux[auxIndex] := arr[leftIndex];
    inc(leftIndex);
    inc(auxIndex);
  end;

  // setting the rest of the right subarray
  while rightIndex &lt;= right do begin
    aux[auxIndex] := arr[rightIndex];
    inc(rightIndex);
    inc(auxIndex);
  end;
end;

(*
    Implements the recursive Mergesort stable sorting algorithm for the object reference arrays.
 *)
class procedure _java.mergeSort(var arr, aux: array of Object_; left, right: longInt; c: Comparator);
var
  i, middleIndex: longInt;
begin
  if left = right then begin
    exit;
  end;

  // setting the middle index for splitting the specified array into subarrays
  middleIndex := (left + right) div 2;

  // sorting the left subarray recursively
  mergeSort(arr, aux, left, middleIndex, c);
  // sorting the right subarray recursively
  mergeSort(arr, aux, middleIndex + 1, right, c);
  // merging the sorted subarrays back into one array
  merge(arr, aux, left, right, c);

  // setting the values from the auxilliary array into original array
  for i := left to right do begin
    arr[i] := aux[i];
  end;
end;

(*
    Implements the recursive Quicksort unstable sorting algorithm for the primitive value arrays.
 *)
class procedure _java.quickSort(x: pointer; left, right, size: longInt; c: CompareFunction);
var
  i, j: longInt;
  tmpI, tmpJ, pivot: pointer;
  tmp: pointer;
begin
  i := left;
  j := right;
  // setting the pivot
  pivot := x + ((left + right) div 2) * size;

  // splitting the specified array into subarrays by the pivot
  repeat
    // comparing the values with the pivot to found the left boundary
    while c(pivot, x + i * size) &gt; 0 do begin
      i := i + 1;
    end;

    // comparing the values with the pivot to found the right boundary
    while c(pivot, x + j * size) &lt; 0 do begin
      j := j - 1;
    end;

    (* moving the elements so all the values to the left from the pivot are less
    and all the values to the right from the pivot are greater *)
    if i &lt;= j then begin
      tmp := getmem(size);
      tmpI := x + i * size;
      tmpJ := x + j * size;

      move(tmpI^, tmp^, size);
      move(tmpJ^, tmpI^, size);
      move(tmp^, tmpJ^, size);

      j := j - 1;
      i := i + 1;
    end;
  until i &gt; j;

  // sorting the left subarray recursively
  if left &lt; j then begin
    quickSort(x, left, j, size, c);
  end;

  // sorting the right subarray recursively
  if i &lt; right then begin
    quickSort(x, i, right, size, c);
  end;
end;

(*
    Converts the array of characters to the standard string.
 *)
class function PrintStream.charArrayToString(s: array of ansiChar): ansiString;
var
  str: ansiString;
  i: longInt;
begin
  str := '';

  // concatenating all the characters from the array to the string
  for i := low(s) to high(s) do begin
    str := str + s[i];
  end;

  charArrayToString := str;
end;

(**
 * Prints a boolean value.
 *
 * @param b The boolean to be printed
 *)
procedure PrintStream.print(b: boolean);
begin
  if b then begin
    write('true');
  end
  else begin
    write('false');
  end;
end;

(**
 * Prints a character.
 *
 * @param c The char to be printed
 *)
procedure PrintStream.print(c: ansiChar);
begin
  write(c);
end;

(**
 * Prints an array of characters.
 *
 * @param s The array of chars to be printed
 *)
procedure PrintStream.print(s: array of ansiChar);
begin
  write(charArrayToString(s));
end;

(**
 * Prints a double-precision floating-point number.
 *
 * @param d The double to be printed
 *)
procedure PrintStream.print(d: double);
begin
  write(d);
end;

(**
 * Prints a floating-point number.
 *
 * @param f The float to be printed
 *)
procedure PrintStream.print(f: single);
begin
  write(f);
end;

(**
 * Prints an integer.
 *
 * @param i The int to be printed
 *)
procedure PrintStream.print(i: longInt);
begin
  write(i);
end;

(**
 * Prints a long integer.
 *
 * @param l The long to be printed
 *)
procedure PrintStream.print(l: int64);
begin
  write(l);
end;

(**
 * Prints an object.
 *
 * @param obj The Object to be printed
 *)
procedure PrintStream.print(obj: Object_);
begin
  write(obj.toString_().strProperty);
end;

(**
 * Prints a string.
 *
 * @param s The String to be printed
 *)
procedure PrintStream.print(s: String_);
begin
  write(s.strProperty);
end;

(**
 * Terminates the current line by writing the line separator string.
 *)
procedure PrintStream.println();
begin
  writeLn;
end;

(**
 * Prints a boolean and then terminate the line.
 *
 * @param x The boolean to be printed
 *)
procedure PrintStream.println(x: boolean);
begin
  if x then begin
    writeLn('true');
  end
  else begin
    writeLn('false');
  end;
end;

(**
 * Prints a character and then terminate the line.
 *
 * @param x The char to be printed.
 *)
procedure PrintStream.println(x: ansiChar);
begin
  writeLn(x);
end;

(**
 * Prints an array of characters and then terminate the line.
 *
 * @param x an array of chars to print.
 *)
procedure PrintStream.println(x: array of ansiChar);
begin
  writeLn(charArrayToString(x));
end;

(**
 * Prints a double and then terminate the line.
 *
 * @param x The double to be printed.
 *)
procedure PrintStream.println(x: double);
begin
  writeLn(x);
end;

(**
 * Prints a float and then terminate the line.
 *
 * @param x The float to be printed.
 *)
procedure PrintStream.println(x: single);
begin
  writeLn(x);
end;

(**
 * Prints an integer and then terminate the line.
 *
 * @param x The int to be printed.
 *)
procedure PrintStream.println(x: longInt);
begin
  writeLn(x);
end;

(**
 * Prints a long and then terminate the line.
 *
 * @param x The long to be printed.
 *)
procedure PrintStream.println(x: int64);
begin
  writeLn(x);
end;

(**
 * Prints an Object and then terminate the line.
 *
 * @param x The Object to be printed.
 *)
procedure PrintStream.println(x: Object_);
begin
  writeLn(x.toString_().strProperty);
end;

(**
 * Prints a String and then terminate the line.
 *
 * @param x The String to be printed.
 *)
procedure PrintStream.println(x: String_);
begin
  writeLn(x.strProperty);
end;

begin
  System_.in_ := InputStream.create();
  System_.out_ := PrintStream.create();
end.

</code>

</codes>
