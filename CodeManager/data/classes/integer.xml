<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef INTEGER_INCLUDED
#define	INTEGER_INCLUDED

#include "String_.h"
#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;

/**
 * The Integer struct wraps a value of the type int32_t, representing an integer value.
 *
 * @author Petr Kozler (A13B0359P)
 */

/**
 * A constant holding the maximum value an int can have, 2^31-1.
 */
#define Integer_MAX_VALUE 2147483647
/**
 * A constant holding the minimum value an int can have, -2^31.
 */
#define Integer_MIN_VALUE -2147483648

typedef struct {
    int32_t v;
} Integer;

Integer *new_Integer(int32_t value);
int32_t intValue(Integer *ptr);
int32_t compareToI(Integer *ptr, Integer *anotherInteger);
int32_t Integer_compare(int32_t x, int32_t y);
bool equalsI(Integer *ptr, Integer *obj);
String *toStringI(Integer *ptr);
String *Integer_toString(int32_t i);
int32_t Integer_parseInt(String *s);

#endif	/* INTEGER_INCLUDED */


#include "Integer.h"

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

// maximum possible string length of the int32_t value used as the string buffer size
#define _MAX_INT_STRLEN 11

/**
 * Constructs a newly allocated Integer structure that represents the specified
 * int value.
 *
 * @param value the value to be represented by the Integer structure.
 */
Integer *new_Integer(int32_t value) {
    Integer *i = malloc(sizeof(Integer));
    i-&gt;v = value;

    return i;
}

/**
 * Returns the value of the specified Integer as an int.
 *
 * @param ptr The allocated structure
 * @return the numeric value represented by the specified structure after conversion to
 * type int.
 */
int32_t intValue(Integer *ptr) {
    return ptr-&gt;v;
}

/**
 * Compares two Integer structures numerically.
 *
 * @param ptr The allocated structure
 * @param anotherInteger the Integer to be compared.
 * @return the value 0 if the first Integer is equal to the second Integer; a
 * value less than 0 if the first Integer is numerically less than the second
 * Integer; and a value greater than 0 if the first Integer is numerically
 * greater than the second Integer (signed comparison).
 */
int32_t compareToI(Integer *ptr, Integer *anotherInteger) {
    return Integer_compare(ptr-&gt;v, anotherInteger-&gt;v);
}

/**
 * Compares two int values numerically.
 *
 * @param x the first int to compare
 * @param y the second int to compare
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
 * &gt; y
 */
int32_t Integer_compare(int32_t x, int32_t y) {
    // 1 if x is greater, 0 if x equals y, -1 otherwise
    return (x &lt; y) ? -1 : ((x == y) ? 0 : 1);
}

/**
 * Compares the one structure to the other.
 *
 * @param ptr The allocated structure
 * @param obj the structure to compare with.
 * @return true if the structures are the same; false otherwise.
 */
bool equalsI(Integer *ptr, Integer *obj) {
    // testing another object reference for a NULL value
    if (ptr == NULL || obj == NULL) {
        return false;
    }

    // testing object class equality
    if (sizeof(*ptr) != sizeof(*obj)) {
        return false;
    }

    // testing object fields equality
    return (ptr-&gt;v == obj-&gt;v);
}

/**
 * Returns a String structure representing the specified Integer's value.
 *
 * @param ptr The allocated structure
 * @return a string representation of the value of the specified structure in base 10.
 */
String *toStringI(Integer *ptr) {
    return Integer_toString(ptr-&gt;v);
}

/**
 * Returns a String structure representing the specified integer.
 *
 * @param i an integer to be converted.
 * @return a string representation of the argument in base 10.
 */
String *Integer_toString(int32_t i) {
    char *str = malloc(_MAX_INT_STRLEN + 1);
    char buf[_MAX_INT_STRLEN];

    str[0] = '\0';
    // printing the string representation to the buffer
    sprintf(buf, "%d", i);
    // creating the null-terminated string from the buffer
    strcat(str, buf);
    String *s = new_String(str);
    free(str);
    
    return s;
}

/**
 * Parses the string argument as a signed decimal integer.
 *
 * @param s a String containing the int representation to be parsed
 * @return the integer value represented by the argument in decimal.
 */
int32_t Integer_parseInt(String *s) {
    String *str = trim(s);
    int32_t value = strtol(str-&gt;s, NULL, 10);
    free(str);
    
    return value;
}
</code>
<code lang="C++">#ifndef INTEGER_INCLUDED
#define	INTEGER_INCLUDED

#include "String_.h"
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;cstdint&gt;

/**
 * The Integer class wraps a value of the primitive type int32_t (representing an int value) in an object.
 *
 * @author Petr Kozler (A13B0359P)
 */
class Integer : public Comparable {
    // an inner value
    int32_t v;
public:
    /**
     * A constant holding the maximum value an int can have, 2^31-1.
     */
    static const int32_t MIN_VALUE;
    
    /**
     * A constant holding the minimum value an int can have, -2^31.
     */
    static const int32_t MAX_VALUE;
    
    Integer(int32_t value);
    int32_t intValue();
    int32_t compareTo(Object *anotherInteger);
    static int32_t compare(int32_t x, int32_t y);
    bool equals(Object *obj);
    String *toString();
    static String *toString(int32_t i);
    static int32_t parseInt(String *s);
};

#endif	// INTEGER_INCLUDED


#include "Integer.h"

#include &lt;string&gt;
#include &lt;cstdlib&gt;

const int32_t Integer::MAX_VALUE = 2147483647;
const int32_t Integer::MIN_VALUE = -2147483648;

/**
 * Constructs a newly allocated Integer object that represents the specified
 * int value.
 *
 * @param value the value to be represented by the Integer object.
 */
Integer::Integer(int32_t value) {
    v = value;
}

/**
 * Returns the value of this Integer as an int.
 *
 * @return the numeric value represented by this object after conversion to
 * type int.
 */
int32_t Integer::intValue() {
    return v;
}

/**
 * Compares two Integer objects numerically.
 *
 * @param anotherInteger the Integer to be compared.
 * @return the value 0 if this Integer is equal to the argument Integer; a
 * value less than 0 if this Integer is numerically less than the argument
 * Integer; and a value greater than 0 if this Integer is numerically
 * greater than the argument Integer (signed comparison).
 */
int32_t Integer::compareTo(Object *anotherInteger) {
    return Integer::compare(v, ((Integer *)anotherInteger)-&gt;v);
}

/**
 * Compares two int values numerically.
 *
 * @param x the first int to compare
 * @param y the second int to compare
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
 * &gt; y
 */
int32_t Integer::compare(int32_t x, int32_t y) {
    // 1 if x is greater, 0 if x equals y, -1 otherwise
    return (x &lt; y) ? -1 : ((x == y) ? 0 : 1);
}

/**
 * Compares this object to the specified object.
 *
 * @param obj the object to compare with.
 * @return true if the objects are the same; false otherwise.
 */
bool Integer::equals(Object *obj) {
    // testing another object reference for a NULL value
    if (obj == nullptr) {
        return false;
    }

    // testing object class equality
    if (sizeof(this) != sizeof(*obj)) {
        return false;
    }

    // testing object fields equality
    return (v == ((Integer *)obj)-&gt;v);
}

/**
 * Returns a String object representing this Integer's value.
 * 
 * @return a string representation of the value of this object in base 10.
 */
String *Integer::toString() {
    return toString(v);
}

/**
 * Returns a String object representing the specified integer.
 *
 * @param i an integer to be converted.
 * @return a string representation of the argument in base 10.
 */
String *Integer::toString(int32_t i) {
    return new String(std::to_string(i));
}

/**
 * Parses the string argument as a signed decimal integer.
 *
 * @param s a String containing the int representation to be parsed
 * @return the integer value represented by the argument in decimal.
 */
int32_t Integer::parseInt(String *s) {
    String *str = s-&gt;trim();
    int32_t value = strtol(str-&gt;_s().c_str(), nullptr, 10);
    delete str;
    
    return value;
}
</code>
<code lang="C#">ï»¿using System;

namespace JavaClasses
{

    /// &lt;summary&gt;
    /// The Integer class wraps a value of the primitive type int in an object.
    /// &lt;/summary&gt;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;
    public class Integer : Comparable
    {

        /// &lt;summary&gt;
        /// A constant holding the maximum value an int can have, 2^31-1.
        /// &lt;/summary&gt;
        public const int MAX_VALUE = 2147483647;

        /// &lt;summary&gt;
        /// A constant holding the minimum value an int can have, -2^31.
        /// &lt;/summary&gt;
        public const int MIN_VALUE = -2147483648;

        // an inner value
        private int v;

        /// &lt;summary&gt;
        /// Constructs a newly allocated Integer object that represents the specified
        /// int value.
        /// &lt;/summary&gt;
        /// &lt;param name="value"&gt;the value to be represented by the Integer object.
        /// &lt;/param&gt;
        public Integer(int value)
        {
            v = value;
        }

        /// &lt;summary&gt;
        /// Returns the value of this Integer as an int.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the numeric value represented by this object after conversion to
        /// type int.
        /// &lt;/returns&gt;
        public int intValue()
        {
            return v;
        }

        /// &lt;summary&gt;
        /// Compares two Integer objects numerically.
        /// &lt;/summary&gt;
        /// &lt;param name="anotherInteger"&gt;the Integer to be compared.
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if this Integer is equal to the argument Integer; a
        /// value less than 0 if this Integer is numerically less than the argument
        /// Integer; and a value greater than 0 if this Integer is numerically
        /// greater than the argument Integer (signed comparison).
        /// &lt;/returns&gt;
        public override int compareTo(Object anotherInteger)
        {
            return compare(v, (anotherInteger as Integer).v);
        }

        /// &lt;summary&gt;
        /// Compares two int values numerically.
        /// &lt;/summary&gt;
        /// &lt;param name="x"&gt;the first int to compare
        /// &lt;/param&gt;&lt;param name="y"&gt;the second int to compare
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
        /// &gt; y
        /// &lt;/returns&gt;
        public static int compare(int x, int y)
        {
            // 1 if x is greater, 0 if x equals y, -1 otherwise
            return (x &lt; y) ? -1 : ((x == y) ? 0 : 1);
        }

        /// &lt;summary&gt;
        /// Compares this object to the specified object.
        /// &lt;/summary&gt;
        /// &lt;param name="obj"&gt;the object to compare with.
        /// &lt;/param&gt;&lt;returns&gt;true if the objects are the same; false otherwise.
        /// &lt;/returns&gt;
        public override bool equals(Object obj)
        {
            // testing another object reference for a NULL value
            if (obj == null)
            {
                return false;
            }

            // testing object class equality
            if (GetType() != obj.GetType())
            {
                return false;
            }

            // testing object fields equality
            return v.Equals((obj as Integer).v);
        }

        /// &lt;summary&gt;
        /// Returns a String object representing this Integer's value.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;a string representation of the value of this object in base 10.
        /// &lt;/returns&gt;
        public override String toString()
        {
            return Integer.toString(v);
        }

        /// &lt;summary&gt;
        /// Returns a String object representing the specified integer.
        /// &lt;/summary&gt;
        /// &lt;param name="i"&gt;an integer to be converted.
        /// &lt;/param&gt;&lt;returns&gt;a string representation of the argument in base 10.
        /// &lt;/returns&gt;
        public static String toString(int i)
        {
            return new String(i.ToString());
        }

        /// &lt;summary&gt;
        /// Parses the string argument as a signed decimal integer.
        /// &lt;/summary&gt;
        /// &lt;param name="s"&gt;a String containing the int representation to be parsed
        /// &lt;/param&gt;&lt;returns&gt;the integer value represented by the argument in decimal.
        /// &lt;/returns&gt;
        public static int parseInt(String s)
        {
            return int.Parse(s.ToString());
        }
        
        public static implicit operator Integer(int original)
        {
            return new Integer(original);
        }
        
    }

}
</code>
<code lang="Free Pascal">unit IntegerUnit;

{$mode objfpc}{$H+}

interface

uses
  SysUtils, StringUnit;

type
  (**
   * The Integer class wraps a value of the primitive type longInt (representing an int value) in an object.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  Integer_ = class(Comparable)
    private
      var
        // an inner value
        v: longInt;
    public
      const
          (**
           * A constant holding the maximum value an int can have, 2^31-1.
           *)
           MAX_VALUE = 2147483647;
          (**
           * A constant holding the minimum value an int can have, -2^31.
           *)
           MIN_VALUE = -2147483648;
      constructor create(value: longInt);
      function intValue() : longInt;
      function compareTo(anotherInteger: Object_) : longInt; override;
      class function compare(x, y: longInt) : longInt;
      function equals_(obj: Object_) : boolean; override;
      function toString_() : String_; override;
      class function toString_(i: longInt) : String_;
      class function parseInt(s: String_) : longInt;
  end;

implementation

(**
 * Constructs a newly allocated Integer object that represents the specified
 * int value.
 *
 * @param value the value to be represented by the Integer object.
 *)
constructor Integer_.create(value: longInt);
begin
  v := value;
end;

(**
 * Returns the value of this Integer as an int.
 *
 * @return the numeric value represented by this object after conversion to
 * type int.
 *)
function Integer_.intValue() : longInt;
begin
  intValue := v;
end;

(**
 * Compares two Integer objects numerically.
 *
 * @param anotherInteger the Integer to be compared.
 * @return the value 0 if this Integer is equal to the argument Integer; a
 * value less than 0 if this Integer is numerically less than the argument
 * Integer; and a value greater than 0 if this Integer is numerically
 * greater than the argument Integer (signed comparison).
 *)
function Integer_.compareTo(anotherInteger: Object_) : longInt;
begin
  compareTo := compare(v, (anotherInteger as Integer_).v);
end;

(**
 * Compares two int values numerically.
 *
 * @param x the first int to compare
 * @param y the second int to compare
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
 * &gt; y
 *)
class function Integer_.compare(x, y: longInt) : longInt;
begin
  // 1 if x is greater, 0 if x equals y, -1 otherwise
  if x &lt; y then begin
     compare := -1;
  end
  else if x = y then begin
     compare := 0;
  end
  else begin
    compare := 1;
  end;
end;

(**
 * Compares this object to the specified object.
 *
 * @param obj the object to compare with.
 * @return true if the objects are the same; false otherwise.
 *)
function Integer_.equals_(obj: Object_) : boolean;
begin
  // testing another object reference for a NULL value
  if obj = nil then begin
    exit(false);
  end;

  // testing object class equality
  if typeOf(self) &lt;&gt; typeOf(obj) then begin
    exit(false);
  end;

  // testing object fields equality
  equals_ := v = (obj as Integer_).v;
end;

(**
 * Returns a String object representing this Integer's value.
 *
 * @return a string representation of the value of this object in base 10.
 *)
function Integer_.toString_() : String_;
begin
  toString_ := Integer_.toString_(v);
end;

(**
 * Returns a String object representing the specified integer.
 *
 * @param i an integer to be converted.
 * @return a string representation of the argument in base 10.
 *)
class function Integer_.toString_(i: longInt) : String_;
begin
  toString_ := String_.create(IntToStr(i));
end;

(**
 * Parses the string argument as a signed decimal integer.
 *
 * @param s a String containing the int representation to be parsed
 * @return the integer value represented by the argument in decimal.
 *)
class function Integer_.parseInt(s: String_) : longInt;
begin
  parseInt := strToInt(trim(s.strProperty));
end;

operator := (original: longInt) s: Integer_;
begin
  s.create(original);
end;

end.

</code>

</codes>
