<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef LIST_INCLUDED&#13;
#define LIST_INCLUDED&#13;
&#13;
#include &lt;stdbool.h&gt;&#13;
#include &lt;stdint.h&gt;&#13;
&#13;
/**&#13;
 * Functions, which are common for all types of lists.&#13;
 *&#13;
 * @author Petr Kozler (A13B0359P)&#13;
 */&#13;
&#13;
bool equalsList(void *ptr, int32_t (*sizePtr)(void *), void *(*getPtr)(void *, int32_t), &#13;
        void *o, int32_t (*sizeO)(void *), void *(*getO)(void *, int32_t), &#13;
        bool (*equals)(const void *, const void *));&#13;
&#13;
#endif	/* LIST_INCLUDED */&#13;
&#13;
&#13;
&#13;
#include "List.h"&#13;
&#13;
#include &lt;stddef.h&gt;&#13;
&#13;
/**&#13;
 * Compares the one specified list with another for equality.&#13;
 *&#13;
 * @param ptr The one list to be compared for equality&#13;
 * @param sizePtr The list size function&#13;
 * @param getPtr The list get function&#13;
 * @param o The other list to be compared for equality&#13;
 * @param sizeO The other list size function&#13;
 * @param getO The other list get function&#13;
 * @param equals The list element equals function&#13;
 * @return true if the one specified list is equal to the other&#13;
 */&#13;
bool equalsList(void *ptr, int32_t (*sizePtr)(void *), void *(*getPtr)(void *, int32_t), &#13;
        void *o, int32_t (*sizeO)(void *), void *(*getO)(void *, int32_t), &#13;
        bool (*equals)(const void *, const void *)) {&#13;
    if (ptr == o) {&#13;
        return true;&#13;
    }&#13;
    &#13;
    if (o == NULL) {&#13;
        return false;&#13;
    }&#13;
    &#13;
    int length = sizePtr(ptr);&#13;
    &#13;
    if (sizeO(o) != length) {&#13;
        return false;&#13;
    }&#13;
    &#13;
    int i;&#13;
    for (i = 0; i &lt; length; i++) {&#13;
        void *o1 = getPtr(ptr, i);&#13;
        void *o2 = getO(o, i);&#13;
        bool e = o1 == NULL ? o2 == NULL : equals(o1, o2);&#13;
        &#13;
        if (!e) {&#13;
            return false;&#13;
        }&#13;
    }&#13;
    &#13;
    return true;&#13;
}</code>
<code lang="C++">#ifndef LIST_INCLUDED&#13;
#define LIST_INCLUDED&#13;
&#13;
#include "String_.h"&#13;
#include &lt;string&gt;&#13;
&#13;
/**&#13;
 * An ordered collection (also known as a sequence).&#13;
 *&#13;
 * @param E the type of elements in this list&#13;
 * @author Petr Kozler (A13B0359P)&#13;
 */&#13;
template &lt;class E&gt; class List : public Object {&#13;
public:&#13;
    virtual bool add(E *e) = 0;&#13;
    virtual void add(int32_t index, E *element) = 0;&#13;
    bool equals(Object *o);&#13;
    virtual E *get(int32_t index) = 0;&#13;
    virtual E *set(int32_t index, E *element) = 0;&#13;
    virtual E *remove(int32_t index) = 0;&#13;
    virtual int32_t size() = 0;&#13;
    virtual bool isEmpty();&#13;
    virtual void clear() = 0;&#13;
    virtual String *toString() = 0;&#13;
};&#13;
&#13;
/**&#13;
 * Compares the specified object with this list for equality.&#13;
 *&#13;
 * @param o the object to be compared for equality with this list&#13;
 * @return true if the specified object is equal to this list&#13;
 */&#13;
template &lt;class E&gt; bool List&lt;E&gt;::equals(Object *o) {&#13;
    if (this == o) {&#13;
        return true;&#13;
    }&#13;
&#13;
    if (o == nullptr) {&#13;
        return false;&#13;
    }&#13;
&#13;
    List&lt;E&gt; *other = (List&lt;E&gt; *) o;&#13;
    int length = size();&#13;
&#13;
    if (other-&gt;size() != length) {&#13;
        return false;&#13;
    }&#13;
&#13;
    int i;&#13;
    for (i = 0; i &lt; length; i++) {&#13;
        Object *o1 = (Object *) get(i);&#13;
        Object *o2 = (Object *) other-&gt;get(i);&#13;
        bool equals = o1 == nullptr ? o2 == nullptr : o1-&gt;equals(o2);&#13;
&#13;
        if (!equals) {&#13;
            return false;&#13;
        }&#13;
    }&#13;
&#13;
    return true;&#13;
}&#13;
&#13;
/**&#13;
 * Returns true if this list contains no elements.&#13;
 *&#13;
 * @return true if this list contains no elements&#13;
 */&#13;
template &lt;class E&gt; bool List&lt;E&gt;::isEmpty() {&#13;
    return size() == 0;&#13;
}&#13;
&#13;
#endif	// LIST_INCLUDED&#13;
&#13;
&#13;
#include "List.h"&#13;
// for future purposes</code>
<code lang="C#">ï»¿namespace JavaClasses&#13;
{&#13;
&#13;
    /// &lt;summary&gt;&#13;
    /// An ordered collection (also known as a sequence).&#13;
    /// &lt;/summary&gt;&#13;
    /// &lt;typeparam name="E"&gt;the type of elements in this list&lt;/typeparam&gt;&#13;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;&#13;
    public abstract class List&lt;E&gt; : Object where E : Object&#13;
    {&#13;
        &#13;
        public abstract bool add(E e);&#13;
        &#13;
        public abstract void add(int index, E element);&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Compares the specified object with this list for equality.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="o"&gt;the object to be compared for equality with this list&lt;/param&gt;&#13;
        /// &lt;returns&gt;true if the specified object is equal to this list&lt;/returns&gt;&#13;
        public override bool equals(Object o)&#13;
        {&#13;
            // comparing references&#13;
            if (this == o)&#13;
            {&#13;
                return true;&#13;
            }&#13;
&#13;
            // testing the references for a NULL value&#13;
            if (o == null)&#13;
            {&#13;
                return false;&#13;
            }&#13;
&#13;
            List&lt;E&gt; other = o as List&lt;E&gt;;&#13;
            int length = size();&#13;
&#13;
            // comparing the list sizes&#13;
            if (other.size() != length)&#13;
            {&#13;
                return false;&#13;
            }&#13;
&#13;
            // comparing corresponding elements of lists&#13;
            for (int i = 0; i &lt; length; i++)&#13;
            {&#13;
                E o1 = get(i);&#13;
                E o2 = other.get(i);&#13;
                bool equals = o1 == null ? o2 == null : o1.Equals(o2);&#13;
&#13;
                if (!equals)&#13;
                {&#13;
                    return false;&#13;
                }&#13;
            }&#13;
&#13;
            return true;&#13;
        }&#13;
        &#13;
        public abstract E get(int index);&#13;
        &#13;
        public abstract E set(int index, E element);&#13;
        &#13;
        public abstract E remove(int index);&#13;
        &#13;
        public abstract int size();&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns true if this list contains no elements.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;true if this list contains no elements&#13;
        /// &lt;/returns&gt;&#13;
        public virtual bool isEmpty()&#13;
        {&#13;
            return size() == 0;&#13;
        }&#13;
        &#13;
        public abstract void clear();&#13;
&#13;
    }&#13;
&#13;
}&#13;
</code>
<code lang="Free Pascal">unit ListUnit;&#13;
&#13;
{$mode objfpc}{$H+}&#13;
&#13;
interface&#13;
&#13;
uses&#13;
  StringUnit;&#13;
&#13;
type&#13;
  (**&#13;
   * An ordered collection (also known as a sequence).&#13;
   *&#13;
   * @param E the type of elements in this list&#13;
   * @author Petr Kozler (A13B0359P)&#13;
   *)&#13;
  List = class(Object_)&#13;
    public&#13;
      function add(e: Object_) : boolean; virtual; abstract;&#13;
      procedure add(index: longInt; element: Object_); virtual; abstract;&#13;
      function equals_(o: Object_) : boolean; override;&#13;
      function get(index: longInt) : Object_; virtual; abstract;&#13;
      function set_(index: longInt; element: Object_) : Object_; virtual; abstract;&#13;
      function remove(index: longInt) : Object_; virtual; abstract;&#13;
      function size() : longInt; virtual; abstract;&#13;
      function isEmpty() : boolean; virtual;&#13;
      procedure clear(); virtual; abstract;&#13;
      function toString_() : String_; virtual; abstract;&#13;
  end;&#13;
&#13;
implementation&#13;
&#13;
(**&#13;
 * Compares the specified object with this list for equality.&#13;
 *&#13;
 * @param o the object to be compared for equality with this list&#13;
 * @return true if the specified object is equal to this list&#13;
 *)&#13;
function List.equals_(o: Object_) : boolean;&#13;
var&#13;
  other: List;&#13;
  o1, o2: Object_;&#13;
  length, i: longInt;&#13;
  e: boolean;&#13;
begin&#13;
  if self = o then begin&#13;
    exit(true);&#13;
  end;&#13;
&#13;
  if o = nil then begin&#13;
    exit(false);&#13;
  end;&#13;
&#13;
  other := List(o);&#13;
  length := size();&#13;
&#13;
  if other.size() &lt;&gt; length then begin&#13;
    exit(false);&#13;
  end;&#13;
&#13;
  for i := 0 to length - 1 do begin&#13;
    o1 := get(i);&#13;
    o2 := other.get(i);&#13;
&#13;
    if o1 = nil then begin&#13;
      e := o2 = nil;&#13;
    end&#13;
    else begin&#13;
      e := o1.equals_(o2);&#13;
    end;&#13;
  end;&#13;
&#13;
end;&#13;
&#13;
(**&#13;
 * Returns true if this list contains no elements.&#13;
 *&#13;
 * @return true if this list contains no elements&#13;
 *)&#13;
function List.isEmpty() : boolean;&#13;
begin&#13;
  isEmpty := size() = 0;&#13;
end;&#13;
&#13;
end.&#13;
&#13;
</code>
</codes>
