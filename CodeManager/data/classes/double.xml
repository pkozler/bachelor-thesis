<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef DOUBLE_INCLUDED
#define DOUBLE_INCLUDED

#include "String_.h"
#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;

/**
 * The Double struct wraps a value of the type double.
 *
 * @author Petr Kozler (A13B0359P)
 */

/**
 * A constant holding the positive infinity of type double.
 */
#define Double_POSITIVE_INFINITY 1.0 / 0.0
/**
 * A constant holding the negative infinity of type double.
 */
#define Double_NEGATIVE_INFINITY -1.0 / 0.0
/**
 * A constant holding a Not-a-Number (NaN) value of type double.
 */
#define Double_NaN 0.0 / 0.0
/**
 * A constant holding the largest positive finite value of type double, (2-2^-52)·2^1023.
 */
#define Double_MAX_VALUE 1.7976931348623157e+308
/**
 * A constant holding the smallest positive nonzero value of type double, 2^-1074.
 */
#define Double_MIN_VALUE 4.9e-324
/**
 * Maximum exponent a finite double variable may have.
 */
#define Double_MAX_EXPONENT 1023
/**
 * Minimum exponent a normalized double variable may have.
 */
#define Double_MIN_EXPONENT -1022
/**
 * A constant holding the smallest positive normal value of type double, 2^-1022.
 */
#define Double_MIN_NORMAL 2.2250738585072014e-308

/*
    DoubleInt64 union provides the ability to set the double value
    and get the int64_t value with the same binary representation.
*/
typedef union {
    double val;
    int64_t bits;
} DoubleInt64;

typedef struct {
    double v;
} Double;

Double *new_Double(double value);
double doubleValue(Double *ptr);
int32_t compareToD(Double *ptr, Double *anotherDouble);
int32_t Double_compare(double d1, double d2);
bool equalsD(Double *ptr, Double *obj);
String *toStringD(Double *ptr);
String *Double_toString(double d);
double Double_parseDouble(String *s);

#endif /* DOUBLE_INCLUDED */


#include "Double.h"

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include "math.h"

// maximum possible string length of the double value used as the string buffer size
#define _MAX_DOUBLE_STRLEN 13

/**
 * Constructs a newly allocated Double structure that represents the
 * double argument.
 *
 * @param value the value to be represented by the Double.
 */
Double *new_Double(double value) {
    Double *d = malloc(sizeof (Double));
    d-&gt;v = value;

    return d;
}

/*
    returns the "binary representation" of negative zero value for comparison purposes
*/
long _getNegativeZeroDoubleBits() {
    DoubleInt64 bitConverter;
    bitConverter.val = -0.0;

    return bitConverter.bits;
}

/**
 * Returns the double value of the specified Double structure.
 *
 * @param ptr The allocated structure
 * @return the double value represented by the specified structure
 */
double doubleValue(Double *ptr) {
    return ptr-&gt;v;
}

/**
 * Compares two Double structures numerically.
 *
 * @param ptr The allocated structure
 * @param anotherDouble the Double to be compared.
 * @return the value 0 if anotherDouble is numerically equal to the first Double;
 * a value less than 0 if the first Double is numerically less than
 * anotherDouble; and a value greater than 0 if the first Double is numerically
 * greater than anotherDouble.
 */
int32_t compareToD(Double *ptr, Double *anotherDouble) {
    return Double_compare(ptr-&gt;v, anotherDouble-&gt;v);
}

/**
 * Compares the two specified double values.
 *
 * @param d1 the first double to compare
 * @param d2 the second double to compare
 * @return the value 0 if d1 is numerically equal to d2; a value less than 0
 * if d1 is numerically less than d2; and a value greater than 0 if d1 is
 * numerically greater than d2.
 */
int32_t Double_compare(double d1, double d2) {
    /* testing for NaN values (a NaN value is considered greated
       than any other, including positive infinity,
       and two NaN values are considered equal) */
    if (isnan(d1)) {
        if (isnan(d2)) {
            return 0;
        }

        return 1;
    }

    if (isnan(d2)) {
        return -1;
    }

    DoubleInt64 vBits, v2Bits;
    vBits.val = d1;
    v2Bits.val = d2;
    int64_t negativeZeroBits = _getNegativeZeroDoubleBits();

    /* testing for +0.0 and -0.0 value (a positive zero
       is considered greater than a negative zero) */
    if (vBits.bits == 0
            &amp;&amp; v2Bits.bits == negativeZeroBits) {
        return 1;
    }

    if (vBits.bits == negativeZeroBits
            &amp;&amp; v2Bits.bits == 0) {
        return -1;
    }

    /* testing for other values and returning
       1 if first value is greater, 0 if first value 
       equals second value, -1 otherwise */
    return (d1 &gt; d2 ? 1 : d1 &lt; d2 ? -1 : 0);
}

/**
 * Compares the one structure against the other.
 *
 * @param ptr The allocated structure
 * @param obj the structure to compare with.
 * @return true if the structures are the same; false otherwise.
 */
bool equalsD(Double *ptr, Double *obj) {
    // testing another object reference for a NULL value
    if (ptr == NULL || obj == NULL) {
        return false;
    }

    // testing object class equality
    if (sizeof(*ptr) != sizeof(*obj)) {
        return false;
    }

    double v = ptr-&gt;v;
    double v2 = obj-&gt;v;

    // testing for NaN values (two NaN values are considered equal)
    if (isnan(v) &amp;&amp; isnan(v2)) {
        return true;
    }

    DoubleInt64 vBits, v2Bits;
    vBits.val = v;
    v2Bits.val = v2;
    int64_t negativeZeroBits = _getNegativeZeroDoubleBits();

    // testing for zero values (+0.0 is considered greater than -0.0)
    if (vBits.bits == negativeZeroBits) {
        return v2Bits.bits == negativeZeroBits;
    }

    if (v2Bits.bits == negativeZeroBits) {
        return vBits.bits == negativeZeroBits;
    }

    // testing other values
    return (v == v2);
}

/**
 * Returns a string representation of the specified Double structure.
 *
 * @param ptr The allocated structure
 * @return a String representation of the specified structure.
 */
String *toStringD(Double *ptr) {
    return Double_toString(ptr-&gt;v);
}

/**
 * Returns a string representation of the double argument.
 *
 * @param d the double to be converted.
 * @return a string representation of the argument.
 */
String *Double_toString(double d) {
    char *str = malloc(_MAX_DOUBLE_STRLEN + 1);
    char buf[_MAX_DOUBLE_STRLEN];

    str[0] = '\0';
    // printing the string representation to the buffer
    sprintf(buf, "%lG", d);
    // creating the null-terminated string from the buffer
    strcat(str, buf);
    String *s = new_String(str);
    free(str);
    
    return s;
}

/**
 * Returns a new double initialized to the value represented by the
 * specified String, as performed by the "valueOf" function for struct Double.
 *
 * @param s the string to be parsed.
 * @return the double value represented by the string argument.
 */
double Double_parseDouble(String *s) {
    String *str = trim(s);
    double value = strtod(str-&gt;s, NULL);
    
    // negative zero handling
    String *sign = new_String("-");
    
    if (value == 0 &amp;&amp; startsWith(str, sign)) {
        value = -0.0;
    }
    
    free(str);
    free(sign);

    return value;
}
</code>
<code lang="C++">#ifndef DOUBLE_INCLUDED
#define DOUBLE_INCLUDED

#include "String_.h"
#include &lt;cstdint&gt;

/*
    DoubleInt64 union provides the ability to set the double value
    and get the int64_t value with the same binary representation.
*/
typedef union {
    double val;
    int64_t bits;
} DoubleInt64;

/**
 * The Double class wraps a value of the primitive type double in an object.
 *
 * @author Petr Kozler (A13B0359P)
 */
class Double : public Comparable {
    // an inner value
    double v;
    static int64_t getNegativeZeroBits();
public:
    /**
     * A constant holding the positive infinity of type double.
     */
    static const double POSITIVE_INFINITY;
    
    /**
     * A constant holding the negative infinity of type double.
     */
    static const double NEGATIVE_INFINITY;
    
    /**
     * A constant holding a Not-a-Number (NaN) value of type double.
     */
    static const double NaN;
    
    /**
     * A constant holding the largest positive finite value of type double, (2-2^-52)·2^1023.
     */
    static const double MIN_VALUE;
    
    /**
     * A constant holding the smallest positive nonzero value of type double, 2^-1074.
     */
    static const double MAX_VALUE;
    
    /**
     * Maximum exponent a finite double variable may have.
     */
    static const int32_t MAX_EXPONENT;
    
    /**
     * Minimum exponent a normalized double variable may have.
     */
    static const int32_t MIN_EXPONENT;
    
    /**
     * A constant holding the smallest positive normal value of type double, 2^-1022.
     */
    static const double MIN_NORMAL;
    
    Double(double value);
    double doubleValue();
    int32_t compareTo(Object *anotherDouble);
    static int32_t compare(double d1, double d2);
    bool equals(Object *obj);
    String *toString();
    static String *toString(double d);
    static double parseDouble(String *s);
};

#endif // DOUBLE_INCLUDED


#include "Double.h"

#include &lt;string&gt;
#include &lt;cmath&gt;
#include &lt;cstdlib&gt;

const double Double::POSITIVE_INFINITY = 1.0 / 0.0;
const double Double::NEGATIVE_INFINITY = -1.0 / 0.0;
const double Double::NaN = 0.0 / 0.0;
const double Double::MAX_VALUE = 1.7976931348623157e+308;
const double Double::MIN_VALUE = 4.9e-324;
const int32_t Double::MAX_EXPONENT = 1023;
const int32_t Double::MIN_EXPONENT = -1022;
const double Double::MIN_NORMAL = 2.2250738585072014e-308;

/**
 * Constructs a newly allocated Double object that represents the primitive
 * double argument.
 *
 * @param value the value to be represented by the Double.
 */
Double::Double(double value) {
    v = value;
}

/*
    returns the "binary representation" of negative zero value for comparison purposes
*/
int64_t Double::getNegativeZeroBits() {
    DoubleInt64 bitConverter;
    bitConverter.val = -0.0;

    return bitConverter.bits;
}

/**
 * Returns the double value of this Double object.
 *
 * @return the double value represented by this object
 */
double Double::doubleValue() {
    return v;
}

/**
 * Compares two Double objects numerically.
 *
 * @param anotherDouble the Double to be compared.
 * @return the value 0 if anotherDouble is numerically equal to this Double;
 * a value less than 0 if this Double is numerically less than
 * anotherDouble; and a value greater than 0 if this Double is numerically
 * greater than anotherDouble.
 */
int32_t Double::compareTo(Object *anotherDouble) {
    return compare(v, ((Double *)anotherDouble)-&gt;v);
}

/**
 * Compares the two specified double values.
 *
 * @param d1 the first double to compare
 * @param d2 the second double to compare
 * @return the value 0 if d1 is numerically equal to d2; a value less than 0
 * if d1 is numerically less than d2; and a value greater than 0 if d1 is
 * numerically greater than d2.
 */
int32_t Double::compare(double d1, double d2) {
    /* testing for NaN values (a NaN value is considered greated
       than any other, including positive infinity,
       and two NaN values are considered equal) */
    if (std::isnan(d1)) {
        if (std::isnan(d2)) {
            return 0;
        }

        return 1;
    }

    if (std::isnan(d2)) {
        return -1;
    }

    DoubleInt64 vBits, v2Bits;
    vBits.val = d1;
    v2Bits.val = d2;
    int64_t negativeZeroBits = getNegativeZeroBits();

    /* testing for +0.0 and -0.0 value (a positive zero
       is considered greater than a negative zero) */
    if (vBits.bits == 0
            &amp;&amp; v2Bits.bits == negativeZeroBits) {
        return 1;
    }

    if (vBits.bits == negativeZeroBits
            &amp;&amp; v2Bits.bits == 0) {
        return -1;
    }

    /* testing for other values and returning
       1 if first value is greater, 0 if first value 
       equals second value, -1 otherwise */
    return (d1 &gt; d2 ? 1 : d1 &lt; d2 ? -1 : 0);
}

/**
 * Compares this object against the specified object.
 *
 * @param obj the object to compare with.
 * @return true if the objects are the same; false otherwise.
 */
bool Double::equals(Object *obj) {
    // testing another object reference for a NULL value
    if (obj == nullptr) {
        return false;
    }

    // testing object class equality
    if (sizeof (this) != sizeof (*obj)) {
        return false;
    }

    double v2 = ((Double *)obj)-&gt;v;

    // testing for NaN values (two NaN values are considered equal)
    if (std::isnan(v) &amp;&amp; std::isnan(v2)) {
        return true;
    }

    DoubleInt64 vBits, v2Bits;
    vBits.val = v;
    v2Bits.val = v2;
    int64_t negativeZeroBits = getNegativeZeroBits();

    // testing for zero values (+0.0 is considered greater than -0.0)
    if (vBits.bits == negativeZeroBits) {
        return v2Bits.bits == negativeZeroBits;
    }

    if (v2Bits.bits == negativeZeroBits) {
        return vBits.bits == negativeZeroBits;
    }

    // testing other values
    return (v == v2);
}

/**
 * Returns a string representation of this Double object.
 *
 * @return a String representation of this object.
 */
String *Double::toString() {
    return toString(v);
}

/**
 * Returns a string representation of the double argument.
 *
 * @param d the double to be converted.
 * @return a string representation of the argument.
 */
String *Double::toString(double d) {
    return new String(std::to_string(d));
}

/**
 * Returns a new double initialized to the value represented by the
 * specified String, as performed by the valueOf method of class Double.
 *
 * @param s the string to be parsed.
 * @return the double value represented by the string argument.
 */
double Double::parseDouble(String *s) {
    String *str = s-&gt;trim();
    double value = strtod(str-&gt;_s().c_str(), nullptr);
    
    // negative zero handling
    String *sign = new String("-");
    
    if (value == 0 &amp;&amp; s-&gt;startsWith(sign)) {
        value = -0.0;
    }
    
    delete str, sign;
    
    return value;
}
</code>
<code lang="C#">﻿using System;
using System.Globalization;

namespace JavaClasses
{

    /// &lt;summary&gt;
    /// The Double class wraps a value of the primitive type double in an object.
    /// &lt;/summary&gt;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;
    public class Double : Comparable
    {

        /// &lt;summary&gt;
        /// A constant holding the positive infinity of type double.
        /// &lt;/summary&gt;
        public const double POSITIVE_INFINITY = 1.0 / 0.0;

        /// &lt;summary&gt;
        /// A constant holding the negative infinity of type double.
        /// &lt;/summary&gt;
        public const double NEGATIVE_INFINITY = -1.0 / 0.0;

        /// &lt;summary&gt;
        /// A constant holding a Not-a-Number (NaN) value of type double.
        /// &lt;/summary&gt;
        public const double NaN = 0.0 / 0.0;

        /// &lt;summary&gt;
        /// A constant holding the largest positive finite value of type double, (2-2^-52)·2^1023.
        /// &lt;/summary&gt;
        public const double MAX_VALUE = 1.7976931348623157e+308;

        /// &lt;summary&gt;
        /// A constant holding the smallest positive nonzero value of type double, 2^-1074.
        /// &lt;/summary&gt;
        public const double MIN_VALUE = 4.9e-324;

        /// &lt;summary&gt;
        /// Maximum exponent a finite double variable may have.
        /// &lt;/summary&gt;
        public const int MAX_EXPONENT = 1023;

        /// &lt;summary&gt;
        /// Minimum exponent a normalized double variable may have.
        /// &lt;/summary&gt;
        public const int MIN_EXPONENT = -1022;

        /// &lt;summary&gt;
        /// A constant holding the smallest positive normal value of type double, 2^-1022.
        /// &lt;/summary&gt;
        public const double MIN_NORMAL = 2.2250738585072014E-308;

        // a "binary representation" of negative zero value for comparison purposes
        private static readonly long negativeZeroBits = BitConverter.DoubleToInt64Bits(-0.0);

        // an inner value
        private double v;

        /// &lt;summary&gt;
        /// Constructs a newly allocated Double object that represents the primitive
        /// double argument.
        /// &lt;/summary&gt;
        /// &lt;param name="value"&gt;the value to be represented by the Double.
        /// &lt;/param&gt;
        public Double(double value)
        {
            v = value;
        }

        /// &lt;summary&gt;
        /// Returns the double value of this Double object.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the double value represented by this object
        /// &lt;/returns&gt;
        public double doubleValue()
        {
            return v;
        }

        /// &lt;summary&gt;
        /// Compares two Double objects numerically.
        /// &lt;/summary&gt;
        /// &lt;param name="anotherDouble"&gt;the Double to be compared.
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if anotherDouble is numerically equal to this Double;
        /// a value less than 0 if this Double is numerically less than
        /// anotherDouble; and a value greater than 0 if this Double is numerically
        /// greater than anotherDouble.
        /// &lt;/returns&gt;
        public override int compareTo(Object anotherDouble)
        {
            return compare(v, (anotherDouble as Double).v);
        }

        /// &lt;summary&gt;
        /// Compares the two specified double values.
        /// &lt;/summary&gt;
        /// &lt;param name="d1"&gt;the first double to compare
        /// &lt;/param&gt;&lt;param name="d2"&gt;the second double to compare
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if d1 is numerically equal to d2; a value less than 0
        /// if d1 is numerically less than d2; and a value greater than 0 if d1 is
        /// numerically greater than d2.
        /// &lt;/returns&gt;
        public static int compare(double d1, double d2)
        {
            /* testing for NaN values (a NaN value is considered greated
               than any other, including positive infinity,
               and two NaN values are considered equal) */
            if (double.IsNaN(d1))
            {
                if (double.IsNaN(d2))
                {
                    return 0;
                }

                return 1;
            }

            if (double.IsNaN(d2))
            {
                return -1;
            }

            /* testing for +0.0 and -0.0 value (a positive zero
               is considered greater than a negative zero) */
            if (BitConverter.DoubleToInt64Bits(d1) == 0
                &amp;&amp; BitConverter.DoubleToInt64Bits(d2) == negativeZeroBits)
            {
                return 1;
            }

            if (BitConverter.DoubleToInt64Bits(d1) == negativeZeroBits
                &amp;&amp; BitConverter.DoubleToInt64Bits(d2) == 0)
            {
                return -1;
            }

            /* testing for other values and returning
               1 if first value is greater, 0 if first value 
               equals second value, -1 otherwise */
            return (d1 &gt; d2 ? 1 : d1 &lt; d2 ? -1 : 0);
        }

        /// &lt;summary&gt;
        /// Compares this object against the specified object.
        /// &lt;/summary&gt;
        /// &lt;param name="obj"&gt;the object to compare with.
        /// &lt;/param&gt;&lt;returns&gt;true if the objects are the same; false otherwise.
        /// &lt;/returns&gt;
        public override bool equals(Object obj)
        {
            // testing another object reference for a NULL value
            if (obj == null)
            {
                return false;
            }

            // testing object class equality
            if (GetType() != obj.GetType())
            {
                return false;
            }

            double v2 = (obj as Double).v;

            // testing for NaN values (two NaN values are considered equal)
            if (double.IsNaN(v) &amp;&amp; double.IsNaN(v2))
            {
                return true;
            }

            // testing for zero values (+0.0 is considered greater than -0.0)
            if (BitConverter.DoubleToInt64Bits(v) == negativeZeroBits)
            {
                return BitConverter.DoubleToInt64Bits(v2) == negativeZeroBits;
            }

            if (BitConverter.DoubleToInt64Bits(v2) == negativeZeroBits)
            {
                return BitConverter.DoubleToInt64Bits(v) == negativeZeroBits;
            }

            // testing other values
            return (v == v2);
        }

        /// &lt;summary&gt;
        /// Returns a string representation of this Double object.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;a String representation of this object.
        /// &lt;/returns&gt;
        public override String toString()
        {
            return Double.toString(v);
        }

        /// &lt;summary&gt;
        /// Returns a string representation of the double argument.
        /// &lt;/summary&gt;
        /// &lt;param name="d"&gt;the double to be converted.
        /// &lt;/param&gt;&lt;returns&gt;a string representation of the argument.
        /// &lt;/returns&gt;
        public static String toString(double d)
        {
            return new String(d.ToString(CultureInfo.InvariantCulture));
        }

        /// &lt;summary&gt;
        /// Returns a new double initialized to the value represented by the
        /// specified String, as performed by the valueOf method of class Double.
        /// &lt;/summary&gt;
        /// &lt;param name="s"&gt;the string to be parsed.
        /// &lt;/param&gt;&lt;returns&gt;the double value represented by the string argument.
        /// &lt;/returns&gt;
        public static double parseDouble(String s)
        {
            // parsing with invariant culture formatting
            double value = double.Parse(s.ToString(), CultureInfo.InvariantCulture);

            // negative zero handling
            if (value == 0 &amp;&amp; s.startsWith("-"))
            {
                return -0.0;
            }

            return value;
        }
        
        public static implicit operator Double(double original)
        {
            return new Double(original);
        }
        
    }

}
</code>
<code lang="Free Pascal">unit DoubleUnit;

{$mode objfpc}{$H+}

interface

uses
  SysUtils, StringUnit;

type

  (*
      DoubleInt64 variant record provides the ability to set the Double value
      and get the Int64 value with the same binary representation.
  *)
  DoubleToInt64 = record
    case binary: boolean of
      false: (val: double);
      true: (bits: int64);
  end;

  (**
   * The Double class wraps a value of the primitive type double in an object.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  Double_ = class(Comparable)
    private
      var
        // an inner value
        v: double;
      class function getNegativeZeroBits() : int64;
    public
      const
          (**
           * A constant holding the positive infinity of type double.
           *)
           POSITIVE_INFINITY = 1.0 / 0.0;
          (**
           * A constant holding the negative infinity of type double.
           *)
           NEGATIVE_INFINITY = -1.0 / 0.0;
          (**
           * A constant holding a Not-a-Number (NaN) value of type double.
           *)
           NaN = 0.0 / 0.0;
          (**
           * A constant holding the largest positive finite value of type double, (2-2^-52)·2^1023.
           *)
           MAX_VALUE = 1.7976931348623157e+308;
          (**
           * A constant holding the smallest positive nonzero value of type double, 2^-1074.
           *)
           MIN_VALUE = 4.9e-324;
          (**
           * Maximum exponent a finite double variable may have.
           *)
           MAX_EXPONENT = 1023;
          (**
           * Minimum exponent a normalized double variable may have.
           *)
           MIN_EXPONENT = -1022;
          (**
           * A constant holding the smallest positive normal value of type double, 2^-1022.
           *)
           MIN_NORMAL = 2.2250738585072014e-308;
      constructor create(value: double);
      function doubleValue() : double;
      function compareTo(anotherDouble: Object_) : longInt; override;
      class function compare(d1, d2: double) : longInt;
      function equals_(obj: Object_) : boolean; override;
      function toString_() : String_; override;
      class function toString_(d: double) : String_;
      class function parseDouble(s: String_) : double;
  end;

implementation

uses
  Math;

(**
 * Constructs a newly allocated Double object that represents the primitive
 * double argument.
 *
 * @param value the value to be represented by the Double.
 *)
constructor Double_.create(value: double);
begin
  v := value;
end;

(*
    returns the "binary representation" of negative zero value for comparison purposes
*)
class function Double_.getNegativeZeroBits(): int64;
var
  bitConverter : DoubleToInt64;
begin
  bitConverter.val := -0.0;
  getNegativeZeroBits := bitConverter.bits;
end;

(**
 * Returns the double value of this Double object.
 *
 * @return the double value represented by this object
 *)
function Double_.doubleValue() : double;
begin
  doubleValue := v;
end;

(**
 * Compares two Double objects numerically.
 *
 * @param anotherDouble the Double to be compared.
 * @return the value 0 if anotherDouble is numerically equal to this Double;
 * a value less than 0 if this Double is numerically less than
 * anotherDouble; and a value greater than 0 if this Double is numerically
 * greater than anotherDouble.
 *)
function Double_.compareTo(anotherDouble: Object_) : longInt;
begin
  compareTo := compare(v, (anotherDouble as Double_).v);
end;

(**
 * Compares the two specified double values.
 *
 * @param d1 the first double to compare
 * @param d2 the second double to compare
 * @return the value 0 if d1 is numerically equal to d2; a value less than 0
 * if d1 is numerically less than d2; and a value greater than 0 if d1 is
 * numerically greater than d2.
 *)
class function Double_.compare(d1, d2: double) : longInt;
var
  vBits, v2Bits : DoubleToInt64;
  negativeZeroBits : int64;
begin
  (* testing for NaN values (a NaN value is considered greated
       than any other, including positive infinity,
       and two NaN values are considered equal) *)
  if isNan(d1) then begin
    if isNan(d2) then begin
       exit(0);
    end;

    exit(1);
  end;

  if isNan(d2) then begin
    exit(-1);
  end;

  vBits.val := d1;
  v2Bits.val := d2;
  negativeZeroBits := getNegativeZeroBits();

  (* testing for +0.0 and -0.0 value (a positive zero
       is considered greater than a negative zero) *)
  if (vBits.bits = 0) and (v2Bits.bits = negativeZeroBits) then begin
    exit(1);
  end;

  if (vBits.bits = negativeZeroBits) and (v2Bits.bits = 0) then begin
    exit(-1);
  end;

  (* testing for other values and returning
       1 if first value is greater, 0 if first value
       equals second value, -1 otherwise *)
  if d1 &gt; d2 then begin
    compare := 1;
  end
  else if d1 &lt; d2 then begin
    compare := -1;
  end
  else begin
    compare := 0;
  end;
end;

(**
 * Compares this object against the specified object.
 *
 * @param obj the object to compare with.
 * @return true if the objects are the same; false otherwise.
 *)
function Double_.equals_(obj: Object_) : boolean;
var
  vBits, v2Bits : DoubleToInt64;
  v2 : double;
  negativeZeroBits : int64;
begin
  // testing another object reference for a NULL value
  if obj = nil then begin
    exit(false);
  end;

  // testing object class equality
  if typeOf(self) &lt;&gt; typeOf(obj) then begin
    exit(false);
  end;

  v2 := (obj as Double_).v;

  // testing for NaN values (two NaN values are considered equal)
  if isNan(v) and isNan(v2) then begin
    exit(true);
  end;

  vBits.val := v;
  v2Bits.val := v2;
  negativeZeroBits := getNegativeZeroBits();

  // testing for zero values (+0.0 is considered greater than -0.0)
  if vBits.bits = negativeZeroBits then begin
    exit(v2Bits.bits = negativeZeroBits);
  end;

  if v2Bits.bits = negativeZeroBits then begin
    exit(vBits.bits = negativeZeroBits);
  end;

  // testing other values
  equals_ := v = v2;
end;

(**
 * Returns a string representation of this Double object.
 *
 * @return a String representation of this object.
 *)
function Double_.toString_() : String_;
begin
  toString_ := Double_.toString_(v);
end;

(**
 * Returns a string representation of the double argument.
 *
 * @param d the double to be converted.
 * @return a string representation of the argument.
 *)
class function Double_.toString_(d: double) : String_;
var
  fs: TFormatSettings;
begin
  fs.DecimalSeparator := '.';
  toString_ := String_.create(FloatToStr(d, fs));
end;

(**
 * Returns a new double initialized to the value represented by the
 * specified String, as performed by the valueOf method of class Double.
 *
 * @param s the string to be parsed.
 * @return the double value represented by the string argument.
 *)
class function Double_.parseDouble(s: String_) : double;
var
  fs: TFormatSettings;
  str, sign: String_;
  value: double;
begin
  // parsing with dot as a decimal separator
  fs.DecimalSeparator := '.';
  str := s.trim();
  value := strToFloat(str.strProperty, fs);
  sign := String_.create('-');

  // negative zero handling
  if (value = 0) and s.startsWith(sign) then begin
    value := -0.0;
  end;

  freeAndNil(str);
  freeAndNil(sign);
  parseDouble := value;
end;

operator := (original: double) s: Double_;
begin
  s.create(original);
end;

end.

</code>

</codes>
