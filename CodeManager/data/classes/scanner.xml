<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef SCANNER_INCLUDED
#define	SCANNER_INCLUDED

#include "String_.h"
#include "System.h"
#include &lt;stdint.h&gt;

/**
 * A simple text scanner which can parse basic types and strings.
 *
 * @author Petr Kozler (A13B0359P)
 */

typedef struct {
    // current line
    char *line;
} Scanner;

Scanner *new_Scanner(InputStream *source);
void delete_Scanner(Scanner *ptr);
String *next(Scanner *ptr);
bool nextBoolean(Scanner *ptr);
int8_t nextByte(Scanner *ptr);
int16_t nextShort(Scanner *ptr);
int32_t nextInt(Scanner *ptr);
int64_t nextLong(Scanner *ptr);
float nextFloat(Scanner *ptr);
double nextDouble(Scanner *ptr);
String *nextLine(Scanner *ptr);

#endif	/* SCANNER_INCLUDED */


#include "Scanner.h"

#include "StringBuilder.h"
#include "Boolean.h"
#include "Byte.h"
#include "Short.h"
#include "Integer.h"
#include "Long.h"
#include "Float.h"
#include "Double.h"
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;ctype.h&gt;
#include &lt;wchar.h&gt;
#include &lt;stdbool.h&gt;

/*
    Reads the line from the standard input.
*/
String *_readLine() {
    StringBuilder *sb = new_StringBuilder();
    char c;
    
    // reading characters until newline
    while (true) {
        scanf("%c", &amp;c);
        
        // skipping the carriage return newline
        if (c == '\r') {
            continue;
        }
        
        // returning the scanned characters as the new line string
        if (c == '\n') {
            String *line = toStringSb(sb);
            delete_StringBuilder(sb);
            
            return line;
        }
        
        // converting the char to string
        char *s = malloc(sizeof(char) * 2);
        s[0] = c;
        s[1] = '\0';
        
        // appending the char to the scanned line string
        String *str = new_String(s);
        append(sb, str);
        delete_String(str);
        free(s);
    }
}

/*
    Returns TRUE if and only if there is only the white-space characters
    left in the line or if the current scanned line is already empty.
*/
bool _isEmptyOrWhiteSpace(char *line) {
    int32_t i;
    
    // finding the first non-whitespace character
    for (i = 0; line[i]; i++) {
        if (!isspace((int) line[i])) {
            return false;
        }
    }
    
    // returning TRUE if there are only whitespaces in the line
    return true;
}

/*
    Removes all leading white-space characters from the line.
*/
char *_trimStart(char *line) {
    int32_t i;
    
    // finding the first non-whitespace character
    for (i = 0; line[i]; i++) {
        if (!isspace((int) line[i])) {
            break;
        }
    }
    
    // returning the substring without the leading whitespaces
    return strdup(line + i);
}

/*
    Removes the part of the current line to the first white-space character
    after the first sequence of non-whitespace characters and returns this
    part as the scanned token.
*/
char *_removeLineToWhiteSpace(Scanner *ptr) {
    int32_t i;
    char *line;
    char *token;
    
    // removing all leading whitespaces from the line
    ptr-&gt;line = _trimStart(ptr-&gt;line);
    
    // finding the first whitespace in the trimmed line
    for (i = 0; ptr-&gt;line[i]; i++) {
        if (isspace((int) ptr-&gt;line[i])) {
            break;
        }
    }
    
    token = malloc(sizeof(char) * i);
    token[0] = '\0';
    
    // getting the next token
    strncat(token, ptr-&gt;line, (size_t) i);
    line = strdup(ptr-&gt;line + i);
    // removing the token from the current line
    free(ptr-&gt;line);
    ptr-&gt;line = line;
    
    return token;
}

/*
    Returns the next token of the current line or reads the new line
    from the standard input if the current line has been scanned completely.
*/
String *_getNextToken(Scanner *ptr) {
    // reading the next line if the current line is empty
    while (_isEmptyOrWhiteSpace(ptr-&gt;line)) {
        free(ptr-&gt;line);
        String *line = _readLine();
        // removing all leading whitespaces
        ptr-&gt;line = _trimStart(line-&gt;s);
        delete_String(line);
    }
    
    // returning the next scanned token
    return new_String(_removeLineToWhiteSpace(ptr));
}

/**
 * Constructs a new Scanner that produces values scanned from the specified
 * input stream.
 *
 * @param source An input stream to be scanned
 */
Scanner *new_Scanner(InputStream *source) {
    Scanner *sc = malloc(sizeof(Scanner));
    sc-&gt;line = malloc(sizeof(char));
    sc-&gt;line[0] = '\0';
    
    return sc;
}

/*
    Destructs the StringTokenizer.
 */
void delete_Scanner(Scanner *ptr) {
    free(ptr-&gt;line);
    free(ptr);
}

/**
 * Finds and returns the next complete token from the specified scanner.
 *
 * @param ptr The allocated structure
 * @return the next token
 */
String *next(Scanner *ptr) {
    return _getNextToken(ptr);
}

/**
 * Scans the next token of the input into a boolean value and returns that
 * value.
 *
 * @param ptr The allocated structure
 * @return the boolean scanned from the input
 */
bool nextBoolean(Scanner *ptr) {
    return Boolean_parseBoolean(_getNextToken(ptr));
}

/**
 * Scans the next token of the input as a byte.
 *
 * @param ptr The allocated structure
 * @return the byte scanned from the input
 */
int8_t nextByte(Scanner *ptr) {
    return Byte_parseByte(_getNextToken(ptr));
}

/**
 * Scans the next token of the input as a short.
 *
 * @param ptr The allocated structure
 * @return the short scanned from the input
 */
int16_t nextShort(Scanner *ptr) {
    return Short_parseShort(_getNextToken(ptr));
}

/**
 * Scans the next token of the input as an int.
 *
 * @param ptr The allocated structure
 * @return the int scanned from the input
 */
int32_t nextInt(Scanner *ptr) {
    return Integer_parseInt(_getNextToken(ptr));
}

/**
 * Scans the next token of the input as a long.
 *
 * @param ptr The allocated structure
 * @return the long scanned from the input
 */
int64_t nextLong(Scanner *ptr) {
    return Long_parseLong(_getNextToken(ptr));
}

/**
 * Scans the next token of the input as a float.
 *
 * @param ptr The allocated structure
 * @return the float scanned from the input
 */
float nextFloat(Scanner *ptr) {
    return Float_parseFloat(_getNextToken(ptr));
}

/**
 * Scans the next token of the input as a double.
 *
 * @param ptr The allocated structure
 * @return the double scanned from the input
 */
double nextDouble(Scanner *ptr) {
    return Double_parseDouble(_getNextToken(ptr));
}

/**
 * Advances the specified scanner past the current line and returns the input that was skipped.
 *
 * @param ptr The allocated structure
 * @return the line that was skipped
 */
String *nextLine(Scanner *ptr) {
    // reading the next line if the current is empty
    if (strlen(ptr-&gt;line) == 0) {
        return _readLine();
    }
    
    // returning the rest of the current line if not empty
    String *str = new_String(ptr-&gt;line);
    free(ptr-&gt;line);
    ptr-&gt;line = malloc(sizeof(char));
    ptr-&gt;line[0] = '\0';

    return str;
}</code>
<code lang="C++">#ifndef SCANNER_INCLUDED
#define	SCANNER_INCLUDED

#include "System.h"
#include "String_.h"
#include &lt;cstdint&gt;

/**
 * A simple text scanner which can parse primitive types and strings using regular expressions.
 *
 * @author Petr Kozler (A13B0359P)
 */
class Scanner : public Object {
    // current line
    std::string line;
    String *readLine();
    bool isEmptyOrWhiteSpace(std::string line);
    std::string trimStart(std::string line);
    std::string removeLineToWhiteSpace();
    String *getNextToken();
public:
    Scanner(InputStream *source);
    String *next();
    bool nextBoolean();
    int8_t nextByte();
    int16_t nextShort();
    int32_t nextInt();
    int64_t nextLong();
    float nextFloat();
    double nextDouble();
    String *nextLine();
};

#endif	// SCANNER_INCLUDED


#include "Scanner.h"

#include &lt;cstdlib&gt;
#include &lt;sstream&gt;
#include "Boolean.h"
#include "Byte.h"
#include "Short.h"
#include "Integer.h"
#include "Long.h"
#include "Float.h"
#include "Double.h"

/*
    Reads the line from the standard input.
*/
String *Scanner::readLine() {
    std::string line;
    // reading the new line
    std::getline(std::cin, line);
    
    return new String(line);
}

/*
    Returns TRUE if and only if there is only the white-space characters
    left in the line or if the current scanned line is already empty.
*/
bool Scanner::isEmptyOrWhiteSpace(std::string line) {
    // testing the size and the position of the first non-whitespace character
    return line.size() == 0 || 
            line.find_first_not_of(" \t\n\x0b\f\r") == std::string::npos;
}

/*
    Removes all leading white-space characters from the line.
*/
std::string Scanner::trimStart(std::string line) {
    const char* white_spaces = " \t\n\x0b\r\f";

    // finding the first non-whitespace character
    int32_t first = line.find_first_not_of(white_spaces);
    
    // returning an empty line if there are only whitespaces
    if (first == std::string::npos) {
        return std::string("");
    }

    // returning the substring without the leading whitespaces
    return line.substr(first, line.size());
}

/*
    Removes the part of the current line to the first white-space character
    after the first sequence of non-whitespace characters and returns this
    part as the scanned token.
*/
std::string Scanner::removeLineToWhiteSpace() {
    this-&gt;line = trimStart(this-&gt;line);
    // finding the first whitespace after the sequence of non whitespace charaters
    int32_t i = line.find_first_of(" \t\n\x0b\f\r");
    // getting the next token
    std::string token = this-&gt;line.substr(0, i);
    // removing the token from the current line
    this-&gt;line = this-&gt;line.erase(0, i);
    
    return token;
}

/*
    Returns the next token of the current line or reads the new line
    from the standard input if the current line has been scanned completely.
*/
String *Scanner::getNextToken() {
    // reading the next line if the current is empty
    while (isEmptyOrWhiteSpace(this-&gt;line)) {
        String *line = readLine();
        // removing all leading whitespaces
        this-&gt;line = trimStart(line-&gt;_s());
        delete line;
    }

    // returning the next scanned token
    return new String(removeLineToWhiteSpace()); 
}

/**
 * Constructs a new Scanner that produces values scanned from the specified
 * input stream.
 *
 * @param source An input stream to be scanned
 */
Scanner::Scanner(InputStream *source) {
    this-&gt;line = "";
}

/**
 * Finds and returns the next complete token from this scanner.
 *
 * @return the next token
 */
String *Scanner::next() {
    return getNextToken();
}

/**
 * Scans the next token of the input into a boolean value and returns that
 * value.
 *
 * @return the boolean scanned from the input
 */
bool Scanner::nextBoolean() {
    return Boolean::parseBoolean(getNextToken());
}

/**
 * Scans the next token of the input as a byte.
 *
 * @return the byte scanned from the input
 */
int8_t Scanner::nextByte() {
    return Byte::parseByte(getNextToken());
}

/**
 * Scans the next token of the input as a short.
 *
 * @return the short scanned from the input
 */
int16_t Scanner::nextShort() {
    return Short::parseShort(getNextToken());
}

/**
 * Scans the next token of the input as an int.
 *
 * @return the int scanned from the input
 */
int32_t Scanner::nextInt() {
    return Integer::parseInt(getNextToken());
}

/**
 * Scans the next token of the input as a long.
 * 
 * @return the long scanned from the input
 */
int64_t Scanner::nextLong() {
    return Long::parseLong(getNextToken());
}

/**
 * Scans the next token of the input as a float.
 * 
 * @return the float scanned from the input
 */
float Scanner::nextFloat() {
    return Float::parseFloat(getNextToken());
}

/**
 * Scans the next token of the input as a double.
 * 
 * @return the double scanned from the input
 */
double Scanner::nextDouble() {
    return Double::parseDouble(getNextToken());
}

/**
 * Advances this scanner past the current line and returns the input that was skipped.
 * 
 * @return the line that was skipped
 */
String *Scanner::nextLine() {
    // reading the next line if the current is empty
    if ((this-&gt;line.size()) == 0) {
        return readLine();
    }
    
    // returning the rest of the current line if not empty
    String *str = new String(this-&gt;line);
    this-&gt;line = "";

    return str;
}
</code>
<code lang="C#">﻿using System;
using System.Text.RegularExpressions;
using System.Threading;

namespace JavaClasses
{

    /// &lt;summary&gt;
    /// A simple text scanner which can parse primitive types and strings using regular expressions.
    /// &lt;/summary&gt;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;
    public class Scanner : Object
    {

        // current line
        private string line = "";

        /// &lt;summary&gt;
        /// Constructs a new Scanner that produces values scanned from the specified
        /// input stream.
        /// &lt;/summary&gt;
        /// &lt;param name="source"&gt;An input stream to be scanned&lt;/param&gt;
        public Scanner(InputStream source)
        {
            Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
        }

        /*
             Returns the next token of the current line or reads the new line
             from the standard input if the current line has been scanned completely.
         */
        private String getNextToken()
        {
            // reading the next line if the current is empty
            while (string.IsNullOrWhiteSpace(line))
            {
                // removing all leading whitespaces
                line = Console.ReadLine().TrimStart();
            }
            
            // getting the next token (all characters to the first whitespace) from the current line
            Match match = Regex.Match(line, @"([^\s]+)");
            // removing the token from the current line
            line = line.Remove(0, match.Index + match.Length);

            return match.Value;
        }

        /// &lt;summary&gt;
        /// Finds and returns the next complete token from this scanner.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the next token
        /// &lt;/returns&gt;
        public String next()
        {
            return getNextToken();
        }

        /// &lt;summary&gt;
        /// Scans the next token of the input into a boolean value and returns that
        /// value.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the boolean scanned from the input
        /// &lt;/returns&gt;
        public bool nextBoolean()
        {
            return Boolean.parseBoolean(getNextToken());
        }

        /// &lt;summary&gt;
        /// Scans the next token of the input as a byte.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the byte scanned from the input
        /// &lt;/returns&gt;
        public sbyte nextByte()
        {
            return Byte.parseByte(getNextToken());
        }

        /// &lt;summary&gt;
        /// Scans the next token of the input as a short.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the short scanned from the input
        /// &lt;/returns&gt;
        public short nextShort()
        {
            return Short.parseShort(getNextToken());
        }

        /// &lt;summary&gt;
        /// Scans the next token of the input as an int.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the int scanned from the input
        /// &lt;/returns&gt;
        public int nextInt()
        {
            return Integer.parseInt(getNextToken());
        }

        /// &lt;summary&gt;
        /// Scans the next token of the input as a long.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the long scanned from the input
        /// &lt;/returns&gt;
        public long nextLong()
        {
            return Long.parseLong(getNextToken());
        }

        /// &lt;summary&gt;
        /// Scans the next token of the input as a float.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the float scanned from the input
        /// &lt;/returns&gt;
        public float nextFloat()
        {
            return Float.parseFloat(getNextToken());
        }

        /// &lt;summary&gt;
        /// Scans the next token of the input as a double.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the double scanned from the input
        /// &lt;/returns&gt;
        public double nextDouble()
        {
            return Double.parseDouble(getNextToken());
        }

        /// &lt;summary&gt;
        /// Advances this scanner past the current line and returns the input that was skipped.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the line that was skipped
        /// &lt;/returns&gt;
        public String nextLine()
        {
            // reading the next line if the current is empty
            if (string.IsNullOrEmpty(line))
            {
                return Console.ReadLine();
            }

            // returning the rest of the current line if not empty
            String str = line;
            line = "";

            return str;
        }

    }

}
</code>
<code lang="Free Pascal">unit ScannerUnit;

{$mode objfpc}{$H+}

interface

uses
  StringUnit, SystemUnit, BooleanUnit, ByteUnit, ShortUnit, IntegerUnit, LongUnit, FloatUnit, DoubleUnit;

type
  (**
   * A simple text scanner which can parse primitive types and strings using regular expressions.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  Scanner = class(Object_)
    private
      // current line
      var line: ansiString;
      function readLine() : String_;
      function isEmptyOrWhiteSpace(l: ansiString) : boolean;
      function removeLineToWhiteSpace() : ansiString;
      function getNextToken() : String_;
    public
      constructor create(source: InputStream);
      function next() : String_;
      function nextBoolean() : boolean;
      function nextByte() : shortInt;
      function nextShort() : smallInt;
      function nextInt() : longInt;
      function nextLong() : int64;
      function nextFloat() : single;
      function nextDouble() : double;
      function nextLine() : String_;
  end;

implementation

uses
  SysUtils;

(*
    Reads the line from the standard input.
*)
function Scanner.readLine() : String_;
var
  l: ansiString;
begin
  // reading the new line
  readLn(l);
  readLine := String_.create(l);
end;

(*
    Returns TRUE if and only if there is only the white-space characters
    left in the line or if the current scanned line is already empty.
*)
function Scanner.isEmptyOrWhiteSpace(l: ansiString) : boolean;
var
  len, i: longInt;
begin
  len := length(l);

  // returning TRUE if the string is empty
  if len = 0 then begin
    exit(true);
  end;

  // finding the first non-whitespace character
  for i := 1 to len do begin
    if l[i] &gt; #32 then begin
      exit(false);
    end;
  end;

  // returning TRUE if there are only whitespaces in the line
  isEmptyOrWhiteSpace := true;
end;

(*
    Removes the part of the current line to the first white-space character
    after the first sequence of non-whitespace characters and returns this
    part as the scanned token.
*)
function Scanner.removeLineToWhiteSpace() : ansiString;
var
  len, i: longInt;
  token: ansiString;
begin
  len := length(line);
  // removing all leading whitespaces from the line
  line := trimLeft(line);

  // finding the first whitespace in the trimmed line
  for i := 1 to len do begin
    if line[i] &lt;= #32 then begin
      break;
    end;
  end;

  // decrementing index if whitespace was found (the token will not contain it)
  if i &lt; len then begin
    dec(i);
  end;

  // getting the next token
  token := copy(line, 1, i);
  // removing the token from the current line
  delete(line, 1, i);
  removeLineToWhiteSpace := trim(token);
end;

(*
    Returns the next token of the current line or reads the new line
    from the standard input if the current line has been scanned completely.
*)
function Scanner.getNextToken() : String_;
var
  l: String_;
begin
  // reading the next line if the current line is empty
  while isEmptyOrWhiteSpace(line) do begin
    l := readLine();
    // removing all leading whitespaces
    line := trimLeft(l.strProperty);
    freeAndNil(l);
  end;

  // returning the next scanned token
  getNextToken := String_.create(removeLineToWhiteSpace());
end;

(**
 * Constructs a new Scanner that produces values scanned from the specified
 * input stream.
 *
 * @param source An input stream to be scanned
 *)
constructor Scanner.create(source: InputStream);
begin
  line := '';
end;

(**
 * Finds and returns the next complete token from this scanner.
 *
 * @return the next token
 *)
function Scanner.next() : String_;
begin
  next := getNextToken();
end;

(**
 * Scans the next token of the input into a boolean value and returns that
 * value.
 *
 * @return the boolean scanned from the input
 *)
function Scanner.nextBoolean() : boolean;
begin
  nextBoolean := Boolean_.parseBoolean(getNextToken());
end;

(**
 * Scans the next token of the input as a byte.
 *
 * @return the byte scanned from the input
 *)
function Scanner.nextByte() : shortInt;
begin
  nextByte := Byte_.parseByte(getNextToken());
end;

(**
 * Scans the next token of the input as a short.
 *
 * @return the short scanned from the input
 *)
function Scanner.nextShort() : smallInt;
begin
  nextShort := Short.parseShort(getNextToken());
end;

(**
 * Scans the next token of the input as an int.
 *
 * @return the int scanned from the input
 *)
function Scanner.nextInt() : longInt;
begin
  nextInt := Integer_.parseInt(getNextToken());
end;

(**
 * Scans the next token of the input as a long.
 *
 * @return the long scanned from the input
 *)
function Scanner.nextLong() : int64;
begin
  nextLong := Long.parseLong(getNextToken());
end;

(**
 * Scans the next token of the input as a float.
 *
 * @return the float scanned from the input
 *)
function Scanner.nextFloat() : single;
begin
  nextFloat := Float.parseFloat(getNextToken());
end;

(**
 * Scans the next token of the input as a double.
 *
 * @return the double scanned from the input
 *)
function Scanner.nextDouble() : double;
begin
  nextDouble := Double_.parseDouble(getNextToken());
end;

(**
 * Advances this scanner past the current line and returns the input that was skipped.
 *
 * @return the line that was skipped
 *)
function Scanner.nextLine() : String_;
var
  str: String_;
begin
  // reading the next line if the current is empty
  if length(line) = 0 then begin
     exit(readLine());
  end;

  // returning the rest of the current line if not empty
  str := String_.create(line);
  line := '';
  nextLine := str;
end;

end.

</code>

</codes>
