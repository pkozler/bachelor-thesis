<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef SCANNER_INCLUDED&#13;
#define	SCANNER_INCLUDED&#13;
&#13;
#include "String.h"&#13;
#include "System.h"&#13;
#include "String.h"&#13;
#include &lt;stdint.h&gt;&#13;
&#13;
/**&#13;
 * A simple text scanner which can parse basic types and strings.&#13;
 *&#13;
 * @author Petr Kozler (A13B0359P)&#13;
 */&#13;
&#13;
typedef struct {&#13;
    char *line;&#13;
} Scanner;&#13;
&#13;
Scanner *new_Scanner(InputStream *source);&#13;
String *next(Scanner *ptr);&#13;
bool nextBoolean(Scanner *ptr);&#13;
int8_t nextByte(Scanner *ptr);&#13;
int16_t nextShort(Scanner *ptr);&#13;
int32_t nextInt(Scanner *ptr);&#13;
int64_t nextLong(Scanner *ptr);&#13;
float nextFloat(Scanner *ptr);&#13;
double nextDouble(Scanner *ptr);&#13;
String *nextLine(Scanner *ptr);&#13;
&#13;
#endif	/* SCANNER_INCLUDED */&#13;
&#13;
&#13;
#include "Scanner.h"&#13;
&#13;
#include "StringBuilder.h"&#13;
#include "Boolean.h"&#13;
#include "Byte.h"&#13;
#include "Short.h"&#13;
#include "Integer.h"&#13;
#include "Long.h"&#13;
#include "Float.h"&#13;
#include "Double.h"&#13;
#include &lt;stdio.h&gt;&#13;
#include &lt;stdlib.h&gt;&#13;
#include &lt;string.h&gt;&#13;
#include &lt;ctype.h&gt;&#13;
#include &lt;wchar.h&gt;&#13;
#include &lt;stdbool.h&gt;&#13;
&#13;
String *_readLine() {&#13;
    StringBuilder *sb = new_StringBuilder();&#13;
    char c;&#13;
    &#13;
    while (true) {&#13;
        scanf("%c", &amp;c);&#13;
        &#13;
        if (c == '\n') {&#13;
            String *line = toStringSb(sb);&#13;
            delete_StringBuilder(sb);&#13;
            &#13;
            return line;&#13;
        }&#13;
        &#13;
        char *s = malloc(sizeof(char) * 2);&#13;
        s[0] = c;&#13;
        s[1] = '\0';&#13;
        &#13;
        String *str = new_String(s);&#13;
        append(sb, str);&#13;
        delete_String(str);&#13;
        free(s);&#13;
    }&#13;
}&#13;
&#13;
bool _isEmptyOrWhiteSpace(char *line) {&#13;
    int32_t i;&#13;
    &#13;
    for (i = 0; line[i]; i++) {&#13;
        if (!isspace((int) line[i])) {&#13;
            return false;&#13;
        }&#13;
    }&#13;
    &#13;
    return true;&#13;
}&#13;
&#13;
char *_trimStart(char *line) {&#13;
    int32_t i;&#13;
    &#13;
    for (i = 0; isspace((int) line[i]); i++);&#13;
    &#13;
    return strdup(line + i);&#13;
}&#13;
&#13;
char *_removeLineToWhiteSpace(Scanner *ptr) {&#13;
    int32_t i;&#13;
    char *line;&#13;
    char *token;&#13;
    &#13;
    ptr-&gt;line = _trimStart(ptr-&gt;line);&#13;
    &#13;
    for (i = 0; !isspace((int) ptr-&gt;line[i]); i++);&#13;
    &#13;
    token = malloc(sizeof(char) * i);&#13;
    token[0] = '\0';&#13;
    &#13;
    strncat(token, ptr-&gt;line, (size_t) i);&#13;
    line = strdup(ptr-&gt;line + i);&#13;
    free(ptr-&gt;line);&#13;
    ptr-&gt;line = line;&#13;
    &#13;
    return token;&#13;
}&#13;
&#13;
String *_getNextToken(Scanner *ptr) {&#13;
    while (_isEmptyOrWhiteSpace(ptr-&gt;line)) {&#13;
        free(ptr-&gt;line);&#13;
        String *line = _readLine();&#13;
        ptr-&gt;line = _trimStart(line-&gt;s);&#13;
        delete_String(line);&#13;
    }&#13;
    &#13;
    return new_String(_removeLineToWhiteSpace(ptr)); &#13;
}&#13;
&#13;
/**&#13;
 * Constructs a new Scanner that produces values scanned from the specified&#13;
 * input stream.&#13;
 *&#13;
 * @param source An input stream to be scanned&#13;
 */&#13;
Scanner *new_Scanner(InputStream *source) {&#13;
    Scanner *sc = malloc(sizeof(Scanner));&#13;
    sc-&gt;line = malloc(sizeof(char));&#13;
    sc-&gt;line[0] = '\0';&#13;
    &#13;
    return sc;&#13;
}&#13;
&#13;
/**&#13;
 * Finds and returns the next complete token from the specified scanner.&#13;
 *&#13;
 * @param ptr The allocated structure&#13;
 * @return the next token&#13;
 */&#13;
String *next(Scanner *ptr) {&#13;
    return _getNextToken(ptr);&#13;
}&#13;
&#13;
/**&#13;
 * Scans the next token of the input into a boolean value and returns that&#13;
 * value.&#13;
 *&#13;
 * @param ptr The allocated structure&#13;
 * @return the boolean scanned from the input&#13;
 */&#13;
bool nextBoolean(Scanner *ptr) {&#13;
    return Boolean_parseBoolean(_getNextToken(ptr));&#13;
}&#13;
&#13;
/**&#13;
 * Scans the next token of the input as a byte.&#13;
 *&#13;
 * @param ptr The allocated structure&#13;
 * @return the byte scanned from the input&#13;
 */&#13;
int8_t nextByte(Scanner *ptr) {&#13;
    return Byte_parseByte(_getNextToken(ptr));&#13;
}&#13;
&#13;
/**&#13;
 * Scans the next token of the input as a short.&#13;
 *&#13;
 * @param ptr The allocated structure&#13;
 * @return the short scanned from the input&#13;
 */&#13;
int16_t nextShort(Scanner *ptr) {&#13;
    return Short_parseShort(_getNextToken(ptr));&#13;
}&#13;
&#13;
/**&#13;
 * Scans the next token of the input as an int.&#13;
 *&#13;
 * @param ptr The allocated structure&#13;
 * @return the int scanned from the input&#13;
 */&#13;
int32_t nextInt(Scanner *ptr) {&#13;
    return Integer_parseInt(_getNextToken(ptr));&#13;
}&#13;
&#13;
/**&#13;
 * Scans the next token of the input as a long.&#13;
 *&#13;
 * @param ptr The allocated structure&#13;
 * @return the long scanned from the input&#13;
 */&#13;
int64_t nextLong(Scanner *ptr) {&#13;
    return Long_parseLong(_getNextToken(ptr));&#13;
}&#13;
&#13;
/**&#13;
 * Scans the next token of the input as a float.&#13;
 *&#13;
 * @param ptr The allocated structure&#13;
 * @return the float scanned from the input&#13;
 */&#13;
float nextFloat(Scanner *ptr) {&#13;
    return Float_parseFloat(_getNextToken(ptr));&#13;
}&#13;
&#13;
/**&#13;
 * Scans the next token of the input as a double.&#13;
 *&#13;
 * @param ptr The allocated structure&#13;
 * @return the double scanned from the input&#13;
 */&#13;
double nextDouble(Scanner *ptr) {&#13;
    return Double_parseDouble(_getNextToken(ptr));&#13;
}&#13;
&#13;
/**&#13;
 * Advances the specified scanner past the current line and returns the input that was skipped.&#13;
 *&#13;
 * @param ptr The allocated structure&#13;
 * @return the line that was skipped&#13;
 */&#13;
String *nextLine(Scanner *ptr) {&#13;
    if (strlen(ptr-&gt;line) == 0) {&#13;
        return _readLine();&#13;
    }&#13;
    &#13;
    String *str = new_String(ptr-&gt;line);&#13;
    free(ptr-&gt;line);&#13;
    ptr-&gt;line = malloc(sizeof(char));&#13;
    ptr-&gt;line[0] = '\0';&#13;
&#13;
    return str;&#13;
}</code>
<code lang="C++">#ifndef SCANNER_INCLUDED&#13;
#define	SCANNER_INCLUDED&#13;
&#13;
#include "System.h"&#13;
#include "String_.h"&#13;
#include &lt;cstdint&gt;&#13;
&#13;
/**&#13;
 * A simple text scanner which can parse primitive types and strings using regular expressions.&#13;
 *&#13;
 * @author Petr Kozler (A13B0359P)&#13;
 */&#13;
class Scanner : public Object {&#13;
    std::string line;&#13;
    String *readLine();&#13;
    bool isEmptyOrWhiteSpace(std::string line);&#13;
    std::string trimStart(std::string line);&#13;
    std::string removeLineToWhiteSpace();&#13;
    String *getNextToken();&#13;
public:&#13;
    Scanner(InputStream *source);&#13;
    String *next();&#13;
    bool nextBoolean();&#13;
    int8_t nextByte();&#13;
    int16_t nextShort();&#13;
    int32_t nextInt();&#13;
    int64_t nextLong();&#13;
    float nextFloat();&#13;
    double nextDouble();&#13;
    String *nextLine();&#13;
};&#13;
&#13;
#endif	// SCANNER_INCLUDED&#13;
&#13;
&#13;
#include "Scanner.h"

#include &lt;cstdlib&gt;
#include &lt;sstream&gt;
#include "Boolean.h"
#include "Byte.h"
#include "Short.h"
#include "Integer.h"
#include "Long.h"
#include "Float.h"
#include "Double.h"

String *Scanner::readLine() {
    std::string line;
    std::getline(std::cin, line);
    
    return new String(line);
}

bool Scanner::isEmptyOrWhiteSpace(std::string line) {
    return line.size() == 0 || 
            line.find_first_not_of(" \t\n\x0b\f\r") == std::string::npos;
}

std::string Scanner::trimStart(std::string line) {
    const char* white_spaces = " \t\n\x0b\r\f";

    int32_t first = line.find_first_not_of(white_spaces);
    
    if (first == std::string::npos) {
        return "";
    }

    return line.substr(first, line.size());
}

std::string Scanner::removeLineToWhiteSpace() {
    this-&gt;line = trimStart(this-&gt;line);
    int32_t i = line.find_first_of(" \t\n\x0b\f\r");
    std::string token = this-&gt;line.substr(0, i);
    this-&gt;line = this-&gt;line.erase(0, i);
    
    return token;
}

String *Scanner::getNextToken() {
    while (isEmptyOrWhiteSpace(this-&gt;line)) {
        String *line = readLine();
        this-&gt;line = trimStart(line-&gt;_s());
        delete line;
    }

    return new String(removeLineToWhiteSpace()); 
}

/**
 * Constructs a new Scanner that produces values scanned from the specified
 * input stream.
 *
 * @param source An input stream to be scanned
 */
Scanner::Scanner(InputStream *source) {
    this-&gt;line = "";
}

/**
 * Finds and returns the next complete token from this scanner.
 *
 * @return the next token
 */
String *Scanner::next() {
    return getNextToken();
}

/**
 * Scans the next token of the input into a boolean value and returns that
 * value.
 *
 * @return the boolean scanned from the input
 */
bool Scanner::nextBoolean() {
    return Boolean::parseBoolean(getNextToken());
}

/**
 * Scans the next token of the input as a byte.
 *
 * @return the byte scanned from the input
 */
int8_t Scanner::nextByte() {
    return Byte::parseByte(getNextToken());
}

/**
 * Scans the next token of the input as a short.
 *
 * @return the short scanned from the input
 */
int16_t Scanner::nextShort() {
    return Short::parseShort(getNextToken());
}

/**
 * Scans the next token of the input as an int.
 *
 * @return the int scanned from the input
 */
int32_t Scanner::nextInt() {
    return Integer::parseInt(getNextToken());
}

/**
 * Scans the next token of the input as a long.
 * 
 * @return the long scanned from the input
 */
int64_t Scanner::nextLong() {
    return Long::parseLong(getNextToken());
}

/**
 * Scans the next token of the input as a float.
 * 
 * @return the float scanned from the input
 */
float Scanner::nextFloat() {
    return Float::parseFloat(getNextToken());
}

/**
 * Scans the next token of the input as a double.
 * 
 * @return the double scanned from the input
 */
double Scanner::nextDouble() {
    return Double::parseDouble(getNextToken());
}

/**
 * Advances this scanner past the current line and returns the input that was skipped.
 * 
 * @return the line that was skipped
 */
String *Scanner::nextLine() {
    if ((this-&gt;line.size()) == 0) {
        return readLine();
    }
    
    String *str = new String(this-&gt;line);
    this-&gt;line = "";

    return str;
}
</code>
<code lang="C#">﻿using System;&#13;
using System.Text.RegularExpressions;&#13;
using System.Threading;&#13;
&#13;
namespace JavaClasses&#13;
{&#13;
&#13;
    /// &lt;summary&gt;&#13;
    /// A simple text scanner which can parse primitive types and strings using regular expressions.&#13;
    /// &lt;/summary&gt;&#13;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;&#13;
    public class Scanner : Object&#13;
    {&#13;
&#13;
        // current line&#13;
        private string line = "";&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Constructs a new Scanner that produces values scanned from the specified&#13;
        /// input stream.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="source"&gt;An input stream to be scanned&lt;/param&gt;&#13;
        public Scanner(InputStream source)&#13;
        {&#13;
            Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;&#13;
        }&#13;
&#13;
        /*&#13;
             Returns the next token of the current line or reads the new line&#13;
             from the standard input if the current line has been scanned completely.&#13;
         */&#13;
        private String getNextToken()&#13;
        {&#13;
            // reading the next line if the current is empty&#13;
            while (string.IsNullOrWhiteSpace(line))&#13;
            {&#13;
                // removing all leading whitespaces&#13;
                line = Console.ReadLine().TrimStart();&#13;
            }&#13;
            &#13;
            // getting the next token (all characters to the first whitespace) from the current line&#13;
            Match match = Regex.Match(line, @"([^\s]+)");&#13;
            // removing the token from the current line&#13;
            line = line.Remove(0, match.Index + match.Length);&#13;
&#13;
            return match.Value;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Finds and returns the next complete token from this scanner.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;the next token&#13;
        /// &lt;/returns&gt;&#13;
        public String next()&#13;
        {&#13;
            return getNextToken();&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Scans the next token of the input into a boolean value and returns that&#13;
        /// value.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;the boolean scanned from the input&#13;
        /// &lt;/returns&gt;&#13;
        public bool nextBoolean()&#13;
        {&#13;
            return Boolean.parseBoolean(getNextToken());&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Scans the next token of the input as a byte.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;the byte scanned from the input&#13;
        /// &lt;/returns&gt;&#13;
        public sbyte nextByte()&#13;
        {&#13;
            return Byte.parseByte(getNextToken());&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Scans the next token of the input as a short.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;the short scanned from the input&#13;
        /// &lt;/returns&gt;&#13;
        public short nextShort()&#13;
        {&#13;
            return Short.parseShort(getNextToken());&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Scans the next token of the input as an int.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;the int scanned from the input&#13;
        /// &lt;/returns&gt;&#13;
        public int nextInt()&#13;
        {&#13;
            return Integer.parseInt(getNextToken());&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Scans the next token of the input as a long.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;the long scanned from the input&#13;
        /// &lt;/returns&gt;&#13;
        public long nextLong()&#13;
        {&#13;
            return Long.parseLong(getNextToken());&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Scans the next token of the input as a float.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;the float scanned from the input&#13;
        /// &lt;/returns&gt;&#13;
        public float nextFloat()&#13;
        {&#13;
            return Float.parseFloat(getNextToken());&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Scans the next token of the input as a double.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;the double scanned from the input&#13;
        /// &lt;/returns&gt;&#13;
        public double nextDouble()&#13;
        {&#13;
            return Double.parseDouble(getNextToken());&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Advances this scanner past the current line and returns the input that was skipped.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;the line that was skipped&#13;
        /// &lt;/returns&gt;&#13;
        public String nextLine()&#13;
        {&#13;
            // reading the next line if the current is empty&#13;
            if (string.IsNullOrEmpty(line))&#13;
            {&#13;
                return Console.ReadLine();&#13;
            }&#13;
&#13;
            // returning the rest of the current line if not empty&#13;
            String str = line;&#13;
            line = "";&#13;
&#13;
            return str;&#13;
        }&#13;
&#13;
    }&#13;
&#13;
}&#13;
</code>
<code lang="Free Pascal">unit ScannerUnit;

{$mode objfpc}{$H+}

interface

uses
  StringUnit, SystemUnit, BooleanUnit, ByteUnit, ShortUnit, IntegerUnit, LongUnit, FloatUnit, DoubleUnit;

type
  (**
   * A simple text scanner which can parse primitive types and strings using regular expressions.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  Scanner = class(Object_)
    private
      var line: ansiString;
      function readLine() : String_;
      function isEmptyOrWhiteSpace(l: ansiString) : boolean;
      function removeLineToWhiteSpace() : ansiString;
      function getNextToken() : String_;
    public
      constructor create(source: InputStream);
      function next() : String_;
      function nextBoolean() : boolean;
      function nextByte() : shortInt;
      function nextShort() : smallInt;
      function nextInt() : longInt;
      function nextLong() : int64;
      function nextFloat() : single;
      function nextDouble() : double;
      function nextLine() : String_;
  end;

implementation

uses
  SysUtils;

function Scanner.readLine() : String_;
var
  l: ansiString;
begin
  readLn(l);
  readLine := String_.create(l);
end;

function Scanner.isEmptyOrWhiteSpace(l: ansiString) : boolean;
var
  len, i: longInt;
begin
  len := length(l);

  if len = 0 then begin
    exit(true);
  end;

  for i := 1 to len do begin
    if l[i] &gt; ' ' then begin
      exit(false);
    end;
  end;

  isEmptyOrWhiteSpace := true;
end;

function Scanner.removeLineToWhiteSpace() : ansiString;
var
  len, i: longInt;
  token: ansiString;
begin
  len := length(line);
  line := trimLeft(line);

  for i := 1 to len do begin
    if line[i] &lt;= ' ' then begin
      break;
    end;
  end;

  token := copy(line, 1, i);
  delete(line, 1, i);
  removeLineToWhiteSpace := token;
end;

function Scanner.getNextToken() : String_;
var
  l: String_;

begin
  while isEmptyOrWhiteSpace(line) do begin
    l := readLine();
    line := trimLeft(l.strProperty);
    freeAndNil(l);
  end;

  getNextToken := String_.create(removeLineToWhiteSpace());
end;

(**
 * Constructs a new Scanner that produces values scanned from the specified
 * input stream.
 *
 * @param source An input stream to be scanned
 *)
constructor Scanner.create(source: InputStream);
begin
  line := '';
end;

(**
 * Finds and returns the next complete token from this scanner.
 *
 * @return the next token
 *)
function Scanner.next() : String_;
begin
  next := getNextToken();
end;

(**
 * Scans the next token of the input into a boolean value and returns that
 * value.
 *
 * @return the boolean scanned from the input
 *)
function Scanner.nextBoolean() : boolean;
begin
  nextBoolean := Boolean_.parseBoolean(getNextToken());
end;

(**
 * Scans the next token of the input as a byte.
 *
 * @return the byte scanned from the input
 *)
function Scanner.nextByte() : shortInt;
begin
  nextByte := Byte_.parseByte(getNextToken());
end;

(**
 * Scans the next token of the input as a short.
 *
 * @return the short scanned from the input
 *)
function Scanner.nextShort() : smallInt;
begin
  nextShort := Short.parseShort(getNextToken());
end;

(**
 * Scans the next token of the input as an int.
 *
 * @return the int scanned from the input
 *)
function Scanner.nextInt() : longInt;
begin
  nextInt := Integer_.parseInt(getNextToken());
end;

(**
 * Scans the next token of the input as a long.
 *
 * @return the long scanned from the input
 *)
function Scanner.nextLong() : int64;
begin
  nextLong := Long.parseLong(getNextToken());
end;

(**
 * Scans the next token of the input as a float.
 *
 * @return the float scanned from the input
 *)
function Scanner.nextFloat() : single;
begin
  nextFloat := Float.parseFloat(getNextToken());
end;

(**
 * Scans the next token of the input as a double.
 *
 * @return the double scanned from the input
 *)
function Scanner.nextDouble() : double;
begin
  nextDouble := Double_.parseDouble(getNextToken());
end;

(**
 * Advances this scanner past the current line and returns the input that was skipped.
 *
 * @return the line that was skipped
 *)
function Scanner.nextLine() : String_;
var
  str: String_;
begin
  if length(line) = 0 then begin
     exit(readLine());
  end;

  str := String_.create(line);
  line := '';
  nextLine := str;
end;

end.

</code>

</codes>
