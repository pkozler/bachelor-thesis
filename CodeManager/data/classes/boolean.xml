<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef BOOLEAN_INCLUDED
#define BOOLEAN_INCLUDED

#include "String_.h"
#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;

/**
 * The Boolean struct wraps a value of the type bool, representing a boolean value.
 *
 * @author Petr Kozler (A13B0359P)
 */

typedef struct {
    bool v;
} Boolean;

Boolean *new_Boolean(bool value);
bool booleanValue(Boolean *ptr);
int32_t compareToBool(Boolean *ptr, Boolean *b);
int32_t Boolean_compare(bool x, bool y);
bool equalsBool(Boolean *ptr, Boolean *obj);
String *toStringBool(Boolean *ptr);
String *Boolean_toString(bool b);
bool Boolean_parseBoolean(String *s);

#endif /* BOOLEAN_INCLUDED */


#include "Boolean.h"

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

// maximum possible string length of the bool value used as the string buffer size
#define _MAX_BOOL_STRLEN 5

/**
 * Allocates a Boolean structure representing the value argument.
 *
 * @param value the value of the Boolean.
 */
Boolean *new_Boolean(bool value) {
    Boolean *b = malloc(sizeof(Boolean));
    b-&gt;v = value;

    return b;
}

/**
 * Returns the value of the specified Boolean structure as a boolean primitive.
 *
 * @param ptr The allocated structure
 * @return the primitive boolean value of the specified structure.
 */
bool booleanValue(Boolean *ptr) {
    return ptr-&gt;v;
}

/**
 * Compares the one specified Boolean instance with another.
 *
 * @param ptr The allocated structure
 * @param b the Boolean instance to be compared
 * @return zero if the first specified structure represents the same boolean value as the
 * second; a positive value if the first structure represents true and the
 * second represents false; and a negative value if the first structure represents
 * false and the second represents true
 */
int32_t compareToBool(Boolean *ptr, Boolean *b) {
    return Boolean_compare(ptr-&gt;v, b-&gt;v);
}

/**
 * Compares two boolean values.
 *
 * @param x the first boolean to compare
 * @param y the second boolean to compare
 * @return the value 0 if x == y; a value less than 0 if !x &amp;&amp; y; and a
 * value greater than 0 if x &amp;&amp; !y
 */
int32_t Boolean_compare(bool x, bool y) {
    // 0 if x equals y, 1 if x is TRUE and y is FALSE, -1 otherwise
    return (x == y) ? 0 : (x ? 1 : -1);
}

/**
 * Returns true if and only if the arguments are not null and are a Boolean
 * structures that represents the same boolean value.
 *
 * @param ptr The allocated structure
 * @param obj the structure to compare with.
 * @return true if the Boolean structures represent the same value; false
 * otherwise.
 */
bool equalsBool(Boolean *ptr, Boolean *obj) {
    // testing another object reference for a NULL value
    if (ptr == NULL || obj == NULL) {
        return false;
    }

    // testing object class equality
    if (sizeof(*ptr) != sizeof(*obj)) {
        return false;
    }

    // testing object fields equality
    return (ptr-&gt;v == obj-&gt;v);
}

/**
 * Returns a String structure representing the specified Boolean's value.
 *
 * @param ptr The allocated structure
 * @return a string representation of the specified structure.
 */
String *toStringBool(Boolean *ptr) {
    return Boolean_toString(ptr-&gt;v);
}

/**
 * Returns a String structure representing the specified boolean.
 *
 * @param b the boolean to be converted
 * @return the string representation of the specified boolean
 */
String *Boolean_toString(bool b) {
    char *str = malloc(_MAX_BOOL_STRLEN + 1);
    char buf[_MAX_BOOL_STRLEN];

    str[0] = '\0';
    // printing the string representation to the buffer
    sprintf(buf, "%s", b ? "true" : "false");
    // creating the null-terminated string from the buffer
    strcat(str, buf);
    String *s = new_String(str);
    free(str);
    
    return s;
}

/**
 * Parses the string argument as a boolean.
 *
 * @param s the String containing the boolean representation to be parsed
 * @return the boolean represented by the string argument
 */
bool Boolean_parseBoolean(String *s) {
    String *trueStr = new_String("true");
    String *falseStr = new_String("false");
    String *trimmedStr = trim(s);
    String *str = toLowerCase(trimmedStr);
    bool value = false;

    // test if the string is equal to "true"
    if (equalsStr(str, trueStr)) {
        value = true;
    }
    // test if the string is equal to "false"
    else if (equalsStr(str, falseStr)) {
        value = false;
    }

    free(trueStr);
    free(falseStr);
    free(trimmedStr);
    free(str);
    
    return value;
}
</code>
<code lang="C++">#ifndef BOOLEAN_INCLUDED
#define BOOLEAN_INCLUDED

#include "String_.h"
#include &lt;cstdint&gt;

/**
 * The Boolean class wraps a value of the primitive type bool (representing a boolean value) in an object.
 *
 * @author Petr Kozler (A13B0359P)
 */
class Boolean : public Comparable {
    // an inner value
    bool v;
public:
    Boolean(bool value);
    bool booleanValue();
    int32_t compareTo(Object *b);
    static int32_t compare(bool x, bool y);
    bool equals(Object *obj);
    String *toString();
    static String *toString(bool b);
    static bool parseBoolean(String *s);
};

#endif // BOOLEAN_INCLUDED


#include "Boolean.h"

/**
 * Allocates a Boolean object representing the value argument.
 *
 * @param value the value of the Boolean.
 */
Boolean::Boolean(bool value) {
    v = value;
}

/**
 * Returns the value of this Boolean object as a boolean primitive.
 *
 * @return the primitive boolean value of this object.
 */
bool Boolean::booleanValue() {
    return v;
}

/**
 * Compares this Boolean instance with another.
 *
 * @param b the Boolean instance to be compared
 * @return zero if this object represents the same boolean value as the
 * argument; a positive value if this object represents true and the
 * argument represents false; and a negative value if this object represents
 * false and the argument represents true
 */
int32_t Boolean::compareTo(Object *b) {
    return compare(v, ((Boolean *)b)-&gt;v);
}

/**
 * Compares two boolean values.
 *
 * @param x the first boolean to compare
 * @param y the second boolean to compare
 * @return the value 0 if x == y; a value less than 0 if !x &amp;&amp; y; and a
 * value greater than 0 if x &amp;&amp; !y
 */
int32_t Boolean::compare(bool x, bool y) {
    // 0 if x equals y, 1 if x is TRUE and y is FALSE, -1 otherwise
    return (x == y) ? 0 : (x ? 1 : -1);
}

/**
 * Returns true if and only if the argument is not null and is a Boolean
 * object that represents the same boolean value as this object.
 *
 * @param obj the object to compare with.
 * @return true if the Boolean objects represent the same value; false
 * otherwise.
 */
bool Boolean::equals(Object *obj) {
    // testing another object reference for a NULL value
    if (obj == nullptr) {
        return false;
    }

    // testing object class equality
    if (sizeof(this) != sizeof(*obj)) {
        return false;
    }

    // testing object fields equality
    return (v == ((Boolean *)obj)-&gt;v);
}

/**
 * Returns a String object representing this Boolean's value.
 * 
 * @return a string representation of this object.
 */
String *Boolean::toString() {
    return toString(v);
}

/**
 * Returns a String object representing the specified boolean.
 *
 * @param b the boolean to be converted
 * @return the string representation of the specified boolean
 */
String *Boolean::toString(bool b) {
    return new String(b ? "true" : "false");
}

/**
 * Parses the string argument as a boolean.
 *
 * @param s the String containing the boolean representation to be parsed
 * @return the boolean represented by the string argument
 */
bool Boolean::parseBoolean(String *s) {
    String *trueStr = new String("true");
    String *falseStr = new String("false");
    String *trimmedStr = s-&gt;trim();
    String *str = trimmedStr-&gt;toLowerCase();
    bool value = false;

    // test if the string is equal to "true"
    if (str-&gt;equals(trueStr)) {
        value = true;
    }
    // test if the string is equal to "false"
    else if (str-&gt;equals(falseStr)) {
        value = false;
    }

    delete trueStr;
    delete falseStr;
    delete trimmedStr;
    delete str;

    return value;
}</code>
<code lang="C#">ï»¿using System;

namespace JavaClasses
{

    /// &lt;summary&gt;
    /// The Boolean class wraps a value of the primitive type bool (representing a boolean value) in an object.
    /// &lt;/summary&gt;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;
    public class Boolean : Comparable
    {

        // an inner value
        private bool v;

        /// &lt;summary&gt;
        /// Allocates a Boolean object representing the value argument.
        /// &lt;/summary&gt;
        /// &lt;param name="value"&gt;the value of the Boolean.
        /// &lt;/param&gt;
        public Boolean(bool value)
        {
            v = value;
        }

        /// &lt;summary&gt;
        /// Returns the value of this Boolean object as a boolean primitive.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the primitive boolean value of this object.
        /// &lt;/returns&gt;
        public bool booleanValue()
        {
            return v;
        }

        /// &lt;summary&gt;
        /// Compares this Boolean instance with another.
        /// &lt;/summary&gt;
        /// &lt;param name="b"&gt;the Boolean instance to be compared
        /// &lt;/param&gt;&lt;returns&gt;zero if this object represents the same boolean value as the
        /// argument; a positive value if this object represents true and the
        /// argument represents false; and a negative value if this object represents
        /// false and the argument represents true
        /// &lt;/returns&gt;
        public override int compareTo(Object b)
        {
            return compare(v, (b as Boolean).v);
        }

        /// &lt;summary&gt;
        /// Compares two boolean values.
        /// &lt;/summary&gt;
        /// &lt;param name="x"&gt;the first boolean to compare
        /// &lt;/param&gt;&lt;param name="y"&gt;the second boolean to compare
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if x == y; a value less than 0 if !x &amp;&amp; y; and a
        /// value greater than 0 if x &amp;&amp; !y
        /// &lt;/returns&gt;
        public static int compare(bool x, bool y)
        {
            // 0 if x equals y, 1 if x is TRUE and y is FALSE, -1 otherwise
            return (x == y) ? 0 : (x ? 1 : -1);
        }

        /// &lt;summary&gt;
        /// Returns true if and only if the argument is not null and is a Boolean
        /// object that represents the same boolean value as this object.
        /// &lt;/summary&gt;
        /// &lt;param name="obj"&gt;the object to compare with.
        /// &lt;/param&gt;&lt;returns&gt;true if the Boolean objects represent the same value; false
        /// otherwise.
        /// &lt;/returns&gt;
        public override bool equals(Object obj)
        {
            // testing another object reference for a NULL value
            if (obj == null)
            {
                return false;
            }

            // testing object class equality
            if (GetType() != obj.GetType())
            {
                return false;
            }

            // testing object fields equality
            return v.Equals((obj as Boolean).v);
        }

        /// &lt;summary&gt;
        /// Returns a String object representing this Boolean's value.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;a string representation of this object.
        /// &lt;/returns&gt;
        public override String toString()
        {
            return Boolean.toString(v);
        }

        /// &lt;summary&gt;
        /// Returns a String object representing the specified boolean.
        /// &lt;/summary&gt;
        /// &lt;param name="b"&gt;the boolean to be converted
        /// &lt;/param&gt;&lt;returns&gt;the string representation of the specified boolean
        /// &lt;/returns&gt;
        public static String toString(bool b)
        {
            return new String(b.ToString().ToLower());
        }

        /// &lt;summary&gt;
        /// Parses the string argument as a boolean.
        /// &lt;/summary&gt;
        /// &lt;param name="s"&gt;the String containing the boolean representation to be parsed
        /// &lt;/param&gt;&lt;returns&gt;the boolean represented by the string argument
        /// &lt;/returns&gt;
        public static bool parseBoolean(String s)
        {
            return bool.Parse(s.ToString());
        }
        
        public static implicit operator Boolean(bool original)
        {
            return new Boolean(original);
        }
        
    }

}
</code>
<code lang="Free Pascal">unit BooleanUnit;

{$mode objfpc}{$H+}

interface

uses
  SysUtils, StringUnit;

type
  (**
   * The Boolean class wraps a value of the primitive type boolean in an object.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  Boolean_ = class(Comparable)
    private
      var
        // an inner value
        v : boolean;
    public
      constructor create(value: boolean);
      function booleanValue() : boolean;
      function compareTo(b: Object_) : longInt; override;
      class function compare(x, y: boolean) : longInt;
      function equals_(obj: Object_) : boolean; override;
      function toString_() : String_; override;
      class function toString_(b: boolean) : String_;
      class function parseBoolean(s: String_) : boolean;
  end;

implementation

(**
 * Allocates a Boolean object representing the value argument.
 *
 * @param value the value of the Boolean.
 *)
constructor Boolean_.create(value: boolean);
begin
  v := value;
end;

(**
 * Returns the value of this Boolean object as a boolean primitive.
 *
 * @return the primitive boolean value of this object.
 *)
function Boolean_.booleanValue() : boolean;
begin
  booleanValue := v;
end;

(**
 * Compares this Boolean instance with another.
 *
 * @param b the Boolean instance to be compared
 * @return zero if this object represents the same boolean value as the
 * argument; a positive value if this object represents true and the
 * argument represents false; and a negative value if this object represents
 * false and the argument represents true
 *)
function Boolean_.compareTo(b: Object_) : longInt;
begin
  compareTo := compare(v, (b as Boolean_).v);
end;

(**
 * Compares two boolean values.
 *
 * @param x the first boolean to compare
 * @param y the second boolean to compare
 * @return the value 0 if x == y; a value less than 0 if !x &amp;&amp; y; and a
 * value greater than 0 if x &amp;&amp; !y
 *)
class function Boolean_.compare(x, y: boolean) : longInt;
begin
  // 0 if x equals y, 1 if x is TRUE and y is FALSE, -1 otherwise
  if x = y then begin
    compare := 0;
  end
  else if x then begin
    compare := 1;
  end
  else begin
    compare := -1;
  end;
end;

(**
 * Returns true if and only if the argument is not null and is a Boolean
 * object that represents the same boolean value as this object.
 *
 * @param obj the object to compare with.
 * @return true if the Boolean objects represent the same value; false
 * otherwise.
 *)
function Boolean_.equals_(obj: Object_) : boolean;
begin
  // testing another object reference for a NULL value
  if obj = nil then begin
    exit(false);
  end;

  // testing object class equality
  if typeOf(self) &lt;&gt; typeOf(obj) then begin
    exit(false);
  end;

  // testing object fields equality
  equals_ := v = (obj as Boolean_).v;
end;

(**
 * Returns a String object representing this Boolean's value.
 *
 * @return a string representation of this object.
 *)
function Boolean_.toString_() : String_;
begin
  toString_ := Boolean_.toString_(v);
end;

(**
 * Returns a String object representing the specified boolean.
 *
 * @param b the boolean to be converted
 * @return the string representation of the specified boolean
 *)
class function Boolean_.toString_(b: boolean) : String_;
var
  s: ansiString;
begin
  if b then begin
    s := 'true';
  end
  else begin
    s := 'false';
  end;

  toString_ := String_.create(s);
end;

(**
 * Parses the string argument as a boolean.
 *
 * @param s the String containing the boolean representation to be parsed
 * @return the boolean represented by the string argument
 *)
class function Boolean_.parseBoolean(s: String_) : boolean;
var
  str: ansiString;
begin
  // test if the string is equal to "true"
  str := lowerCase(trim(s.strProperty));
  if ansiCompareStr(str, 'true') = 0 then begin
    exit(true);
  end;

  // return false otherwise
  parseBoolean := false;
end;

operator := (original: boolean) s: Boolean_;
begin
  s.create(original);
end;

end.
</code>

</codes>
