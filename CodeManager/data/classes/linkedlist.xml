<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef LINKEDLIST_INCLUDED
#define LINKEDLIST_INCLUDED

#include "String_.h"
#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;

/**
 * Struct definition for the doubly-linked list implementation of the list data structure.
 *
 * @author Petr Kozler (A13B0359P)
 */

/*
    LinkedListNode structure represents the node in the doubly-linked list
    containing the element and the pointers to the next and the previous node in the list.
 */
typedef struct LINKED_LIST_NODE {
    // stored element
    void *value;
    // next node in the list
    struct LINKED_LIST_NODE *next;
    // previous node in the list
    struct LINKED_LIST_NODE *previous;
} LinkedListNode;

typedef struct {
    // list element count
    int32_t count;
    // first node in the list
    LinkedListNode *first;
    // last node in the list
    LinkedListNode *last;
} LinkedList;

LinkedList *new_LinkedList();
LinkedList *new_LinkedListAddAll(LinkedList *c);
void delete_LinkedList(LinkedList *ptr);
bool addLl(LinkedList *ptr, void *e);
void addAtLl(LinkedList *ptr, int32_t index, void *element);
void *getLl(LinkedList *ptr, int32_t index);
void *setLl(LinkedList *ptr, int32_t index, void *element);
void *removeLl(LinkedList *ptr, int32_t index);
int32_t sizeLl(LinkedList *ptr);
bool isEmptyLl(LinkedList *ptr);
void clearLl(LinkedList *ptr);
String *toStringLl(LinkedList *ptr, String *(*toString)(void *));

#endif /* LINKEDLIST_INCLUDED */


#include "LinkedList.h"

#include "StringBuilder.h"
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

/**
 * Constructs an empty list.
 */
LinkedList *new_LinkedList() {
    LinkedList *list = malloc(sizeof(LinkedList));
    list-&gt;count = 0;
    // setting the empty nodes
    list-&gt;first = NULL;
    list-&gt;last = NULL;

    return list;
}

/**
 * Constructs a list containing the elements of the specified linked list, in
 * the order they are returned by the iteration over the list.
 *
 * @param c the linked list whose elements are to be placed into the specified list
 */
LinkedList *new_LinkedListAddAll(LinkedList *c) {
    LinkedList *list = new_LinkedList();
    LinkedListNode *node = c-&gt;first;

    // copying all elements from the specified list
    while (node != NULL) {
        addLl(list, node-&gt;value);
        node = node-&gt;next;
    }

    return list;
}

/*
    Destructs the LinkedList.
 */
void delete_LinkedList(LinkedList *ptr) {
    clearLl(ptr);
    free(ptr);
}

/*
    Adds the new node after the specified existing node in the list and updates the pointers.
 */
void _addAfter(LinkedList *ptr, LinkedListNode *node, LinkedListNode *newNode) {
    newNode-&gt;previous = node;
    newNode-&gt;next = node-&gt;next;

    if (node-&gt;next == NULL) {
        ptr-&gt;last = newNode;
    }
    else {
        node-&gt;next-&gt;previous = newNode;
    }

    node-&gt;next = newNode;
}

/*
    Adds the new node before the specified existing node in the list and updates the pointers.
 */
void _addBefore(LinkedList *ptr, LinkedListNode *node, LinkedListNode *newNode) {
    newNode-&gt;previous = node-&gt;previous;
    newNode-&gt;next = node;

    if (node-&gt;previous == NULL) {
        ptr-&gt;first = newNode;
    }
    else {
        node-&gt;previous-&gt;next = newNode;
    }

    node-&gt;previous = newNode;
}

/*
    Adds the new node to the beginning of the list and updates the pointers.
 */
void _addFirst(LinkedList *ptr, LinkedListNode *newNode) {
    if (ptr-&gt;first == NULL) {
        ptr-&gt;first = newNode;
        ptr-&gt;last = newNode;
        newNode-&gt;previous = NULL;
        newNode-&gt;next = NULL;
    }
    else {
        _addBefore(ptr, ptr-&gt;first, newNode);
    }
}

/*
    Adds the new node to the end of the list and updates the pointers.
 */
void _addLast(LinkedList *ptr, LinkedListNode *newNode) {
    if (ptr-&gt;last == NULL) {
        _addFirst(ptr, newNode);
    }
    else {
        _addAfter(ptr, ptr-&gt;last, newNode);
    }
}

/*
    Removes the specified existing node from the list and updates the pointers.
 */
void _removeNode(LinkedList *ptr, LinkedListNode *node) {
    if (node-&gt;previous == NULL) {
        ptr-&gt;first = node-&gt;next;
    }
    else {
        node-&gt;previous-&gt;next = node-&gt;next;
    }

    if (node-&gt;next == NULL) {
        ptr-&gt;last = node-&gt;previous;
    }
    else {
        node-&gt;next-&gt;previous = node-&gt;previous;
    }
}

/**
 * Appends the specified element to the end of the specified list.
 *
 * @param ptr The allocated structure
 * @param e element to be appended to the specified list
 * @return true
 */
bool addLl(LinkedList *ptr, void *e) {
    // creating the node for storing the element
    LinkedListNode *newNode = malloc(sizeof(LinkedListNode));
    newNode-&gt;value = e;
    // adding as the last node of the list
    _addLast(ptr, newNode);
    ptr-&gt;count++;

    return true;
}

/**
 * Inserts the specified element at the specified position in the specified list.
 *
 * @param ptr The allocated structure
 * @param index index at which the specified element is to be inserted
 * @param element element to be inserted
 */
void addAtLl(LinkedList *ptr, int32_t index, void *element) {
    // creating the node for storing the element
    LinkedListNode *newNode = malloc(sizeof(LinkedListNode));
    newNode-&gt;value = element;
    
    // adding as the first node of the list if the list is currently empty
    if (ptr-&gt;count &lt; 1) {
        _addFirst(ptr, newNode);
    }
    else {
        LinkedListNode *node = ptr-&gt;first;
    
        // adding before the first node of the list if the index is 0
        if (index &lt; 1) {
            _addBefore(ptr, node, newNode);
        }
        else {
            
            int32_t i;
            for (i = 1; i &lt; index; i++) {
                node = node-&gt;next;
            }

            // adding after the node found on the specified position, if the index is not 0
            _addAfter(ptr, node, newNode);
        }
    }
    
    ptr-&gt;count++;
}

/**
 * Returns the element at the specified position in the specified list.
 *
 * @param ptr The allocated structure
 * @param index index of the element to return
 * @return the element at the specified position in the specified list
 */
void *getLl(LinkedList *ptr, int32_t index) {
    LinkedListNode *node = ptr-&gt;first;

    // iterating over the list to the node on the specified position
    int32_t i;
    for (i = 0; i &lt; index; i++) {
        node = node-&gt;next;
    }

    return node-&gt;value;
}

/**
 * Replaces the element at the specified position in the specified list with the
 * specified element.
 *
 * @param ptr The allocated structure
 * @param index index of the element to replace
 * @param element element to be stored at the specified position
 * @return the element previously at the specified position
 */
void *setLl(LinkedList *ptr, int32_t index, void *element) {
    LinkedListNode *original;

    // setting the first node if the index is 0
    if (index &lt; 1) {
        original = ptr-&gt;first-&gt;value;
        ptr-&gt;first-&gt;value = element;
    }
    else {
        LinkedListNode *node = ptr-&gt;first;

        int32_t i;
        for (i = 0; i &lt; index; i++) {
            node = node-&gt;next;
        }

        // setting the node on the specified position
        original = node-&gt;value;
        node-&gt;value = element;
    }

    return original;
}

/**
 * Removes the element at the specified position in the specified list.
 *
 * @param ptr The allocated structure
 * @param index the index of the element to be removed
 * @return the element previously at the specified position
 */
void *removeLl(LinkedList *ptr, int32_t index) {
    LinkedListNode *removed;
    LinkedListNode *node;

    // removing the first node if the index is 0
    if (index &lt; 1) {
        node = ptr-&gt;first;
        removed = node-&gt;value;
        _removeNode(ptr, node);
        free(node);
    }
    else {
        node = ptr-&gt;first;

        int32_t i;
        for (i = 0; i &lt; index; i++) {
            node = node-&gt;next;
        }

        // removing the node on the specified position
        removed = node-&gt;value;
        _removeNode(ptr, node);
        free(node);
    }

    ptr-&gt;count--;

    return removed;
}

/**
 * Returns the number of elements in the specified list.
 *
 * @param ptr The allocated structure
 * @return the number of elements in the specified list
 */
int32_t sizeLl(LinkedList *ptr) {
    return ptr-&gt;count;
}

/**
 * Returns true if the specified list contains no elements.
 *
 * @param ptr The allocated structure
 * @return true if the specified list contains no elements
 */
bool isEmptyLl(LinkedList *ptr) {
    return (ptr-&gt;count == 0);
}

/**
 * Removes all of the elements from the specified list.
 *
 * @param ptr The allocated structure
 */
void clearLl(LinkedList *ptr) {
    LinkedListNode *node;
    ptr-&gt;count = 0;

    // deallocating the memory of the each list node after removing it
    while (ptr-&gt;first != NULL) {
        node = ptr-&gt;first;
        _removeNode(ptr, node);
        free(node);
    }
}

/**
 * Returns a string representation of the structure.
 *
 * @param ptr The allocated structure
 * @param toString The list element toString function
 * @return a string representation of the structure.
 */
String *toStringLl(LinkedList *ptr, String *(*toString)(void *)) {
    // create StringBuilder for appending the text
    StringBuilder *sb = new_StringBuilder();
    String *str = new_String("[");
    append(sb, str);
    delete_String(str);
    LinkedListNode *node = ptr-&gt;first;

    // append first element string representation
    if (node != NULL) {
        str = node-&gt;value == NULL ? new_String("null") : toString(node-&gt;value);
        append(sb, str);
        delete_String(str);
        node = node-&gt;next;
    }

    // append another elements string representation
    while (node != NULL) {
        str = new_String(", ");
        append(sb, str);
        delete_String(str);
        str = node-&gt;value == NULL ? new_String("null") : toString(node-&gt;value);
        append(sb, str);
        delete_String(str);
        node = node-&gt;next;
    }

    // create Java-like string
    str = new_String("]");
    append(sb, str);
    delete_String(str);
    str = toStringSb(sb);
    delete_StringBuilder(sb);

    return str;
}
</code>
<code lang="C++">#ifndef LINKEDLIST_INCLUDED
#define LINKEDLIST_INCLUDED

#include "List.h"
#include "String_.h"
#include &lt;list&gt;
#include &lt;cstdint&gt;
#include &lt;sstream&gt;

/**
 * Doubly-linked list implementation of the List abstract class.
 *
 * @author Petr Kozler (A13B0359P)
 */
template &lt;class E&gt; class LinkedList : public List&lt;E&gt; {
    // inner list for storing the elements
    std::list&lt;E *&gt; l;
public:
    LinkedList();
    LinkedList(LinkedList&lt;E&gt; *c);
    ~LinkedList();
    bool add(E *e);
    void add(int32_t index, E *element);
    E *get(int32_t index);
    E *set(int32_t index, E *element);
    E *remove(int32_t index);
    int32_t size();
    void clear();
    String *toString();
};

/**
 * Constructs an empty list.
 */
template &lt;class E&gt; LinkedList&lt;E&gt;::LinkedList() {}

/**
 * Constructs a list containing the elements of the specified collection, in
 * the order they are returned by the collection's iterator.
 *
 * @param c the collection whose elements are to be placed into this list
 */
template &lt;class E&gt; LinkedList&lt;E&gt;::LinkedList(LinkedList&lt;E&gt; *c) {
    l = c-&gt;l;
}

/*
 Destructs a LinkedList.
 */
template &lt;class E&gt; LinkedList&lt;E&gt;::~LinkedList() {
    l.clear();
}

/**
 * Appends the specified element to the end of this list.
 *
 * @param e element to be appended to this list
 * @return true
 */
template &lt;class E&gt; bool LinkedList&lt;E&gt;::add(E *e) {
    l.push_back(e);

    return true;
}

/**
 * Inserts the specified element at the specified position in this list.
 *
 * @param index index at which the specified element is to be inserted
 * @param element element to be inserted
 */
template &lt;class E&gt; void LinkedList&lt;E&gt;::add(int32_t index, E *element) {
    auto it = l.begin();
    // moving to the specified index
    std::advance(it, index);
    l.insert(it, element);
}

/**
 * Returns the element at the specified position in this list.
 *
 * @param index index of the element to return
 * @return the element at the specified position in this list
 */
template &lt;class E&gt; E *LinkedList&lt;E&gt;::get(int32_t index) {
    auto it = l.begin();
    // moving to the specified index
    std::advance(it, index);

    return *it;
}

/**
 * Replaces the element at the specified position in this list with the
 * specified element.
 *
 * @param index index of the element to replace
 * @param element element to be stored at the specified position
 * @return the element previously at the specified position
 */
template &lt;class E&gt; E *LinkedList&lt;E&gt;::set(int32_t index, E *element) {
    E *original;
    auto it = l.begin();
    // moving to the specified index
    std::advance(it, index);
    original = *it;
    *it = element;

    return original;
}

/**
 * Removes the element at the specified position in this list.
 *
 * @param index the index of the element to be removed
 * @return the element previously at the specified position
 */
template &lt;class E&gt; E *LinkedList&lt;E&gt;::remove(int32_t index) {
    E *removed;
    auto it = l.begin();
    // moving to the specified index
    std::advance(it, index);
    removed = *it;
    l.erase(it);

    return removed;
}

/**
 * Returns the number of elements in this list.
 *
 * @return the number of elements in this list
 */
template &lt;class E&gt; int32_t LinkedList&lt;E&gt;::size() {
    return l.size();
}

/**
 * Removes all of the elements from this list.
 */
template &lt;class E&gt; void LinkedList&lt;E&gt;::clear() {
    l.clear();
}

/**
 * Returns a string representation of the object.
 *
 * @return a string representation of the object.
 */
template &lt;class E&gt; String *LinkedList&lt;E&gt;::toString() {
    int32_t length = l.size();
    // create ostringstream for appending the text
    std::ostringstream oss("");
    oss &lt;&lt; "[";

    // append first element string representation
    if (length &gt; 0) {
        String *str = *l.begin() == nullptr ? new String("null") : ((Object *) *l.begin())-&gt;toString();
        oss &lt;&lt; str-&gt;_s();
        delete str;
    }

    // append another elements string representation
    for (int32_t i = 1; i &lt; length; i++) {
        auto it = l.begin();
        std::advance(it, i);
        String *str = *it == nullptr ? new String("null") : ((Object *) *it)-&gt;toString();
        oss &lt;&lt; ", " &lt;&lt; str-&gt;_s();
        delete str;
    }

    oss &lt;&lt; "]";

    // create Java-like string
    return new String(oss.str());
}

#endif // LINKEDLIST_INCLUDED


#include "LinkedList.h"
// for future purposes</code>
<code lang="C#">﻿using System.Collections.Generic;

namespace JavaClasses
{

    /// &lt;summary&gt;
    /// Doubly-linked list implementation of the List abstract class.
    /// &lt;/summary&gt;
    /// &lt;typeparam name="E"&gt;the type of elements held in this collection&lt;/typeparam&gt;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;
    public class LinkedList&lt;E&gt; : List&lt;E&gt; where E : Object
    {

        // an inner list
        public System.Collections.Generic.LinkedList&lt;E&gt; l { get; private set; }

        /// &lt;summary&gt;
        /// Constructs an empty list.
        /// &lt;/summary&gt;
        public LinkedList()
        {
            l = new System.Collections.Generic.LinkedList&lt;E&gt;();
        }

        /// &lt;summary&gt;
        /// Constructs a list containing the elements of the specified collection, in
        /// the order they are returned by the collection's iterator.
        /// &lt;/summary&gt;
        /// &lt;param name="c"&gt;the collection whose elements are to be placed into this list
        /// &lt;/param&gt;
        public LinkedList(LinkedList&lt;E&gt; c)
        {
            l = new System.Collections.Generic.LinkedList&lt;E&gt;(c.l);
        }

        /// &lt;summary&gt;
        /// Appends the specified element to the end of this list.
        /// &lt;/summary&gt;
        /// &lt;param name="e"&gt;element to be appended to this list
        /// &lt;/param&gt;&lt;returns&gt;true
        /// &lt;/returns&gt;
        public override bool add(E e)
        {
            l.AddLast(e);
            return true;
        }

        /// &lt;summary&gt;
        /// Inserts the specified element at the specified position in this list.
        /// &lt;/summary&gt;
        /// &lt;param name="index"&gt;index at which the specified element is to be inserted
        /// &lt;/param&gt;&lt;param name="element"&gt;element to be inserted
        /// &lt;/param&gt;
        public override void add(int index, E element)
        {
            // creating the first node, if the list is empty
            if (l.Count &lt; 1)
            {
                l.AddFirst(element);
                return;
            }

            LinkedListNode&lt;E&gt; node = l.First;

            // inserting the new element before the first node if index is 0
            if (index &lt; 1)
            {
                l.AddBefore(node, element);
                return;
            }

            // iterating to the node at the specified position in the list
            for (int i = 1; i &lt; index; i++)
            {
                node = node.Next;
            }

            // inserting the new element after the node
            l.AddAfter(node, element);
        }
        
        /// &lt;summary&gt;
        /// Returns the element at the specified position in this list.
        /// &lt;/summary&gt;
        /// &lt;param name="index"&gt;index of the element to return
        /// &lt;/param&gt;&lt;returns&gt;the element at the specified position in this list
        /// &lt;/returns&gt;
        public override E get(int index)
        {
            LinkedListNode&lt;E&gt; node = l.First;

            // iterating to the node at the specified position in the list
            for (int i = 0; i &lt; index; i++)
            {
                node = node.Next;
            }

            // returning the value of the node
            return node.Value;
        }

        /// &lt;summary&gt;
        /// Replaces the element at the specified position in this list with the
        /// specified element.
        /// &lt;/summary&gt;
        /// &lt;param name="index"&gt;index of the element to replace
        /// &lt;/param&gt;&lt;param name="element"&gt;element to be stored at the specified position
        /// &lt;/param&gt;&lt;returns&gt;the element previously at the specified position
        /// &lt;/returns&gt;
        public override E set(int index, E element)
        {
            E original;

            // replacing the value of node at the beginning if the index is zero
            if (index &lt; 1)
            {
                original = l.First.Value;
                l.First.Value = element;
                return original;
            }

            LinkedListNode&lt;E&gt; node = l.First;

            // iterating to the node at the specified position in the list
            for (int i = 0; i &lt; index; i++)
            {
                node = node.Next;
            }

            // replacing the value of the node in the list and returning the original value
            original = node.Value;
            node.Value = element;
            return original;
        }

        /// &lt;summary&gt;
        /// Removes the element at the specified position in this list.
        /// &lt;/summary&gt;
        /// &lt;param name="index"&gt;the index of the element to be removed
        /// &lt;/param&gt;&lt;returns&gt;the element previously at the specified position
        /// &lt;/returns&gt;
        public override E remove(int index)
        {
            E removed;

            // removing the node at the beginning if the index is zero
            if (index &lt; 1)
            {
                removed = l.First.Value;
                l.RemoveFirst();
                return removed;
            }

            LinkedListNode&lt;E&gt; node = l.First;

            // iterating to the node at the specified position in the list
            for (int i = 0; i &lt; index; i++)
            {
                node = node.Next;
            }

            // removing the node in the list and returning its value
            removed = node.Value;
            l.Remove(node);
            return removed;
        }

        /// &lt;summary&gt;
        /// Returns the number of elements in this list.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;the number of elements in this list
        /// &lt;/returns&gt;
        public override int size()
        {
            return l.Count;
        }
        
        /// &lt;summary&gt;
        /// Removes all of the elements from this list.
        /// &lt;/summary&gt;
        public override void clear()
        {
            l.Clear();
        }

        /// &lt;summary&gt;
        /// Returns a string representation of the object.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;a string representation of the object.
        /// &lt;/returns&gt;
        public override String toString()
        {
            // create StringBuilder for appending the text
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append("[");

            LinkedListNode&lt;E&gt; node = l.First;

            // append the first element string representation
            if (node != null)
            {
                sb.Append(node.Value == null ? "null" : node.Value.ToString());
                node = node.Next;
            }

            // append another elements string representation
            for (int i = 1; i &lt; l.Count; i++)
            {
                sb.Append(", ").Append(node.Value == null ? "null" : node.Value.ToString());
                node = node.Next;
            }

            // create Java-like string
            return new String(sb.Append("]").ToString());
        }
        
    }

}

</code>
<code lang="Free Pascal">unit LinkedListUnit;

{$mode objfpc}{$H+}

interface

uses
  StringUnit, ListUnit;

(*
    LinkedListNode structure represents the node in the doubly-linked list
    containing the element and the references to the next and the previous node in the list.
 *)
type
  LinkedListNode = class
    private
      var
        // stored element
        value: Object_;
        // next node in the list
        next: LinkedListNode;
        // previous node in the list
        previous: LinkedListNode;
  end;

  (**
   * Doubly-linked list implementation of the List abstract class.
   *
   * @param E the type of elements held in this collection
   * @author Petr Kozler (A13B0359P)
   *)
  LinkedList = class(List)
    private
      var
        // list element count
        count: longInt;
        // first node in the list
        first: LinkedListNode;
        // last node in the list
        last: LinkedListNode;
      procedure addAfter(node, newNode: LinkedListNode);
      procedure addBefore(node, newNode: LinkedListNode);
      procedure addFirst(newNode: LinkedListNode);
      procedure addLast(newNode: LinkedListNode);
      procedure removeNode(node: LinkedListNode);
    public
      constructor create();
      constructor create(c: LinkedList);
      destructor destroy(); override;
      function add(e: Object_) : boolean; override;
      procedure add(index: longInt; element: Object_); override;
      function get(index: longInt) : Object_; override;
      function set_(index: longInt; element: Object_) : Object_; override;
      function remove(index: longInt) : Object_; override;
      function size() : longInt; override;
      procedure clear(); override;
      function toString_() : String_; override;
  end;

implementation

uses
  StringBuilderUnit, Classes, SysUtils;

(**
 * Constructs an empty list.
 *)
constructor LinkedList.create();
begin
  count := 0;
  // setting the empty nodes
  first := nil;
  last := nil;
end;

(**
 * Constructs a list containing the elements of the specified collection, in
 * the order they are returned by the collection's iterator.
 *
 * @param c the collection whose elements are to be placed into this list
 *)
constructor LinkedList.create(c: LinkedList);
var
  node: LinkedListNode;
begin
  create();
  node := c.first;

  while node &lt;&gt; nil do begin
    add(node.value);
    node := node.next;
  end;
end;

(*
    Destructs the LinkedList.
 *)
destructor LinkedList.destroy();
begin
  clear();
  inherited;
end;

(*
    Adds the new node after the specified existing node in the list and updates the references.
 *)
procedure LinkedList.addAfter(node, newNode: LinkedListNode);
begin
  newNode.previous := node;
  newNode.next := node.next;

  if node.next = nil then begin
    last := newNode;
  end
  else begin
    node.next.previous := newNode;
  end;

  node.next := newNode;
end;

(*
    Adds the new node before the specified existing node in the list and updates the references.
 *)
procedure LinkedList.addBefore(node, newNode: LinkedListNode);
begin
  newNode.previous := node.previous;
  newNode.next := node;

  if node.previous = nil then begin
    first := newNode;
  end
  else begin
    node.previous.next := newNode;
  end;

  node.previous := newNode;
end;

(*
    Adds the new node to the beginning of the list and updates the references.
 *)
procedure LinkedList.addFirst(newNode: LinkedListNode);
begin
  if first = nil then begin
    first := newNode;
    last := newNode;
    newNode.previous := nil;
    newNode.next := nil;
  end
  else begin
    addBefore(first, newNode);
  end;
end;

(*
    Adds the new node to the end of the list and updates the references.
 *)
procedure LinkedList.addLast(newNode: LinkedListNode);
begin
  if last = nil then begin
    addFirst(newNode);
  end
  else begin
    addAfter(last, newNode);
  end;
end;

(*
    Removes the specified existing node from the list and updates the references.
 *)
procedure LinkedList.removeNode(node: LinkedListNode);
begin
  if node.previous = nil then begin
    first := node.next;
  end
  else begin
    node.previous.next := node.next;
  end;

  if node.next = nil then begin
    last := node.previous;
  end
  else begin
    node.next.previous := node.previous;
  end;
end;

(**
 * Appends the specified element to the end of this list.
 *
 * @param e element to be appended to this list
 * @return true
 *)
function LinkedList.add(e: Object_) : boolean;
var
  newNode: LinkedListNode;
begin
  // creating the node for storing the element
  newNode := LinkedListNode.create();
  newNode.value := e;
  // adding as the last node of the list
  addLast(newNode);
  inc(count);
  add := true;
end;

(**
 * Inserts the specified element at the specified position in this list.
 *
 * @param index index at which the specified element is to be inserted
 * @param element element to be inserted
 *)
procedure LinkedList.add(index: longInt; element: Object_);
var
  node, newNode: LinkedListNode;
  i: longInt;
begin
  // creating the node for storing the element
  newNode := LinkedListNode.create();
  newNode.value := element;

  // adding as the first node of the list if the list is currently empty
  if count &lt; 1 then begin
    addFirst(newNode);
  end
  else begin
    node := first;

    // adding before the first node of the list if the index is 0
    if index &lt; 1 then begin
      addBefore(node, newNode);
    end
    else begin

      for i := 1 to index - 1 do begin
        node := node.next;
      end;

      // adding after the node found on the specified position, if the index is not 0
      addAfter(node, newNode);
    end;
  end;

  inc(count);
end;

(**
 * Returns the element at the specified position in this list.
 *
 * @param index index of the element to return
 * @return the element at the specified position in this list
 *)
function LinkedList.get(index: longInt) : Object_;
var
  node: LinkedListNode;
  i: longInt;
begin
  node := first;

  // iterating over the list to the node on the specified position
  for i := 0 to index - 1 do begin
    node := node.next;
  end;

  get := node.value;
end;

(**
 * Replaces the element at the specified position in this list with the
 * specified element.
 *
 * @param index index of the element to replace
 * @param element element to be stored at the specified position
 * @return the element previously at the specified position
 *)
function LinkedList.set_(index: longInt; element: Object_) : Object_;
var
  node: LinkedListNode;
  original: Object_;
  i: longInt;
begin
  // setting the first node if the index is 0
  if index &lt; 1 then begin
    original := first.value;
    first.value := element;
  end
  else begin
    node := first;

    for i := 0 to index - 1 do begin
      node := node.next;
    end;

    // setting the node on the specified position
    original := node.value;
    node.value := element;
  end;

  set_ := original;
end;

(**
 * Removes the element at the specified position in this list.
 *
 * @param index the index of the element to be removed
 * @return the element previously at the specified position
 *)
function LinkedList.remove(index: longInt) : Object_;
var
  node: LinkedListNode;
  removed: Object_;
  i: longInt;
begin
  // removing the first node if the index is 0
  if index &lt; 1 then begin
    node := first;
    removed := node.value;
    removeNode(node);
    freeAndNil(node);
  end
  else begin
    node := first;

    for i := 0 to index - 1 do begin
      node := node.next;
    end;

    // removing the node on the specified position
    removed := node.value;
    removeNode(node);
    freeAndNil(node);
  end;

  dec(count);
  remove := removed;
end;

(**
 * Returns the number of elements in this list.
 *
 * @return the number of elements in this list
 *)
function LinkedList.size() : longInt;
begin
  size := count;
end;

(**
 * Removes all of the elements from this list.
 *)
procedure LinkedList.clear();
begin
  // deallocating the memory of the each list node after removing it
  while first &lt;&gt; nil do begin
    remove(0);
  end;
end;

(**
 * Returns a string representation of the object.
 *
 * @return a string representation of the object.
 *)
function LinkedList.toString_() : String_;
var
  sb: StringBuilder;
  str: String_;
  node: LinkedListNode;
begin
  // create StringBuilder for appending the text
  sb := StringBuilder.create();
  str := String_.create('[');
  sb.append(str);
  freeAndNil(str);
  node := first;

  // append first element string representation
  if first &lt;&gt; nil then begin
    if node.value = nil then begin
      str := String_.create('null');
    end
    else begin
      str := node.value.toString_();
    end;

    sb.append(str);
    freeAndNil(str);
    node := node.next;
  end;

  // append another elements string representation
  while node &lt;&gt; nil do begin
    str := String_.create(', ');
    sb.append(str);
    freeAndNil(str);

    if node.value = nil then begin
      str := String_.create('null');
    end
    else begin
      str := node.value.toString_();
    end;

    sb.append(str);
    freeAndNil(str);
    node := node.next;
  end;

  // create Java-like string
  str := String_.create(']');
  sb.append(str);
  freeAndNil(str);
  str := sb.toString_();
  freeAndNil(sb);
  toString_ := str;
end;

end.

</code>

</codes>
