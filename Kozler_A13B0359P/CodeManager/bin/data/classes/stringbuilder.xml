<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef STRINGBUILDER_INCLUDED&#13;
#define	STRINGBUILDER_INCLUDED&#13;
&#13;
#include "String.h"&#13;
#include &lt;stdint.h&gt;&#13;
&#13;
/**&#13;
 * A mutable sequence of characters.&#13;
 *&#13;
 * @author Petr Kozler (A13B0359P)&#13;
 */&#13;
&#13;
typedef struct {&#13;
    char *buffer;&#13;
    int32_t count;&#13;
    int32_t capacity;&#13;
} StringBuilder;&#13;
&#13;
StringBuilder *new_StringBuilder();&#13;
void delete_StringBuilder(StringBuilder *ptr);&#13;
StringBuilder *append(StringBuilder *ptr, String *str);&#13;
String *toStringSb(StringBuilder *ptr);&#13;
&#13;
#endif	/* STRINGBUILDER_INCLUDED */&#13;
&#13;
#include "StringBuilder.h"&#13;
&#13;
#include "String.h"&#13;
#include &lt;stdlib.h&gt;&#13;
#include &lt;string.h&gt;&#13;
&#13;
#define _STR_DEFAULT_CAPACITY 16&#13;
#define _STR_RESIZE_COEF 2&#13;
&#13;
/**&#13;
 * Constructs a string builder with no characters in it and an initial&#13;
 * capacity of 16 characters.&#13;
 */&#13;
StringBuilder *new_StringBuilder() {&#13;
    StringBuilder *sb = (StringBuilder *) malloc(sizeof (StringBuilder));&#13;
    sb-&gt;count = 1;&#13;
    sb-&gt;capacity = _STR_DEFAULT_CAPACITY;&#13;
    sb-&gt;buffer = (char *) malloc(sb-&gt;capacity * sizeof (char));&#13;
    sb-&gt;buffer[0] = '\0';&#13;
&#13;
    return sb;&#13;
}&#13;
&#13;
void delete_StringBuilder(StringBuilder *ptr) {&#13;
    free(ptr-&gt;buffer);&#13;
    free(ptr);&#13;
}&#13;
&#13;
/**&#13;
 * Appends the specified string to the specified character sequence.&#13;
 *&#13;
 * @param ptr The allocated structure&#13;
 * @param str a string.&#13;
 * @return a pointer to the specified structure.&#13;
 */&#13;
StringBuilder *append(StringBuilder *ptr, String *str) {&#13;
    if (ptr-&gt;count + str-&gt;len &gt;= ptr-&gt;capacity) {&#13;
        ptr-&gt;capacity += str-&gt;len * _STR_RESIZE_COEF;&#13;
        ptr-&gt;buffer = realloc(ptr-&gt;buffer, ptr-&gt;capacity * sizeof (char));&#13;
    }&#13;
&#13;
    strcat(ptr-&gt;buffer, str-&gt;s);&#13;
    ptr-&gt;count += str-&gt;len;&#13;
&#13;
    return ptr;&#13;
}&#13;
&#13;
/**&#13;
 * Returns a string representing the data in the specified sequence.&#13;
 *&#13;
 * @param ptr The allocated structure&#13;
 * @return a string representation of the specified sequence of characters.&#13;
 */&#13;
String *toStringSb(StringBuilder *ptr) {&#13;
    return new_String(ptr-&gt;buffer);&#13;
}&#13;
</code>
<code lang="C++">#ifndef STRINGBUILDER_INCLUDED&#13;
#define	STRINGBUILDER_INCLUDED&#13;
&#13;
#include "String_.h"&#13;
#include &lt;sstream&gt;&#13;
&#13;
/**&#13;
 * A mutable sequence of characters.&#13;
 *&#13;
 * @author Petr Kozler (A13B0359P)&#13;
 */&#13;
class StringBuilder : public Object {&#13;
    std::ostringstream oss;&#13;
public:&#13;
    StringBuilder();&#13;
    StringBuilder *append(String *str);&#13;
    String *toString();&#13;
};&#13;
&#13;
#endif	// STRINGBUILDER_INCLUDED&#13;
&#13;
&#13;
#include "StringBuilder.h"&#13;
&#13;
/**&#13;
 * Constructs a string builder with no characters in it and an initial&#13;
 * capacity of 16 characters.&#13;
 */&#13;
StringBuilder::StringBuilder() {&#13;
    // no code yet&#13;
}&#13;
&#13;
/**&#13;
 * Appends the specified string to this character sequence.&#13;
 *&#13;
 * @param str a string.&#13;
 * @return a pointer to this object.&#13;
 */&#13;
StringBuilder *StringBuilder::append(String *str) {&#13;
    oss &lt;&lt; str-&gt;_s();&#13;
    &#13;
    return this;&#13;
}&#13;
&#13;
/**&#13;
 * Returns a string representing the data in this sequence.&#13;
 *&#13;
 * @return a string representation of this sequence of characters.&#13;
 */&#13;
String *StringBuilder::toString() {&#13;
    return new String(oss.str());&#13;
}&#13;
</code>
<code lang="C#">ï»¿namespace JavaClasses&#13;
{&#13;
&#13;
    /// &lt;summary&gt;&#13;
    /// A mutable sequence of characters.&#13;
    /// &lt;/summary&gt;&#13;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;&#13;
    public class StringBuilder : Object&#13;
    {&#13;
&#13;
        // an inner string builder&#13;
        private System.Text.StringBuilder sb;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Constructs a string builder with no characters in it and an initial&#13;
        /// capacity of 16 characters.&#13;
        /// &lt;/summary&gt;&#13;
        public StringBuilder()&#13;
        {&#13;
            sb = new System.Text.StringBuilder();&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Appends the specified string to this character sequence.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="str"&gt;a string.&#13;
        /// &lt;/param&gt;&lt;returns&gt;a reference to this object.&#13;
        /// &lt;/returns&gt;&#13;
        public StringBuilder append(String str)&#13;
        {&#13;
            sb.Append(str.ToString());&#13;
&#13;
            return this;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns a string representing the data in this sequence.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;a string representation of this sequence of characters.&#13;
        /// &lt;/returns&gt;&#13;
        public override String toString()&#13;
        {&#13;
            return sb.ToString();&#13;
        }&#13;
&#13;
    }&#13;
&#13;
}&#13;
</code>
<code lang="Free Pascal">unit StringBuilderUnit;&#13;
&#13;
{$mode objfpc}{$H+}&#13;
&#13;
interface&#13;
&#13;
uses&#13;
  Classes, StringUnit;&#13;
&#13;
type&#13;
  (**&#13;
   * A mutable sequence of characters.&#13;
   *&#13;
   * @author Petr Kozler (A13B0359P)&#13;
   *)&#13;
  StringBuilder = class(Object_)&#13;
    private&#13;
      const&#13;
        DEFAULT_CAPACITY = 16;&#13;
        RESIZE_COEF = 2;&#13;
      var&#13;
        buffer: ^ansiChar;&#13;
        count, capacity: longInt;&#13;
    public&#13;
      constructor create();&#13;
      function append(str: String_) : StringBuilder;&#13;
      function toString_() : String_;&#13;
  end;&#13;
&#13;
implementation&#13;
&#13;
uses&#13;
  SysUtils;&#13;
&#13;
(**&#13;
 * Constructs a string builder with no characters in it and an initial&#13;
 * capacity of 16 characters.&#13;
 *)&#13;
constructor StringBuilder.create();&#13;
begin&#13;
  count := 0;&#13;
  capacity := DEFAULT_CAPACITY;&#13;
  buffer := getMem(capacity);&#13;
  buffer[0] := #0;&#13;
end;&#13;
&#13;
(**&#13;
 * Appends the specified string to this character sequence.&#13;
 *&#13;
 * @param str a string.&#13;
 * @return a reference to this object.&#13;
 *)&#13;
function StringBuilder.append(str: String_) : StringBuilder;&#13;
var&#13;
  cStr: ^ansiChar;&#13;
  len: longInt;&#13;
begin&#13;
  len := str.length();&#13;
  cStr := getMem(len + 1);&#13;
  strPCopy(cStr, str.toString());&#13;
&#13;
  if count + len &gt;= capacity then begin&#13;
    capacity := count + len * RESIZE_COEF;&#13;
    buffer := reAllocMem(buffer, capacity);&#13;
  end;&#13;
&#13;
  strcat(buffer, cStr);&#13;
  count := count + len;&#13;
  append := self;&#13;
end;&#13;
&#13;
(**&#13;
 * Returns a string representing the data in this sequence.&#13;
 *&#13;
 * @return a string representation of this sequence of characters.&#13;
 *)&#13;
function StringBuilder.toString_() : String_;&#13;
begin&#13;
  toString_ := String_.create(strPas(buffer));&#13;
end;&#13;
&#13;
end.&#13;
&#13;
</code>

</codes>
