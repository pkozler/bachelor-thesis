<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef FLOAT_INCLUDED&#13;
#define FLOAT_INCLUDED&#13;
&#13;
#include "String.h"&#13;
#include &lt;stdbool.h&gt;&#13;
#include &lt;stdint.h&gt;&#13;
&#13;
/**&#13;
 * The Float struct wraps a value of type float.&#13;
 *&#13;
 * @author Petr Kozler (A13B0359P)&#13;
 */&#13;
&#13;
/**&#13;
 * A constant holding the positive infinity of type float.&#13;
 */&#13;
#define Float_POSITIVE_INFINITY 1.0f / 0.0f&#13;
/**&#13;
 * A constant holding the negative infinity of type float.&#13;
 */&#13;
#define Float_NEGATIVE_INFINITY -1.0f / 0.0f&#13;
/**&#13;
 * A constant holding a Not-a-Number (NaN) value of type float.&#13;
 */&#13;
#define Float_NaN 0.0f / 0.0f&#13;
/**&#13;
 * A constant holding the largest positive finite value of type float, (2-2^-23)·2^127.&#13;
 */&#13;
#define Float_MAX_VALUE 3.4028235e+38f&#13;
/**&#13;
 * A constant holding the smallest positive nonzero value of type float, 2-^149.&#13;
 */&#13;
#define Float_MIN_VALUE 1.4e-45f&#13;
/**&#13;
 * Maximum exponent a finite float variable may hav&#13;
 */&#13;
#define Float_MAX_EXPONENT 127&#13;
/**&#13;
 * Minimum exponent a normalized float variable may have.&#13;
 */&#13;
#define Float_MIN_EXPONENT -126&#13;
/**&#13;
 * A constant holding the smallest positive normal value of type float, 2^-126.&#13;
 */&#13;
#define Float_MIN_NORMAL 1.17549435e-38f&#13;
&#13;
typedef union {&#13;
    float val;&#13;
    int32_t bits;&#13;
} FloatInt32;&#13;
&#13;
typedef struct {&#13;
    float v;&#13;
} Float;&#13;
&#13;
Float *new_Float(float value);&#13;
float floatValue(Float *ptr);&#13;
int32_t compareToF(Float *ptr, Float *anotherFloat);&#13;
int32_t Float_compare(float f1, float f2);&#13;
bool equalsF(Float *ptr, Float *obj);&#13;
String *toStringF(Float *ptr);&#13;
String *Float_toString(float f);&#13;
float Float_parseFloat(String *s);&#13;
&#13;
#endif /* FLOAT_INCLUDED */&#13;
&#13;
&#13;
#include "Float.h"&#13;
&#13;
#include &lt;stdio.h&gt;&#13;
#include &lt;stdlib.h&gt;&#13;
#include &lt;string.h&gt;&#13;
#include "math.h"&#13;
&#13;
#define _MAX_FLOAT_STRLEN 12&#13;
&#13;
/**&#13;
 * Constructs a newly allocated Float structure that represents the&#13;
 * float argument.&#13;
 *&#13;
 * @param value the value to be represented by the Float.&#13;
 */&#13;
Float *new_Float(float value) {&#13;
    Float *f = malloc(sizeof (Float));&#13;
    f-&gt;v = value;&#13;
&#13;
    return f;&#13;
}&#13;
&#13;
long _getNegativeZeroFloatBits() {&#13;
    FloatInt32 bitConverter;&#13;
    bitConverter.val = -0.0;&#13;
&#13;
    return bitConverter.bits;&#13;
}&#13;
&#13;
/**&#13;
 * Returns the float value of the specified Float structure.&#13;
 *&#13;
 * @param ptr The allocated structure&#13;
 * @return the float value represented by the specified structure&#13;
 */&#13;
float floatValue(Float *ptr) {&#13;
    return ptr-&gt;v;&#13;
}&#13;
&#13;
/**&#13;
 * Compares two Float structures numerically.&#13;
 *&#13;
 * @param ptr The allocated structure&#13;
 * @param anotherFloat the Float to be compared.&#13;
 * @return the value 0 if anotherFloat is numerically equal to the first Float; a&#13;
 * value less than 0 if the first Float is numerically less than anotherFloat;&#13;
 * and a value greater than 0 if the first Float is numerically greater than&#13;
 * anotherFloat.&#13;
 */&#13;
int32_t compareToF(Float *ptr, Float *anotherFloat) {&#13;
    return Float_compare(ptr-&gt;v, anotherFloat-&gt;v);&#13;
}&#13;
&#13;
/**&#13;
 * Compares the two specified float values.&#13;
 *&#13;
 * @param f1 the first float to compare.&#13;
 * @param f2 the second float to compare.&#13;
 * @return the value 0 if f1 is numerically equal to f2; a value less than 0&#13;
 * if f1 is numerically less than f2; and a value greater than 0 if f1 is&#13;
 * numerically greater than f2.&#13;
 */&#13;
int32_t Float_compare(float f1, float f2) {&#13;
    if (isnan(f1)) {&#13;
        if (isnan(f2)) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        return 1;&#13;
    }&#13;
&#13;
    if (isnan(f2)) {&#13;
        return -1;&#13;
    }&#13;
&#13;
    FloatInt32 vBits, v2Bits;&#13;
    vBits.val = f1;&#13;
    v2Bits.val = f2;&#13;
    int32_t negativeZeroBits = _getNegativeZeroFloatBits();&#13;
&#13;
    if (vBits.bits == 0&#13;
            &amp;&amp; v2Bits.bits == negativeZeroBits) {&#13;
        return 1;&#13;
    }&#13;
&#13;
    if (vBits.bits == negativeZeroBits&#13;
            &amp;&amp; v2Bits.bits == 0) {&#13;
        return -1;&#13;
    }&#13;
&#13;
    return (f1 &gt; f2 ? 1 : f1 &lt; f2 ? -1 : 0);&#13;
}&#13;
&#13;
/**&#13;
 * Compares the one structure against the other.&#13;
 *&#13;
 * @param ptr The allocated structure&#13;
 * @param obj the structure to be compared&#13;
 * @return true if the structures are the same; false otherwise.&#13;
 */&#13;
bool equalsF(Float *ptr, Float *obj) {&#13;
    if (ptr == NULL || obj == NULL) {&#13;
        return false;&#13;
    }&#13;
&#13;
    if (sizeof(*ptr) != sizeof(*obj)) {&#13;
        return false;&#13;
    }&#13;
&#13;
    float v = ptr-&gt;v;&#13;
    float v2 = obj-&gt;v;&#13;
&#13;
    if (isnan(v) &amp;&amp; isnan(v2)) {&#13;
        return true;&#13;
    }&#13;
&#13;
    FloatInt32 vBits, v2Bits;&#13;
    vBits.val = v;&#13;
    v2Bits.val = v2;&#13;
    int32_t negativeZeroBits = _getNegativeZeroFloatBits();&#13;
&#13;
    if (vBits.bits == negativeZeroBits) {&#13;
        return v2Bits.bits == negativeZeroBits;&#13;
    }&#13;
&#13;
    if (v2Bits.bits == negativeZeroBits) {&#13;
        return vBits.bits == negativeZeroBits;&#13;
    }&#13;
&#13;
    return (v == v2);&#13;
}&#13;
&#13;
/**&#13;
 * Returns a string representation of the specified Float structure.&#13;
 *&#13;
 * @param ptr The allocated structure&#13;
 * @return a String representation of the specified structure.&#13;
 */&#13;
String *toStringF(Float *ptr) {&#13;
    return Float_toString(ptr-&gt;v);&#13;
}&#13;
&#13;
/**&#13;
 * Returns a string representation of the float argument.&#13;
 *&#13;
 * @param f the float to be converted.&#13;
 * @return a string representation of the argument.&#13;
 */&#13;
String *Float_toString(float f) {&#13;
    char *str = malloc(_MAX_FLOAT_STRLEN + 1);&#13;
    char buf[_MAX_FLOAT_STRLEN];&#13;
&#13;
    str[0] = '\0';&#13;
    sprintf(buf, "%G", f);&#13;
    strcat(str, buf);&#13;
    String *s = new_String(str);&#13;
    free(str);&#13;
    &#13;
    return s;&#13;
}&#13;
&#13;
/**&#13;
 * Returns a new float initialized to the value represented by the specified&#13;
 * String, as performed by the "valueOf" function for struct Float.&#13;
 *&#13;
 * @param s the string to be parsed.&#13;
 * @return the float value represented by the string argument.&#13;
 */&#13;
float Float_parseFloat(String *s) {&#13;
    String *str = trim(s);&#13;
    float value = strtof(str-&gt;s, NULL);&#13;
    free(str);&#13;
    &#13;
    return value;&#13;
}&#13;
</code>
<code lang="C++">#ifndef FLOAT_INCLUDED
#define FLOAT_INCLUDED

#include "String_.h"
#include &lt;cstdint&gt;

typedef union {
    float val;
    int32_t bits;
} FloatInt32;

/**
 * The Float class wraps a value of primitive type float in an object.
 *
 * @author Petr Kozler (A13B0359P)
 */
class Float : public Comparable {
    float v;
    static int32_t getNegativeZeroBits();
public:
    /**
     * A constant holding the positive infinity of type float.
     */
    static const float POSITIVE_INFINITY;
    
    /**
     * A constant holding the negative infinity of type float.
     */
    static const float NEGATIVE_INFINITY;
    
    /**
     * A constant holding a Not-a-Number (NaN) value of type float.
     */
    static const float NaN;
    
    /**
     * A constant holding the largest positive finite value of type float, (2-2^-23)·2^127.
     */
    static const float MIN_VALUE;
    
    /**
     * A constant holding the smallest positive nonzero value of type float, 2-^149.
     */
    static const float MAX_VALUE;
    
    /**
     * Maximum exponent a finite float variable may hav
     */
    static const int32_t MAX_EXPONENT;
    
    /**
     * Minimum exponent a normalized float variable may have.
     */
    static const int32_t MIN_EXPONENT;
    
    /**
     * A constant holding the smallest positive normal value of type float, 2^-126.
     */
    static const float MIN_NORMAL;
    
    Float(float value);
    float floatValue();
    int32_t compareTo(Object *anotherFloat);
    static int32_t compare(float f1, float f2);
    bool equals(Object *obj);
    String *toString();
    static String *toString(float f);
    static float parseFloat(String *s);
};

#endif // FLOAT_INCLUDED
&#13;
&#13;
#include "Float.h"

#include &lt;string&gt;
#include &lt;cmath&gt;
#include &lt;cstdlib&gt;

const float Float::POSITIVE_INFINITY = 1.0f / 0.0f;
const float Float::NEGATIVE_INFINITY = -1.0f / 0.0f;
const float Float::NaN = 0.0f / 0.0f;
const float Float::MAX_VALUE = 3.4028235e+38f;
const float Float::MIN_VALUE = 1.4e-45f;
const int32_t Float::MAX_EXPONENT = 127;
const int32_t Float::MIN_EXPONENT = -126;
const float Float::MIN_NORMAL = 1.17549435e-38f;

/**
 * Constructs a newly allocated Float object that represents the primitive
 * float argument.
 *
 * @param value the value to be represented by the Float.
 */
Float::Float(float value) {
    v = value;
}

int32_t Float::getNegativeZeroBits() {
    FloatInt32 bitConverter;
    bitConverter.val = -0.0;

    return bitConverter.bits;
}

/**
 * Returns the float value of this Float object.
 *
 * @return the float value represented by this object
 */
float Float::floatValue() {
    return v;
}

/**
 * Compares two Float objects numerically.
 *
 * @param anotherFloat the Float to be compared.
 * @return the value 0 if anotherFloat is numerically equal to this Float; a
 * value less than 0 if this Float is numerically less than anotherFloat;
 * and a value greater than 0 if this Float is numerically greater than
 * anotherFloat.
 */
int32_t Float::compareTo(Object *anotherFloat) {
    return compare(v, ((Float *)anotherFloat)-&gt;v);
}

/**
 * Compares the two specified float values.
 *
 * @param f1 the first float to compare.
 * @param f2 the second float to compare.
 * @return the value 0 if f1 is numerically equal to f2; a value less than 0
 * if f1 is numerically less than f2; and a value greater than 0 if f1 is
 * numerically greater than f2.
 */
int32_t Float::compare(float f1, float f2) {
    if (std::isnan(f1)) {
        if (std::isnan(f2)) {
            return 0;
        }

        return 1;
    }

    if (std::isnan(f2)) {
        return -1;
    }

    FloatInt32 vBits, v2Bits;
    vBits.val = f1;
    v2Bits.val = f2;
    int32_t negativeZeroBits = getNegativeZeroBits();

    if (vBits.bits == 0
            &amp;&amp; v2Bits.bits == negativeZeroBits) {
        return 1;
    }

    if (vBits.bits == negativeZeroBits
            &amp;&amp; v2Bits.bits == 0) {
        return -1;
    }

    return (f1 &gt; f2 ? 1 : f1 &lt; f2 ? -1 : 0);
}

/**
 * Compares this object against the specified object.
 *
 * @param obj the object to be compared
 * @return true if the objects are the same; false otherwise.
 */
bool Float::equals(Object *obj) {
    if (obj == nullptr) {
        return false;
    }

    if (sizeof (this) != sizeof (*obj)) {
        return false;
    }

    float v2 = ((Float *)obj)-&gt;v;

    if (std::isnan(v) &amp;&amp; std::isnan(v2)) {
        return true;
    }

    FloatInt32 vBits, v2Bits;
    vBits.val = v;
    v2Bits.val = v2;
    int32_t negativeZeroBits = getNegativeZeroBits();

    if (vBits.bits == negativeZeroBits) {
        return v2Bits.bits == negativeZeroBits;
    }

    if (v2Bits.bits == negativeZeroBits) {
        return vBits.bits == negativeZeroBits;
    }

    return (v == v2);
}

/**
 * Returns a string representation of this Float object.
 *
 * @return a String representation of this object.
 */
String *Float::toString() {
    return toString(v);
}

/**
 * Returns a string representation of the float argument.
 *
 * @param f the float to be converted.
 * @return a string representation of the argument.
 */
String *Float::toString(float f) {
    return new String(std::to_string(f));
}

/**
 * Returns a new float initialized to the value represented by the specified
 * String, as performed by the valueOf method of class Float.
 *
 * @param s the string to be parsed.
 * @return the float value represented by the string argument.
 */
float Float::parseFloat(String *s) {
    String *str = s-&gt;trim();
    float value = strtof(str-&gt;_s().c_str(), nullptr);
    delete str;
    
    return value;
}
</code>
<code lang="C#">﻿using System;&#13;
using System.Globalization;&#13;
&#13;
namespace JavaClasses&#13;
{&#13;
&#13;
    /// &lt;summary&gt;&#13;
    /// The Float class wraps a value of primitive type float in an object.&#13;
    /// &lt;/summary&gt;&#13;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;&#13;
    public class Float : Comparable&#13;
    {&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// A constant holding the positive infinity of type float.&#13;
        /// &lt;/summary&gt;&#13;
        public const float POSITIVE_INFINITY = 1.0f / 0.0f;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// A constant holding the negative infinity of type float.&#13;
        /// &lt;/summary&gt;&#13;
        public const float NEGATIVE_INFINITY = -1.0f / 0.0f;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// A constant holding a Not-a-Number (NaN) value of type float.&#13;
        /// &lt;/summary&gt;&#13;
        public const float NaN = 0.0f / 0.0f;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// A constant holding the largest positive finite value of type float, (2-2^-23)·2^127.&#13;
        /// &lt;/summary&gt;&#13;
        public const float MAX_VALUE = 3.4028235e+38f;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// A constant holding the smallest positive nonzero value of type float, 2-^149.&#13;
        /// &lt;/summary&gt;&#13;
        public const float MIN_VALUE = 1.4e-45f;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Maximum exponent a finite float variable may have.&#13;
        /// &lt;/summary&gt;&#13;
        public const int MAX_EXPONENT = 127;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Minimum exponent a normalized float variable may have.&#13;
        /// &lt;/summary&gt;&#13;
        public const int MIN_EXPONENT = -126;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// A constant holding the smallest positive normal value of type float, 2^-126.&#13;
        /// &lt;/summary&gt;&#13;
        public const float MIN_NORMAL = 1.17549435E-38f;&#13;
&#13;
        // a "binary representation" of negative zero value for comparison purposes&#13;
        private static readonly int negativeZeroBits = floatToInt32Bits(-0.0f);&#13;
&#13;
        // an inner value&#13;
        private float v;&#13;
&#13;
        /*&#13;
            Converts a single-precision decimal value to the 32-bit integer value&#13;
            with exactly the same binary representation.&#13;
         */&#13;
        private static int floatToInt32Bits(float f)&#13;
        {&#13;
            // copying the array with one float value to the byte array with corresponding length&#13;
            float[] floats = new[] { f };&#13;
            byte[] bytes = new byte[4];&#13;
            Buffer.BlockCopy(floats, 0, bytes, 0, 4);&#13;
&#13;
            // converting the byte array to the corresponding integer value&#13;
            return BitConverter.ToInt32(bytes, 0);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Constructs a newly allocated Float object that represents the primitive&#13;
        /// float argument.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="value"&gt;the value to be represented by the Float.&#13;
        /// &lt;/param&gt;&#13;
        public Float(float value)&#13;
        {&#13;
            v = value;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns the float value of this Float object.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;the float value represented by this object&#13;
        /// &lt;/returns&gt;&#13;
        public float floatValue()&#13;
        {&#13;
            return v;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Compares two Float objects numerically.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="anotherFloat"&gt;the Float to be compared.&#13;
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if anotherFloat is numerically equal to this Float; a&#13;
        /// value less than 0 if this Float is numerically less than anotherFloat;&#13;
        /// and a value greater than 0 if this Float is numerically greater than&#13;
        /// anotherFloat.&#13;
        /// &lt;/returns&gt;&#13;
        public override int compareTo(Object anotherFloat)&#13;
        {&#13;
            return compare(v, (anotherFloat as Float).v);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Compares the two specified float values.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="f1"&gt;the first float to compare.&#13;
        /// &lt;/param&gt;&lt;param name="f2"&gt;the second float to compare.&#13;
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if f1 is numerically equal to f2; a value less than 0&#13;
        /// if f1 is numerically less than f2; and a value greater than 0 if f1 is&#13;
        /// numerically greater than f2.&#13;
        /// &lt;/returns&gt;&#13;
        public static int compare(float f1, float f2)&#13;
        {&#13;
            if (float.IsNaN(f1))&#13;
            {&#13;
                if (float.IsNaN(f2))&#13;
                {&#13;
                    return 0;&#13;
                }&#13;
&#13;
                return 1;&#13;
            }&#13;
&#13;
            if (float.IsNaN(f2))&#13;
            {&#13;
                return -1;&#13;
            }&#13;
&#13;
            if (floatToInt32Bits(f1) == 0&#13;
                &amp;&amp; floatToInt32Bits(f2) == negativeZeroBits)&#13;
            {&#13;
                return 1;&#13;
            }&#13;
&#13;
            if (floatToInt32Bits(f1) == negativeZeroBits&#13;
                &amp;&amp; floatToInt32Bits(f2) == 0)&#13;
            {&#13;
                return -1;&#13;
            }&#13;
&#13;
            return (f1 &gt; f2 ? 1 : f1 &lt; f2 ? -1 : 0);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Compares this object against the specified object.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="obj"&gt;the object to be compared&#13;
        /// &lt;/param&gt;&lt;returns&gt;true if the objects are the same; false otherwise.&#13;
        /// &lt;/returns&gt;&#13;
        public override bool equals(Object obj)&#13;
        {&#13;
            if (obj == null)&#13;
            {&#13;
                return false;&#13;
            }&#13;
&#13;
            if (GetType() != obj.GetType())&#13;
            {&#13;
                return false;&#13;
            }&#13;
&#13;
            float v2 = (obj as Float).v;&#13;
&#13;
            if (float.IsNaN(v) &amp;&amp; float.IsNaN(v2))&#13;
            {&#13;
                return true;&#13;
            }&#13;
&#13;
            if (floatToInt32Bits(v) == negativeZeroBits)&#13;
            {&#13;
                return floatToInt32Bits(v2) == negativeZeroBits;&#13;
            }&#13;
&#13;
            if (floatToInt32Bits(v2) == negativeZeroBits)&#13;
            {&#13;
                return floatToInt32Bits(v) == negativeZeroBits;&#13;
            }&#13;
&#13;
            return (v == v2);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns a string representation of this Float object.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;a String representation of this object.&#13;
        /// &lt;/returns&gt;&#13;
        public override String toString()&#13;
        {&#13;
            return Float.toString(v);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns a string representation of the float argument.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="f"&gt;the float to be converted.&#13;
        /// &lt;/param&gt;&lt;returns&gt;a string representation of the argument.&#13;
        /// &lt;/returns&gt;&#13;
        public static String toString(float f)&#13;
        {&#13;
            return new String(f.ToString(CultureInfo.InvariantCulture));&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns a new float initialized to the value represented by the specified&#13;
        /// String, as performed by the valueOf method of class Float.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="s"&gt;the string to be parsed.&#13;
        /// &lt;/param&gt;&lt;returns&gt;the float value represented by the string argument.&#13;
        /// &lt;/returns&gt;&#13;
        public static float parseFloat(String s)&#13;
        {&#13;
            float result = float.Parse(s.ToString(), CultureInfo.InvariantCulture);&#13;
&#13;
            if (result == 0 &amp;&amp; s.startsWith("-"))&#13;
            {&#13;
                return -0.0f;&#13;
            }&#13;
&#13;
            return result;&#13;
        }&#13;
        &#13;
        public static implicit operator Float(float original)&#13;
        {&#13;
            return new Float(original);&#13;
        }&#13;
        &#13;
    }&#13;
&#13;
}&#13;
</code>
<code lang="Free Pascal">unit FloatUnit;

{$mode objfpc}{$H+}

interface

uses
  SysUtils, StringUnit;

type
  FloatToInt32 = record
    case binary: boolean of
      false: (val: single);
      true: (bits: longInt);
  end;

  (**
   * The Float class wraps a value of primitive type single (representing a float value) in an object.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  Float = class(Comparable)
    private
      var
        v: single;
      class function getNegativeZeroBits() : longInt;
    public
      const
          (**
           * A constant holding the positive infinity of type float.
           *)
           POSITIVE_INFINITY = 1.0 / 0.0;
          (**
           * A constant holding the negative infinity of type float.
           *)
           NEGATIVE_INFINITY = -1.0 / 0.0;
          (**
           * A constant holding a Not-a-Number (NaN) value of type float.
           *)
           NaN = 0.0 / 0.0;
          (**
           * A constant holding the largest positive finite value of type float, (2-2^-23)·2^127.
           *)
           MAX_VALUE = 3.4028235e+38;
          (**
           * A constant holding the smallest positive nonzero value of type float, 2-^149.
           *)
           MIN_VALUE = 1.4e-45;
          (**
           * Maximum exponent a finite float variable may hav
           *)
           MAX_EXPONENT = 127;
          (**
           * Minimum exponent a normalized float variable may have.
           *)
           MIN_EXPONENT = -126;
          (**
           * A constant holding the smallest positive normal value of type float, 2^-126.
           *)
           MIN_NORMAL = 1.17549435e-38;
      constructor create(value: single);
      function floatValue() : single;
      function compareTo(anotherFloat: Object_) : longInt; override;
      class function compare(f1, f2: single) : longInt;
      function equals_(obj: Object_) : boolean; override;
      function toString_() : String_; override;
      class function toString_(f: single) : String_;
      class function parseFloat(s: String_) : single;
  end;

implementation

uses
  Math;

(**
 * Constructs a newly allocated Float object that represents the primitive
 * float argument.
 *
 * @param value the value to be represented by the Float.
 *)
constructor Float.create(value: single);
begin
  v := value;
end;

class function Float.getNegativeZeroBits(): longInt;
var
  bitConverter : FloatToInt32;
begin
  bitConverter.val := -0.0;
  getNegativeZeroBits := bitConverter.bits;
end;

(**
 * Returns the float value of this Float object.
 *
 * @return the float value represented by this object
 *)
function Float.floatValue() : single;
begin
  floatValue := v;
end;

(**
 * Compares two Float objects numerically.
 *
 * @param anotherFloat the Float to be compared.
 * @return the value 0 if anotherFloat is numerically equal to this Float; a
 * value less than 0 if this Float is numerically less than anotherFloat;
 * and a value greater than 0 if this Float is numerically greater than
 * anotherFloat.
 *)
function Float.compareTo(anotherFloat: Object_) : longInt;
begin
  compareTo := compare(v, (anotherFloat as Float).v);
end;

(**
 * Compares the two specified float values.
 *
 * @param f1 the first float to compare.
 * @param f2 the second float to compare.
 * @return the value 0 if f1 is numerically equal to f2; a value less than 0
 * if f1 is numerically less than f2; and a value greater than 0 if f1 is
 * numerically greater than f2.
 *)
class function Float.compare(f1, f2: single) : longInt;
var
  vBits, v2Bits : FloatToInt32;
  negativeZeroBits : longInt;
begin
  if isNan(f1) then begin
    if isNan(f2) then begin
       exit(0);
    end;

    exit(1);
  end;

  if isNan(f2) then begin
    exit(-1);
  end;

  vBits.val := f1;
  v2Bits.val := f2;
  negativeZeroBits := getNegativeZeroBits();

  if (vBits.bits = 0) and (v2Bits.bits = negativeZeroBits) then begin
    exit(1);
  end;

  if (vBits.bits = negativeZeroBits) and (v2Bits.bits = 0) then begin
    exit(-1);
  end;

  if f1 &gt; f2 then begin
    compare := 1;
  end
  else if f1 &lt; f2 then begin
    compare := -1;
  end
  else begin
    compare := 0;
  end;
end;

(**
 * Compares this object against the specified object.
 *
 * @param obj the object to be compared
 * @return true if the objects are the same; false otherwise.
 *)
function Float.equals_(obj: Object_) : boolean;
var
  vBits, v2Bits : FloatToInt32;
  v2 : single;
  negativeZeroBits : longInt;
begin
  if obj = nil then begin
    exit(false);
  end;

  if typeOf(self) &lt;&gt; typeOf(obj) then begin
    exit(false);
  end;

  v2 := (obj as Float).v;

  if isNan(v) and isNan(v2) then begin
    exit(true);
  end;

  vBits.val := v;
  v2Bits.val := v2;
  negativeZeroBits := getNegativeZeroBits();

  if vBits.bits = negativeZeroBits then begin
    exit(v2Bits.bits = negativeZeroBits);
  end;

  if v2Bits.bits = negativeZeroBits then begin
    exit(vBits.bits = negativeZeroBits);
  end;

  equals_ := v = v2;
end;

(**
 * Returns a string representation of this Float object.
 *
 * @return a String representation of this object.
 *)
function Float.toString_() : String_;
begin
  toString_ := Float.toString_(v);
end;

(**
 * Returns a string representation of the float argument.
 *
 * @param f the float to be converted.
 * @return a string representation of the argument.
 *)
class function Float.toString_(f: single) : String_;
var
  fs: TFormatSettings;
begin
  fs.DecimalSeparator := '.';
  toString_ := String_.create(FloatToStr(f, fs));
end;

(**
 * Returns a new float initialized to the value represented by the specified
 * String, as performed by the valueOf method of class Float.
 *
 * @param s the string to be parsed.
 * @return the float value represented by the string argument.
 *)
class function Float.parseFloat(s: String_) : single;
var
  fs: TFormatSettings;
begin
  fs.DecimalSeparator := '.';
  parseFloat := strToFloat(trim(s.strProperty), fs);
end;

operator := (original: single) s: Float;
begin
  s.create(original);
end;

end.

</code>

</codes>
