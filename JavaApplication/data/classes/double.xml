<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef DOUBLE_INCLUDED&#13;
#define DOUBLE_INCLUDED&#13;
&#13;
#include "String.h"&#13;
#include &lt;stdbool.h&gt;&#13;
#include &lt;stdint.h&gt;&#13;
&#13;
/**&#13;
 * The Double class wraps a value of the primitive type double in an object.&#13;
 *&#13;
 * @author Petr Kozler (A13B0359P)&#13;
 */&#13;
&#13;
/**&#13;
 * A constant holding the positive infinity of type double.&#13;
 */&#13;
#define Double_POSITIVE_INFINITY 1.0 / 0.0&#13;
/**&#13;
 * A constant holding the negative infinity of type double.&#13;
 */&#13;
#define Double_NEGATIVE_INFINITY -1.0 / 0.0&#13;
/**&#13;
 * A constant holding a Not-a-Number (NaN) value of type double.&#13;
 */&#13;
#define Double_NaN 0.0 / 0.0&#13;
/**&#13;
 * A constant holding the largest positive finite value of type double, (2-2^-52)·2^1023.&#13;
 */&#13;
#define Double_MAX_VALUE 1.7976931348623157e+308&#13;
/**&#13;
 * A constant holding the smallest positive nonzero value of type double, 2^-1074.&#13;
 */&#13;
#define Double_MIN_VALUE 4.9e-324&#13;
/**&#13;
 * Maximum exponent a finite double variable may have.&#13;
 */&#13;
#define Double_MAX_EXPONENT 1023&#13;
/**&#13;
 * Minimum exponent a normalized double variable may have.&#13;
 */&#13;
#define Double_MIN_EXPONENT -1022&#13;
/**&#13;
 * A constant holding the smallest positive normal value of type double, 2^-1022.&#13;
 */&#13;
#define Double_MIN_NORMAL 2.2250738585072014e-308&#13;
&#13;
typedef union {&#13;
    double val;&#13;
    int64_t bits;&#13;
} DoubleInt64;&#13;
&#13;
typedef struct {&#13;
    double v;&#13;
} Double;&#13;
&#13;
Double *new_Double(double value);&#13;
double doubleValue(Double *ptr);&#13;
int32_t compareToD(Double *ptr, Double *anotherDouble);&#13;
int32_t Double_compare(double d1, double d2);&#13;
bool equalsD(Double *ptr, Double *obj);&#13;
String *toStringD(Double *ptr);&#13;
String *Double_toString(double d);&#13;
double Double_parseDouble(String *s);&#13;
&#13;
#endif /* DOUBLE_INCLUDED */&#13;
&#13;
#include "Double.h"&#13;
&#13;
#include &lt;stdio.h&gt;&#13;
#include &lt;stdlib.h&gt;&#13;
#include &lt;string.h&gt;&#13;
#include &lt;math.h&gt;&#13;
&#13;
#define _MAX_DOUBLE_STRLEN 13&#13;
&#13;
/**&#13;
 * Constructs a newly allocated Double object that represents the primitive&#13;
 * double argument.&#13;
 *&#13;
 * @param value the value to be represented by the Double.&#13;
 */&#13;
Double *new_Double(double value) {&#13;
    Double *d = malloc(sizeof (Double));&#13;
    d-&gt;v = value;&#13;
&#13;
    return d;&#13;
}&#13;
&#13;
long _getNegativeZeroDoubleBits() {&#13;
    DoubleInt64 bitConverter;&#13;
    bitConverter.val = -0.0;&#13;
&#13;
    return bitConverter.bits;&#13;
}&#13;
&#13;
/**&#13;
 * Returns the double value of this Double object.&#13;
 *&#13;
 * @return the double value represented by this object&#13;
 */&#13;
double doubleValue(Double *ptr) {&#13;
    return ptr-&gt;v;&#13;
}&#13;
&#13;
/**&#13;
 * Compares two Double objects numerically.&#13;
 *&#13;
 * @param anotherDouble the Double to be compared.&#13;
 * @return the value 0 if anotherDouble is numerically equal to this Double;&#13;
 * a value less than 0 if this Double is numerically less than&#13;
 * anotherDouble; and a value greater than 0 if this Double is numerically&#13;
 * greater than anotherDouble.&#13;
 */&#13;
int32_t compareToD(Double *ptr, Double *anotherDouble) {&#13;
    return Double_compare(ptr-&gt;v, anotherDouble-&gt;v);&#13;
}&#13;
&#13;
/**&#13;
 * Compares the two specified double values.&#13;
 *&#13;
 * @param d1 the first double to compare&#13;
 * @param d2 the second double to compare&#13;
 * @return the value 0 if d1 is numerically equal to d2; a value less than 0&#13;
 * if d1 is numerically less than d2; and a value greater than 0 if d1 is&#13;
 * numerically greater than d2.&#13;
 */&#13;
int32_t Double_compare(double d1, double d2) {&#13;
    if (isnan(d1)) {&#13;
        if (isnan(d2)) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        return 1;&#13;
    }&#13;
&#13;
    if (isnan(d2)) {&#13;
        return -1;&#13;
    }&#13;
&#13;
    DoubleInt64 vBits, v2Bits;&#13;
    vBits.val = d1;&#13;
    v2Bits.val = d2;&#13;
    int64_t negativeZeroBits = _getNegativeZeroDoubleBits();&#13;
&#13;
    if (vBits.bits == 0&#13;
            &amp;&amp; v2Bits.bits == negativeZeroBits) {&#13;
        return 1;&#13;
    }&#13;
&#13;
    if (vBits.bits == negativeZeroBits&#13;
            &amp;&amp; v2Bits.bits == 0) {&#13;
        return -1;&#13;
    }&#13;
&#13;
    return (d1 &gt; d2 ? 1 : d1 &lt; d2 ? -1 : 0);&#13;
}&#13;
&#13;
/**&#13;
 * Compares this object against the specified object.&#13;
 *&#13;
 * @param obj the object to compare with.&#13;
 * @return true if the objects are the same; false otherwise.&#13;
 */&#13;
bool equalsD(Double *ptr, Double *obj) {&#13;
    if (ptr == obj) {&#13;
        return true;&#13;
    }&#13;
&#13;
    if (ptr == NULL || obj == NULL) {&#13;
        return false;&#13;
    }&#13;
&#13;
    if (sizeof (*ptr) != sizeof (*obj)) {&#13;
        return false;&#13;
    }&#13;
&#13;
    double v = ptr-&gt;v;&#13;
    double v2 = obj-&gt;v;&#13;
&#13;
    if (isnan(v) &amp;&amp; isnan(v2)) {&#13;
        return true;&#13;
    }&#13;
&#13;
    DoubleInt64 vBits, v2Bits;&#13;
    vBits.val = v;&#13;
    v2Bits.val = v2;&#13;
    int64_t negativeZeroBits = _getNegativeZeroDoubleBits();&#13;
&#13;
    if (vBits.bits == negativeZeroBits) {&#13;
        return v2Bits.bits == negativeZeroBits;&#13;
    }&#13;
&#13;
    if (v2Bits.bits == negativeZeroBits) {&#13;
        return vBits.bits == negativeZeroBits;&#13;
    }&#13;
&#13;
    return (v == v2);&#13;
}&#13;
&#13;
/**&#13;
 * Returns a string representation of this Double object.&#13;
 *&#13;
 * @return a String representation of this object.&#13;
 */&#13;
String *toStringD(Double *ptr) {&#13;
    return Double_toString(ptr-&gt;v);&#13;
}&#13;
&#13;
/**&#13;
 * Returns a string representation of the double argument.&#13;
 *&#13;
 * @param d the double to be converted.&#13;
 * @return a string representation of the argument.&#13;
 */&#13;
String *Double_toString(double d) {&#13;
    char *str = malloc(_MAX_DOUBLE_STRLEN + 1);&#13;
    char buf[_MAX_DOUBLE_STRLEN];&#13;
&#13;
    str[0] = '\0';&#13;
    sprintf(buf, "%lG", d);&#13;
    strcat(str, buf);&#13;
&#13;
    return new_String(str);&#13;
}&#13;
&#13;
/**&#13;
 * Returns a new double initialized to the value represented by the&#13;
 * specified String, as performed by the valueOf method of class Double.&#13;
 *&#13;
 * @param s the string to be parsed.&#13;
 * @return the double value represented by the string argument.&#13;
 */&#13;
double Double_parseDouble(String *s) {&#13;
    return strtod(s-&gt;s, NULL);&#13;
}&#13;
</code>
<code lang="C++">#ifndef DOUBLE_INCLUDED
#define DOUBLE_INCLUDED

#include "String.h"
#include &lt;cstdint&gt;

typedef union {
    double val;
    int64_t bits;
} DoubleInt64;

/**
 * The Double class wraps a value of the primitive type double in an object.
 *
 * @author Petr Kozler (A13B0359P)
 */
class Double {
    double v;
    static int64_t getNegativeZeroBits();
public:
    static const double POSITIVE_INFINITY;
    static const double NEGATIVE_INFINITY;
    static const double NaN;
    static const double MIN_VALUE;
    static const double MAX_VALUE;
    static const int32_t MAX_EXPONENT;
    static const int32_t MIN_EXPONENT;
    static const double MIN_NORMAL;
    Double(double value);
    double doubleValue();
    int32_t compareTo(Double *anotherDouble);
    static int32_t compare(double d1, double d2);
    bool equals(Double *obj);
    String *toString();
    static String *toString(double d);
    static double parseDouble(String *s);
    friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;s, Double &amp;obj);
};

#endif // DOUBLE_INCLUDED
&#13;
#include "Double.h"

#include &lt;string&gt;
#include &lt;cmath&gt;

/**
 * A constant holding the positive infinity of type double.
 */
const double Double::POSITIVE_INFINITY = 1.0 / 0.0;
/**
 * A constant holding the negative infinity of type double.
 */
const double Double::NEGATIVE_INFINITY = -1.0 / 0.0;
/**
 * A constant holding a Not-a-Number (NaN) value of type double.
 */
const double Double::NaN = 0.0 / 0.0;
/**
 * A constant holding the largest positive finite value of type double, (2-2^-52)·2^1023.
 */
const double Double::MAX_VALUE = 1.7976931348623157e+308;
/**
 * A constant holding the smallest positive nonzero value of type double, 2^-1074.
 */
const double Double::MIN_VALUE = 4.9e-324;
/**
 * Maximum exponent a finite double variable may have.
 */
const int32_t Double::MAX_EXPONENT = 1023;
/**
 * Minimum exponent a normalized double variable may have.
 */
const int32_t Double::MIN_EXPONENT = -1022;
/**
 * A constant holding the smallest positive normal value of type double, 2^-1022.
 */
const double Double::MIN_NORMAL = 2.2250738585072014e-308;

/**
 * Constructs a newly allocated Double object that represents the primitive
 * double argument.
 *
 * @param value the value to be represented by the Double.
 */
Double::Double(double value) {
    v = value;
}

int64_t Double::getNegativeZeroBits() {
    DoubleInt64 bitConverter;
    bitConverter.val = -0.0;

    return bitConverter.bits;
}

/**
 * Returns the double value of this Double object.
 *
 * @return the double value represented by this object
 */
double Double::doubleValue() {
    return v;
}

/**
 * Compares two Double objects numerically.
 *
 * @param anotherDouble the Double to be compared.
 * @return the value 0 if anotherDouble is numerically equal to this Double;
 * a value less than 0 if this Double is numerically less than
 * anotherDouble; and a value greater than 0 if this Double is numerically
 * greater than anotherDouble.
 */
int32_t Double::compareTo(Double *anotherDouble) {
    return compare(v, anotherDouble-&gt;v);
}

/**
 * Compares the two specified double values.
 *
 * @param d1 the first double to compare
 * @param d2 the second double to compare
 * @return the value 0 if d1 is numerically equal to d2; a value less than 0
 * if d1 is numerically less than d2; and a value greater than 0 if d1 is
 * numerically greater than d2.
 */
int32_t Double::compare(double d1, double d2) {
    if (std::isnan(d1)) {
        if (std::isnan(d2)) {
            return 0;
        }

        return 1;
    }

    if (std::isnan(d2)) {
        return -1;
    }

    DoubleInt64 vBits, v2Bits;
    vBits.val = d1;
    v2Bits.val = d2;
    int64_t negativeZeroBits = getNegativeZeroBits();

    if (vBits.bits == 0
            &amp;&amp; v2Bits.bits == negativeZeroBits) {
        return 1;
    }

    if (vBits.bits == negativeZeroBits
            &amp;&amp; v2Bits.bits == 0) {
        return -1;
    }

    return (d1 &gt; d2 ? 1 : d1 &lt; d2 ? -1 : 0);
}

/**
 * Compares this object against the specified object.
 *
 * @param obj the object to compare with.
 * @return true if the objects are the same; false otherwise.
 */
bool Double::equals(Double *obj) {
    if (obj == nullptr) {
        return false;
    }

    if (sizeof (*this) != sizeof (*obj)) {
        return false;
    }

    double v2 = obj-&gt;v;

    if (std::isnan(v) &amp;&amp; std::isnan(v2)) {
        return true;
    }

    DoubleInt64 vBits, v2Bits;
    vBits.val = v;
    v2Bits.val = v2;
    int64_t negativeZeroBits = getNegativeZeroBits();

    if (vBits.bits == negativeZeroBits) {
        return v2Bits.bits == negativeZeroBits;
    }

    if (v2Bits.bits == negativeZeroBits) {
        return vBits.bits == negativeZeroBits;
    }

    return (v == v2);
}

/**
 * Returns a string representation of this Double object.
 *
 * @return a String representation of this object.
 */
String *Double::toString() {
    return toString(v);
}

/**
 * Returns a string representation of the double argument.
 *
 * @param d the double to be converted.
 * @return a string representation of the argument.
 */
String *Double::toString(double d) {
    return new String(std::to_string(d));
}

/**
 * Returns a new double initialized to the value represented by the
 * specified String, as performed by the valueOf method of class Double.
 *
 * @param s the string to be parsed.
 * @return the double value represented by the string argument.
 */
double Double::parseDouble(String *s) {
    return std::stod(s-&gt;toString(), nullptr);
}

std::ostream &amp;operator&lt;&lt;(std::ostream &amp;s, Double &amp;obj) {
    return s &lt;&lt; obj.toString()-&gt;toString().c_str();
}
</code>
<code lang="C#">﻿using System;&#13;
&#13;
namespace JavaClasses {&#13;
&#13;
    /// &lt;summary&gt;&#13;
    /// The Double class wraps a value of the primitive type double in an object.&#13;
    /// &lt;/summary&gt;&#13;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;&#13;
    public class Double {&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// A constant holding the positive infinity of type double.&#13;
        /// &lt;/summary&gt;&#13;
        public const double POSITIVE_INFINITY = 1.0 / 0.0;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// A constant holding the negative infinity of type double.&#13;
        /// &lt;/summary&gt;&#13;
        public const double NEGATIVE_INFINITY = -1.0 / 0.0;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// A constant holding a Not-a-Number (NaN) value of type double.&#13;
        /// &lt;/summary&gt;&#13;
        public const double NaN = 0.0 / 0.0;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// A constant holding the largest positive finite value of type double, (2-2^-52)·2^1023.&#13;
        /// &lt;/summary&gt;&#13;
        public const double MAX_VALUE = 1.7976931348623157e+308;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// A constant holding the smallest positive nonzero value of type double, 2^-1074.&#13;
        /// &lt;/summary&gt;&#13;
        public const double MIN_VALUE = 4.9e-324;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Maximum exponent a finite double variable may have.&#13;
        /// &lt;/summary&gt;&#13;
        public const int MAX_EXPONENT = 1023;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Minimum exponent a normalized double variable may have.&#13;
        /// &lt;/summary&gt;&#13;
        public const int MIN_EXPONENT = -1022;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// A constant holding the smallest positive normal value of type double, 2^-1022.&#13;
        /// &lt;/summary&gt;&#13;
        public const double MIN_NORMAL = 2.2250738585072014E-308;&#13;
        &#13;
        // binary representation of negative zero value for comparison purposes&#13;
        private static readonly long negativeZeroBits = BitConverter.DoubleToInt64Bits(-0.0);&#13;
        private double v;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Constructs a newly allocated Double object that represents the primitive&#13;
        /// double argument.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="value"&gt;the value to be represented by the Double.&#13;
        /// &lt;/param&gt;&#13;
        public Double(double value) {&#13;
            v = value;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns the double value of this Double object.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;the double value represented by this object&#13;
        /// &lt;/returns&gt;&#13;
        public double doubleValue() {&#13;
            return v;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Compares two Double objects numerically.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="anotherDouble"&gt;the Double to be compared.&#13;
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if anotherDouble is numerically equal to this Double;&#13;
        /// a value less than 0 if this Double is numerically less than&#13;
        /// anotherDouble; and a value greater than 0 if this Double is numerically&#13;
        /// greater than anotherDouble.&#13;
        /// &lt;/returns&gt;&#13;
        public int compareTo(Double anotherDouble) {&#13;
            return compare(v, anotherDouble.v);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Compares the two specified double values.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="d1"&gt;the first double to compare&#13;
        /// &lt;/param&gt;&lt;param name="d2"&gt;the second double to compare&#13;
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if d1 is numerically equal to d2; a value less than 0&#13;
        /// if d1 is numerically less than d2; and a value greater than 0 if d1 is&#13;
        /// numerically greater than d2.&#13;
        /// &lt;/returns&gt;&#13;
        public static int compare(double d1, double d2) {&#13;
            /* testing for NaN values (a NaN value is considered greated&#13;
               than any other, including positive infinity,&#13;
               and two NaN values are considered equal) */&#13;
            if (double.IsNaN(d1)) {&#13;
                if (double.IsNaN(d2)) {&#13;
                    return 0;&#13;
                }&#13;
&#13;
                return 1;&#13;
            }&#13;
&#13;
            if (double.IsNaN(d2)) {&#13;
                return -1;&#13;
            }&#13;
&#13;
            /* testing for +0.0 and -0.0 value (a positive zero&#13;
               is considered greater than a negative zero) */&#13;
            if (BitConverter.DoubleToInt64Bits(d1) == 0&#13;
                &amp;&amp; BitConverter.DoubleToInt64Bits(d2) == negativeZeroBits) {&#13;
                return 1;&#13;
            }&#13;
&#13;
            if (BitConverter.DoubleToInt64Bits(d1) == negativeZeroBits&#13;
                &amp;&amp; BitConverter.DoubleToInt64Bits(d2) == 0) {&#13;
                return -1;&#13;
            }&#13;
&#13;
            /* testing for other values and returning&#13;
               1 if first value is greater, 0 if first value &#13;
               equals second value, -1 otherwise (same as for a float type) */&#13;
            return (d1 &gt; d2 ? 1 : d1 &lt; d2 ? -1 : 0);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Compares this object against the specified object.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="obj"&gt;the object to compare with.&#13;
        /// &lt;/param&gt;&lt;returns&gt;true if the objects are the same; false otherwise.&#13;
        /// &lt;/returns&gt;&#13;
        public bool equals(Object obj) {&#13;
            if (obj == null) {&#13;
                return false;&#13;
            }&#13;
&#13;
            if (GetType() != obj.GetType()) {&#13;
                return false;&#13;
            }&#13;
&#13;
            double v2 = (obj as Double).v;&#13;
&#13;
            // testing for NaN values (two NaN values are considered equal)&#13;
            if (double.IsNaN(v) &amp;&amp; double.IsNaN(v2)) {&#13;
                return true;&#13;
            }&#13;
&#13;
            // testing for zero values (+0.0 is considered greater than -0.0)&#13;
            if (BitConverter.DoubleToInt64Bits(v) == negativeZeroBits) {&#13;
                return BitConverter.DoubleToInt64Bits(v2) == negativeZeroBits;&#13;
            }&#13;
&#13;
            if (BitConverter.DoubleToInt64Bits(v2) == negativeZeroBits) {&#13;
                return BitConverter.DoubleToInt64Bits(v) == negativeZeroBits;&#13;
            }&#13;
&#13;
            // testing other values&#13;
            return (v == v2);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns a string representation of this Double object.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;a String representation of this object.&#13;
        /// &lt;/returns&gt;&#13;
        public String toString() {&#13;
            return Double.toString(v);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns a string representation of the double argument.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="d"&gt;the double to be converted.&#13;
        /// &lt;/param&gt;&lt;returns&gt;a string representation of the argument.&#13;
        /// &lt;/returns&gt;&#13;
        public static String toString(double d) {&#13;
            return d.ToString();&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns a new double initialized to the value represented by the&#13;
        /// specified String, as performed by the valueOf method of class Double.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="s"&gt;the string to be parsed.&#13;
        /// &lt;/param&gt;&lt;returns&gt;the double value represented by the string argument.&#13;
        /// &lt;/returns&gt;&#13;
        public static double parseDouble(String s) {&#13;
            return double.Parse(s.ToString());&#13;
        }&#13;
        &#13;
        public override string ToString() {&#13;
            return toString().ToString();&#13;
        }&#13;
&#13;
    }&#13;
&#13;
}&#13;
</code>
<code lang="Free Pascal">unit DoubleUnit;

{$mode objfpc}{$H+}

interface

uses
  SysUtils, StringUnit;

type
  DoubleToInt64 = record
    case binary: boolean of
      false: (val: double);
      true: (bits: int64);
  end;

  (**
   * The Double class wraps a value of the primitive type double in an object.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  Double_ = class
    private
      var
        v: double;
      class function getNegativeZeroBits() : int64;
    public
      const
          (**
           * A constant holding the positive infinity of type double.
           *)
           POSITIVE_INFINITY = 1.0 / 0.0;
          (**
           * A constant holding the negative infinity of type double.
           *)
           NEGATIVE_INFINITY = -1.0 / 0.0;
          (**
           * A constant holding a Not-a-Number (NaN) value of type double.
           *)
           NaN = 0.0 / 0.0;
          (**
           * A constant holding the largest positive finite value of type double, (2-2^-52)·2^1023.
           *)
           MAX_VALUE = 1.7976931348623157e+308;
          (**
           * A constant holding the smallest positive nonzero value of type double, 2^-1074.
           *)
           MIN_VALUE = 4.9e-324;
          (**
           * Maximum exponent a finite double variable may have.
           *)
           MAX_EXPONENT = 1023;
          (**
           * Minimum exponent a normalized double variable may have.
           *)
           MIN_EXPONENT = -1022;
          (**
           * A constant holding the smallest positive normal value of type double, 2^-1022.
           *)
           MIN_NORMAL = 2.2250738585072014e-308;
      constructor create(value: double);
      function doubleValue() : double;
      function compareTo(anotherDouble: Double_) : longInt;
      class function compare(d1, d2: double) : longInt;
      function equals(obj: TObject) : boolean; override;
      function toString_() : String_;
      class function toString_(d: double) : String_;
      class function parseDouble(s: String_) : double;
      function toString() : ansiString; override;
  end;

implementation

uses
  Math;

(**
 * Constructs a newly allocated Double object that represents the primitive
 * double argument.
 *
 * @param value the value to be represented by the Double.
 *)
constructor Double_.create(value: double);
begin
  v := value;
end;

class function Double_.getNegativeZeroBits(): int64;
var
  bitConverter : DoubleToInt64;
begin
  bitConverter.val := -0.0;
  getNegativeZeroBits := bitConverter.bits;
end;

(**
 * Returns the double value of this Double object.
 *
 * @return the double value represented by this object
 *)
function Double_.doubleValue() : double;
begin
  doubleValue := v;
end;

(**
 * Compares two Double objects numerically.
 *
 * @param anotherDouble the Double to be compared.
 * @return the value 0 if anotherDouble is numerically equal to this Double;
 * a value less than 0 if this Double is numerically less than
 * anotherDouble; and a value greater than 0 if this Double is numerically
 * greater than anotherDouble.
 *)
function Double_.compareTo(anotherDouble: Double_) : longInt;
begin
  compareTo := compare(v, anotherDouble.v);
end;

(**
 * Compares the two specified double values.
 *
 * @param d1 the first double to compare
 * @param d2 the second double to compare
 * @return the value 0 if d1 is numerically equal to d2; a value less than 0
 * if d1 is numerically less than d2; and a value greater than 0 if d1 is
 * numerically greater than d2.
 *)
class function Double_.compare(d1, d2: double) : longInt;
var
  vBits, v2Bits : DoubleToInt64;
  negativeZeroBits : int64;
begin
  if isNan(d1) then begin
    if isNan(d2) then begin
       exit(0);
    end;

    exit(1);
  end;

  if isNan(d2) then begin
    exit(-1);
  end;

  vBits.val := d1;
  v2Bits.val := d2;
  negativeZeroBits := getNegativeZeroBits();

  if (vBits.bits = 0) and (v2Bits.bits = negativeZeroBits) then begin
    exit(1);
  end;

  if (vBits.bits = negativeZeroBits) and (v2Bits.bits = 0) then begin
    exit(-1);
  end;

  if d1 &gt; d2 then begin
    compare := 1;
  end
  else if d1 &lt; d2 then begin
    compare := -1;
  end
  else begin
    compare := 0;
  end;
end;

(**
 * Compares this object against the specified object.
 *
 * @param obj the object to compare with.
 * @return true if the objects are the same; false otherwise.
 *)
function Double_.equals(obj: TObject) : boolean;
var
  vBits, v2Bits : DoubleToInt64;
  v2 : double;
  negativeZeroBits : int64;
begin
  if obj = nil then begin
    exit(false);
  end;

  if typeOf(self) &lt;&gt; typeOf(obj) then begin
    exit(false);
  end;

  v2 := Double_(obj).v;

  if isNan(v) and isNan(v2) then begin
    exit(true);
  end;

  vBits.val := v;
  v2Bits.val := v2;
  negativeZeroBits := getNegativeZeroBits();

  if vBits.bits = negativeZeroBits then begin
    exit(v2Bits.bits = negativeZeroBits);
  end;

  if v2Bits.bits = negativeZeroBits then begin
    exit(vBits.bits = negativeZeroBits);
  end;

  equals := (v = v2);
end;

(**
 * Returns a string representation of this Double object.
 *
 * @return a String representation of this object.
 *)
function Double_.toString_() : String_;
begin
  toString_ := Double_.toString_(v);
end;

(**
 * Returns a string representation of the double argument.
 *
 * @param d the double to be converted.
 * @return a string representation of the argument.
 *)
class function Double_.toString_(d: double) : String_;
begin
  toString_ := String_.create(FloatToStr(d));
end;

(**
 * Returns a new double initialized to the value represented by the
 * specified String, as performed by the valueOf method of class Double.
 *
 * @param s the string to be parsed.
 * @return the double value represented by the string argument.
 *)
class function Double_.parseDouble(s: String_) : double;
begin
  parseDouble := strToFloat(s.toString());
end;

function Double_.toString() : ansiString;
var
  s: String_;
begin
  s := toString();
  toString := s.ToString();
end;

end.

</code>
</codes>
