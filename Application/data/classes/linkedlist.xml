<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef LINKEDLIST_INCLUDED&#13;
#define LINKEDLIST_INCLUDED&#13;
&#13;
#include "String.h"&#13;
#include &lt;stdbool.h&gt;&#13;
#include &lt;stdint.h&gt;&#13;
&#13;
/**&#13;
 * Doubly-linked list implementation of the List and Deque interfaces.&#13;
 *&#13;
 * @author Petr Kozler (A13B0359P)&#13;
 */&#13;
&#13;
typedef struct LINKED_LIST_NODE {&#13;
    void *value;&#13;
    struct LINKED_LIST_NODE *next;&#13;
    struct LINKED_LIST_NODE *previous;&#13;
} LinkedListNode;&#13;
&#13;
typedef struct {&#13;
    int32_t count;&#13;
    LinkedListNode *first;&#13;
    LinkedListNode *last;&#13;
} LinkedList;&#13;
&#13;
LinkedList *new_LinkedList();&#13;
LinkedList *new_LinkedListAddAll(LinkedList *c);&#13;
void delete_LinkedList(LinkedList *ptr);&#13;
bool addL(LinkedList *ptr, void *e);&#13;
void addAtL(LinkedList *ptr, int32_t index, void *element);&#13;
void *getL(LinkedList *ptr, int32_t index);&#13;
void *setL(LinkedList *ptr, int32_t index, void *element);&#13;
void *removeAtL(LinkedList *ptr, int32_t index);&#13;
int32_t sizeL(LinkedList *ptr);&#13;
bool isEmptyL(LinkedList *ptr);&#13;
void clearL(LinkedList *ptr);&#13;
String *toStringLl(LinkedList *ptr, String *(*toString)(void *));&#13;
&#13;
#endif /* LINKEDLIST_INCLUDED */&#13;
&#13;
#include "LinkedList.h"&#13;
&#13;
#include "StringBuilder.h"&#13;
#include &lt;stdlib.h&gt;&#13;
#include &lt;string.h&gt;&#13;
&#13;
/**&#13;
 * Constructs an empty list.&#13;
 */&#13;
LinkedList *new_LinkedList() {&#13;
    LinkedList *list = malloc(sizeof(LinkedList));&#13;
    list-&gt;count = 0;&#13;
    list-&gt;first = NULL;&#13;
    list-&gt;last = NULL;&#13;
&#13;
    return list;&#13;
}&#13;
&#13;
/**&#13;
 * Constructs a list containing the elements of the specified collection, in&#13;
 * the order they are returned by the collection's iterator.&#13;
 *&#13;
 * @param c the collection whose elements are to be placed into this list&#13;
 */&#13;
LinkedList *new_LinkedListAddAll(LinkedList *c) {&#13;
    LinkedList *list = new_LinkedList();&#13;
    LinkedListNode *node = c-&gt;first;&#13;
&#13;
    while (node != NULL) {&#13;
        addL(list, node-&gt;value);&#13;
        node = node-&gt;next;&#13;
    }&#13;
&#13;
    return list;&#13;
}&#13;
&#13;
void delete_LinkedList(LinkedList *ptr) {&#13;
    clearL(ptr);&#13;
    free(ptr);&#13;
}&#13;
&#13;
void _addAfter(LinkedList *ptr, LinkedListNode *node, LinkedListNode *newNode) {&#13;
    newNode-&gt;previous = node;&#13;
    newNode-&gt;next = node-&gt;next;&#13;
&#13;
    if (node-&gt;next == NULL) {&#13;
        ptr-&gt;last = newNode;&#13;
    }&#13;
    else {&#13;
        node-&gt;next-&gt;previous = newNode;&#13;
    }&#13;
&#13;
    node-&gt;next = newNode;&#13;
}&#13;
&#13;
void _addBefore(LinkedList *ptr, LinkedListNode *node, LinkedListNode *newNode) {&#13;
    newNode-&gt;previous = node-&gt;previous;&#13;
    newNode-&gt;next = node;&#13;
&#13;
    if (node-&gt;previous == NULL) {&#13;
        ptr-&gt;first = newNode;&#13;
    }&#13;
    else {&#13;
        node-&gt;previous-&gt;next = newNode;&#13;
    }&#13;
&#13;
    node-&gt;previous = newNode;&#13;
}&#13;
&#13;
void _addFirst(LinkedList *ptr, LinkedListNode *newNode) {&#13;
    if (ptr-&gt;first == NULL) {&#13;
        ptr-&gt;first = newNode;&#13;
        ptr-&gt;last = newNode;&#13;
        newNode-&gt;previous = NULL;&#13;
        newNode-&gt;next = NULL;&#13;
    }&#13;
    else {&#13;
        _addBefore(ptr, ptr-&gt;first, newNode);&#13;
    }&#13;
}&#13;
&#13;
void _addLast(LinkedList *ptr, LinkedListNode *newNode) {&#13;
    if (ptr-&gt;last == NULL) {&#13;
        _addFirst(ptr, newNode);&#13;
    }&#13;
    else {&#13;
        _addAfter(ptr, ptr-&gt;last, newNode);&#13;
    }&#13;
}&#13;
&#13;
void _removeNode(LinkedList *ptr, LinkedListNode *node) {&#13;
    if (node-&gt;previous == NULL) {&#13;
        ptr-&gt;first = node-&gt;next;&#13;
    }&#13;
    else {&#13;
        node-&gt;previous-&gt;next = node-&gt;next;&#13;
    }&#13;
&#13;
    if (node-&gt;next == NULL) {&#13;
        ptr-&gt;last = node-&gt;previous;&#13;
    }&#13;
    else {&#13;
        node-&gt;next-&gt;previous = node-&gt;previous;&#13;
    }&#13;
}&#13;
&#13;
/**&#13;
 * Appends the specified element to the end of this list.&#13;
 *&#13;
 * @param e element to be appended to this list&#13;
 * @return true (as specified by Collection.add(E))&#13;
 */&#13;
bool addL(LinkedList *ptr, void *e) {&#13;
    LinkedListNode *newNode = malloc(sizeof(LinkedListNode));&#13;
    newNode-&gt;value = e;&#13;
    _addLast(ptr, newNode);&#13;
    ptr-&gt;count++;&#13;
&#13;
    return true;&#13;
}&#13;
&#13;
/**&#13;
 * Inserts the specified element at the specified position in this list.&#13;
 *&#13;
 * @param index index at which the specified element is to be inserted&#13;
 * @param element element to be inserted&#13;
 */&#13;
void addAtL(LinkedList *ptr, int32_t index, void *element) {&#13;
    LinkedListNode *newNode = malloc(sizeof(LinkedListNode));&#13;
    newNode-&gt;value = element;&#13;
&#13;
    if (index &lt; 1) {&#13;
        _addFirst(ptr, newNode);&#13;
    }&#13;
    else {&#13;
        LinkedListNode *node = ptr-&gt;first;&#13;
&#13;
        int32_t i;&#13;
        for (i = 0; i &lt; index; i++) {&#13;
            node = node-&gt;next;&#13;
        }&#13;
&#13;
        _addBefore(ptr, node, newNode);&#13;
    }&#13;
&#13;
    ptr-&gt;count++;&#13;
}&#13;
&#13;
/**&#13;
 * Returns the element at the specified position in this list.&#13;
 *&#13;
 * @param index index of the element to return&#13;
 * @return the element at the specified position in this list&#13;
 */&#13;
void *getL(LinkedList *ptr, int32_t index) {&#13;
    LinkedListNode *node = ptr-&gt;first;&#13;
&#13;
    int32_t i;&#13;
    for (i = 0; i &lt; index; i++) {&#13;
        node = node-&gt;next;&#13;
    }&#13;
&#13;
    return node-&gt;value;&#13;
}&#13;
&#13;
/**&#13;
 * Replaces the element at the specified position in this list with the&#13;
 * specified element.&#13;
 *&#13;
 * @param index index of the element to replace&#13;
 * @param element element to be stored at the specified position&#13;
 * @return the element previously at the specified position&#13;
 */&#13;
void *setL(LinkedList *ptr, int32_t index, void *element) {&#13;
    LinkedListNode *original;&#13;
&#13;
    if (index &lt; 1) {&#13;
        original = ptr-&gt;first-&gt;value;&#13;
        ptr-&gt;first-&gt;value = element;&#13;
    }&#13;
    else {&#13;
        LinkedListNode *node = ptr-&gt;first;&#13;
&#13;
        int32_t i;&#13;
        for (i = 0; i &lt; index; i++) {&#13;
            node = node-&gt;next;&#13;
        }&#13;
&#13;
        original = node-&gt;value;&#13;
        node-&gt;value = element;&#13;
    }&#13;
&#13;
    return original;&#13;
}&#13;
&#13;
/**&#13;
 * Removes the element at the specified position in this list.&#13;
 *&#13;
 * @param index the index of the element to be removed&#13;
 * @return the element previously at the specified position&#13;
 */&#13;
void *removeAtL(LinkedList *ptr, int32_t index) {&#13;
    LinkedListNode *removed;&#13;
    LinkedListNode *node;&#13;
&#13;
    if (index &lt; 1) {&#13;
        node = ptr-&gt;first;&#13;
        removed = node-&gt;value;&#13;
        _removeNode(ptr, node);&#13;
        free(node);&#13;
    }&#13;
    else {&#13;
        node = ptr-&gt;first;&#13;
&#13;
        int32_t i;&#13;
        for (i = 0; i &lt; index; i++) {&#13;
            node = node-&gt;next;&#13;
        }&#13;
&#13;
        removed = node-&gt;value;&#13;
        _removeNode(ptr, node);&#13;
        free(node);&#13;
    }&#13;
&#13;
    ptr-&gt;count--;&#13;
&#13;
    return removed;&#13;
}&#13;
&#13;
/**&#13;
 * Returns the number of elements in this list.&#13;
 *&#13;
 * @return the number of elements in this list&#13;
 */&#13;
int32_t sizeL(LinkedList *ptr) {&#13;
    return ptr-&gt;count;&#13;
}&#13;
&#13;
/**&#13;
 * Returns true if this list contains no elements.&#13;
 *&#13;
 * @return true if this list contains no elements&#13;
 */&#13;
bool isEmptyL(LinkedList *ptr) {&#13;
    return (ptr-&gt;count == 0);&#13;
}&#13;
&#13;
/**&#13;
 * Removes all of the elements from this list.&#13;
 */&#13;
void clearL(LinkedList *ptr) {&#13;
    while (ptr-&gt;first != NULL) {&#13;
        removeAtL(ptr, 0);&#13;
    }&#13;
}&#13;
&#13;
/**&#13;
 * Returns a string representation of the object.&#13;
 *&#13;
 * @return a string representation of the object.&#13;
 */&#13;
String *toStringLl(LinkedList *ptr, String *(*toString)(void *)) {&#13;
    StringBuilder *sb = new_StringBuilder();&#13;
    String *str = new_String("[");&#13;
    append(sb, str);&#13;
    delete_String(str);&#13;
    LinkedListNode *node = ptr-&gt;first;&#13;
    &#13;
    if (node != NULL) {&#13;
        str = toString(node-&gt;value);&#13;
        append(sb, str);&#13;
        delete_String(str);&#13;
        node = node-&gt;next;&#13;
    }&#13;
&#13;
    while (node != NULL) {&#13;
        str = new_String(", ");&#13;
        append(sb, str);&#13;
        delete_String(str);&#13;
        str = toString(node-&gt;value);&#13;
        append(sb, str);&#13;
        delete_String(str);&#13;
        node = node-&gt;next;&#13;
    }&#13;
&#13;
    str = new_String("]");&#13;
    append(sb, str);&#13;
    delete_String(str);&#13;
    str = toStringSb(sb);&#13;
    delete_StringBuilder(sb);&#13;
&#13;
    return str;&#13;
}&#13;
</code>
<code lang="C++">#ifndef LINKEDLIST_INCLUDED
#define LINKEDLIST_INCLUDED

#include "String.h"
#include &lt;list&gt;
#include &lt;cstdint&gt;
#include &lt;sstream&gt;

/**
 * Doubly-linked list implementation of the List and Deque interfaces.
 *
 * @author Petr Kozler (A13B0359P)
 */
template &lt;class E&gt;
class LinkedList {
    std::list&lt;E&gt; l;
public:
    LinkedList();
    LinkedList(LinkedList&lt;E&gt; *c);
    ~LinkedList();
    std::list&lt;E&gt; getList();
    bool add(E e);
    void add(int32_t index, E element);
    E get(int32_t index);
    E set(int32_t index, E element);
    E remove(int32_t index);
    int32_t size();
    bool isEmpty();
    void clear();
    String *toString(String *(*toString)(E));
};

template &lt;class E&gt; std::ostream &amp;operator&lt;&lt;(std::ostream &amp;s, LinkedList&lt;E&gt; &amp;obj);

/**
 * Constructs an empty list.
 */
template &lt;class E&gt; LinkedList&lt;E&gt;::LinkedList() {
    l;
}

/**
 * Constructs a list containing the elements of the specified collection, in
 * the order they are returned by the collection's iterator.
 *
 * @param c the collection whose elements are to be placed into this list
 */
template &lt;class E&gt; LinkedList&lt;E&gt;::LinkedList(LinkedList&lt;E&gt; *c) {
    l(c-&gt;l);
}

template &lt;class E&gt; LinkedList&lt;E&gt;::~LinkedList() {
    l.clear();
}

template &lt;class E&gt; std::list&lt;E&gt; LinkedList&lt;E&gt;::getList() {
    return l;
}

/**
 * Appends the specified element to the end of this list.
 *
 * @param e element to be appended to this list
 * @return true (as specified by Collection.add(E))
 */
template &lt;class E&gt; bool LinkedList&lt;E&gt;::add(E e) {
    l.push_back(e);

    return true;
}

/**
 * Inserts the specified element at the specified position in this list.
 *
 * @param index index at which the specified element is to be inserted
 * @param element element to be inserted
 */
template &lt;class E&gt; void LinkedList&lt;E&gt;::add(int32_t index, E element) {
    l.insert(index, element);
}

/**
 * Returns the element at the specified position in this list.
 *
 * @param index index of the element to return
 * @return the element at the specified position in this list
 */
template &lt;class E&gt; E LinkedList&lt;E&gt;::get(int32_t index) {
    auto it = l.begin();
    std::advance(it, index);

    return *it;
}

/**
 * Replaces the element at the specified position in this list with the
 * specified element.
 *
 * @param index index of the element to replace
 * @param element element to be stored at the specified position
 * @return the element previously at the specified position
 */
template &lt;class E&gt; E LinkedList&lt;E&gt;::set(int32_t index, E element) {
    E original;
    auto it = l.begin();
    std::advance(it, index);
    original = *it;
    *it = element;

    return original;
}

/**
 * Removes the element at the specified position in this list.
 *
 * @param index the index of the element to be removed
 * @return the element previously at the specified position
 */
template &lt;class E&gt; E LinkedList&lt;E&gt;::remove(int32_t index) {
    E removed;
    auto it = l.begin();
    std::advance(it, index);
    removed = *it;
    l.erase(index);

    return removed;
}

/**
 * Returns the number of elements in this list.
 *
 * @return the number of elements in this list
 */
template &lt;class E&gt; int32_t LinkedList&lt;E&gt;::size() {
    return l.size();
}

/**
 * Returns true if this list contains no elements.
 *
 * @return true if this list contains no elements
 */
template &lt;class E&gt; bool LinkedList&lt;E&gt;::isEmpty() {
    return l.empty();
}

/**
 * Removes all of the elements from this list.
 */
template &lt;class E&gt; void LinkedList&lt;E&gt;::clear() {
    l.clear();
}

/**
 * Returns a string representation of the object.
 *
 * @return a string representation of the object.
 */
template &lt;class E&gt; String *LinkedList&lt;E&gt;::toString(String *(*toString)(E)) {
    int32_t length = l.size();
    std::ostringstream oss("[");

    if (length &gt; 0) {
        String *str = toString(l.begin());
        oss &lt;&lt; str-&gt;toString();
        delete str;
    }

    for (int32_t i = 1; i &lt; length; i++) {
        auto it = l.begin();
        std::advance(it, i);
        String *str = toString(it);
        oss &lt;&lt; ", " &lt;&lt; str-&gt;toString();
        delete str;
    }

    oss &lt;&lt; "]";

    return new String(oss.str());
}

template &lt;class E&gt; std::ostream &amp;operator&lt;&lt;(std::ostream &amp;s, LinkedList&lt;E&gt; &amp;obj) {
    return s &lt;&lt; obj.toString()-&gt;toString().c_str();
}

#endif // LINKEDLIST_INCLUDED
&#13;
#include "LinkedList.h"</code>
<code lang="C#">﻿using System.Collections.Generic;&#13;
&#13;
namespace JavaClasses {&#13;
&#13;
    /// &lt;summary&gt;&#13;
    /// Doubly-linked list implementation of the List and Deque interfaces.&#13;
    /// &lt;/summary&gt;&#13;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;&#13;
    public class LinkedList&lt;E&gt; {&#13;
&#13;
        public System.Collections.Generic.LinkedList&lt;E&gt; l { get; private set; }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Constructs an empty list.&#13;
        /// &lt;/summary&gt;&#13;
        public LinkedList() {&#13;
            l = new System.Collections.Generic.LinkedList&lt;E&gt;();&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Constructs a list containing the elements of the specified collection, in&#13;
        /// the order they are returned by the collection's iterator.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="c"&gt;the collection whose elements are to be placed into this list&#13;
        /// &lt;/param&gt;&#13;
        public LinkedList(LinkedList&lt;E&gt; c) {&#13;
            l = new System.Collections.Generic.LinkedList&lt;E&gt;(c.l);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Appends the specified element to the end of this list.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="e"&gt;element to be appended to this list&#13;
        /// &lt;/param&gt;&lt;returns&gt;true (as specified by Collection.add(E))&#13;
        /// &lt;/returns&gt;&#13;
        public bool add(E e) {&#13;
            l.AddLast(e);&#13;
            return true;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Inserts the specified element at the specified position in this list.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="index"&gt;index at which the specified element is to be inserted&#13;
        /// &lt;/param&gt;&lt;param name="element"&gt;element to be inserted&#13;
        /// &lt;/param&gt;&#13;
        public void add(int index, E element) {&#13;
            // creating the first node, if the list is empty&#13;
            if (index &lt; 1) {&#13;
                l.AddFirst(element);&#13;
                return;&#13;
            }&#13;
&#13;
            LinkedListNode&lt;E&gt; node = l.First;&#13;
&#13;
            // iterating to the node at the specified position in the list&#13;
            for (int i = 0; i &lt; index; i++) {&#13;
                node = node.Next;&#13;
            }&#13;
&#13;
            // inserting the new element before the node&#13;
            l.AddBefore(node, element);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns the element at the specified position in this list.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="index"&gt;index of the element to return&#13;
        /// &lt;/param&gt;&lt;returns&gt;the element at the specified position in this list&#13;
        /// &lt;/returns&gt;&#13;
        public E get(int index) {&#13;
            LinkedListNode&lt;E&gt; node = l.First;&#13;
&#13;
            // iterating to the node at the specified position in the list&#13;
            for (int i = 0; i &lt; index; i++) {&#13;
                node = node.Next;&#13;
            }&#13;
&#13;
            // returning the value of the node&#13;
            return node.Value;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Replaces the element at the specified position in this list with the&#13;
        /// specified element.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="index"&gt;index of the element to replace&#13;
        /// &lt;/param&gt;&lt;param name="element"&gt;element to be stored at the specified position&#13;
        /// &lt;/param&gt;&lt;returns&gt;the element previously at the specified position&#13;
        /// &lt;/returns&gt;&#13;
        public E set(int index, E element) {&#13;
            E original;&#13;
&#13;
            // replacing the value of node at the beginning if the index is zero&#13;
            if (index &lt; 1) {&#13;
                original = l.First.Value;&#13;
                l.First.Value = element;&#13;
                return original;&#13;
            }&#13;
&#13;
            LinkedListNode&lt;E&gt; node = l.First;&#13;
&#13;
            // iterating to the node at the specified position in the list&#13;
            for (int i = 0; i &lt; index; i++) {&#13;
                node = node.Next;&#13;
            }&#13;
&#13;
            // replacing the value of the node in the list and returning the original value&#13;
            original = node.Value;&#13;
            node.Value = element;&#13;
            return original;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Removes the element at the specified position in this list.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="index"&gt;the index of the element to be removed&#13;
        /// &lt;/param&gt;&lt;returns&gt;the element previously at the specified position&#13;
        /// &lt;/returns&gt;&#13;
        public E remove(int index) {&#13;
            E removed;&#13;
&#13;
            // removing the node at the beginning if the index is zero&#13;
            if (index &lt; 1) {&#13;
                removed = l.First.Value;&#13;
                l.RemoveFirst();&#13;
                return removed;&#13;
            }&#13;
&#13;
            LinkedListNode&lt;E&gt; node = l.First;&#13;
&#13;
            // iterating to the node at the specified position in the list&#13;
            for (int i = 0; i &lt; index; i++) {&#13;
                node = node.Next;&#13;
            }&#13;
&#13;
            // removing the node in the list and returning its value&#13;
            removed = node.Value;&#13;
            l.Remove(node);&#13;
            return removed;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns the number of elements in this list.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;the number of elements in this list&#13;
        /// &lt;/returns&gt;&#13;
        public int size() {&#13;
            return l.Count;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns true if this list contains no elements.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;true if this list contains no elements&#13;
        /// &lt;/returns&gt;&#13;
        public bool isEmpty() {&#13;
            return l.Count == 0;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Removes all of the elements from this list.&#13;
        /// &lt;/summary&gt;&#13;
        public void clear() {&#13;
            l.Clear();&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns a string representation of the object.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;a string representation of the object.&#13;
        /// &lt;/returns&gt;&#13;
        public String toString() {&#13;
            return new String(ToString());&#13;
        }&#13;
&#13;
    }&#13;
&#13;
}&#13;
&#13;
</code>
<code lang="Free Pascal">unit LinkedListUnit;

{$mode objfpc}{$H+}

interface

uses
  StringUnit;

type
  LinkedListNode = class
    private
      var
        next: LinkedListNode;
        previous: LinkedListNode;
        value: TObject;
  end;

  (**
   * Doubly-linked list implementation of the List and Deque interfaces.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  LinkedList = class
    private
      var
        count: longInt;
        first: LinkedListNode;
        last: LinkedListNode;
      procedure addAfter(node, newNode: LinkedListNode);
      procedure addBefore(node, newNode: LinkedListNode);
      procedure addFirst(newNode: LinkedListNode);
      procedure addLast(newNode: LinkedListNode);
      procedure removeNode(node: LinkedListNode);
    public
      constructor create();
      constructor create(c: LinkedList);
      destructor destroy(); override;
      function add(e: TObject) : boolean;
      procedure add(index: longInt; element: TObject);
      function get(index: longInt) : TObject;
      function set_(index: longInt; element: TObject) : TObject;
      function remove(index: longInt) : TObject;
      function size() : longInt;
      function isEmpty() : boolean;
      procedure clear();
      function toString_() : String_;
      function toString() : ansiString; override;
  end;

implementation

uses
  StringBuilderUint, Classes, SysUtils;

(**
 * Constructs an empty list.
 *)
constructor LinkedList.create();
begin
  count := 0;
  first := nil;
  last := nil;
end;

(**
 * Constructs a list containing the elements of the specified collection, in
 * the order they are returned by the collection's iterator.
 *
 * @param c the collection whose elements are to be placed into this list
 *)
constructor LinkedList.create(c: LinkedList);
var
  node: LinkedListNode;
begin
  create();
  node := c.first;

  while node &lt;&gt; nil do begin
    add(node.value);
    node := node.next;
  end;
end;

destructor LinkedList.destroy();
begin
  clear();
  inherited;
end;

procedure LinkedList.addAfter(node, newNode: LinkedListNode);
begin
  newNode.previous := node;
  newNode.next := node.next;

  if node.next = nil then begin
    last := newNode;
  end
  else begin
    node.next.previous := newNode;
  end;

  node.next := newNode;
end;

procedure LinkedList.addBefore(node, newNode: LinkedListNode);
begin
  newNode.previous := node.previous;
  newNode.next := node;

  if node.previous = nil then begin
    first := newNode;
  end
  else begin
    node.previous.next := newNode;
  end;

  node.previous := newNode;
end;

procedure LinkedList.addFirst(newNode: LinkedListNode);
begin
  if first = nil then begin
    first := newNode;
    last := newNode;
    newNode.previous := nil;
    newNode.next := nil;
  end
  else begin
    addBefore(first, newNode);
  end;
end;

procedure LinkedList.addLast(newNode: LinkedListNode);
begin
  if last = nil then begin
    addFirst(newNode);
  end
  else begin
    addAfter(last, newNode);
  end;
end;

procedure LinkedList.removeNode(node: LinkedListNode);
begin
  if node.previous = nil then begin
    first := node.next;
  end
  else begin
    node.previous.next := node.next;
  end;

  if node.next = nil then begin
    last := node.previous;
  end
  else begin
    node.next.previous := node.previous;
  end;
end;

(**
 * Appends the specified element to the end of this list.
 *
 * @param e element to be appended to this list
 * @return true (as specified by Collection.add(E))
 *)
function LinkedList.add(e: TObject) : boolean;
var
  newNode: LinkedListNode;
begin
  newNode := LinkedListNode.create();
  newNode.value := e;
  addLast(newNode);
  inc(count);
  add := true;
end;

(**
 * Inserts the specified element at the specified position in this list.
 *
 * @param index index at which the specified element is to be inserted
 * @param element element to be inserted
 *)
procedure LinkedList.add(index: longInt; element: TObject);
var
  node, newNode: LinkedListNode;
  i: longInt;
begin
  newNode := LinkedListNode.create();
  newNode.value := element;

  if index &lt; 1 then begin
    addFirst(newNode);
  end
  else begin
    node := first;

    for i := 0 to index - 1 do begin
      node := node.next;
    end;

    addBefore(node, newNode);
  end;

  inc(count);
end;

(**
 * Returns the element at the specified position in this list.
 *
 * @param index index of the element to return
 * @return the element at the specified position in this list
 *)
function LinkedList.get(index: longInt) : TObject;
var
  node: LinkedListNode;
  i: longInt;
begin
  node := first;

  for i := 0 to index - 1 do begin
    node := node.next;
  end;

  get := node.value;
end;

(**
 * Replaces the element at the specified position in this list with the
 * specified element.
 *
 * @param index index of the element to replace
 * @param element element to be stored at the specified position
 * @return the element previously at the specified position
 *)
function LinkedList.set_(index: longInt; element: TObject) : TObject;
var
  node: LinkedListNode;
  original: TObject;
  i: longInt;
begin
  if index &lt; 1 then begin
    original := first.value;
    first.value := element;
  end
  else begin
    node := first;

    for i := 0 to index - 1 do begin
      node := node.next;
    end;

    original := node.value;
    node.value := element;
  end;

  set_ := original;
end;

(**
 * Removes the element at the specified position in this list.
 *
 * @param index the index of the element to be removed
 * @return the element previously at the specified position
 *)
function LinkedList.remove(index: longInt) : TObject;
var
  node: LinkedListNode;
  removed: TObject;
  i: longInt;
begin
  if index &lt; 1 then begin
    node := first;
    removed := node.value;
    removeNode(node);
    freeAndNil(node);
  end
  else begin
    node := first;

    for i := 0 to index - 1 do begin
      node := node.next;
    end;

    removed := node.value;
    removeNode(node);
    freeAndNil(node);
  end;

  dec(count);
  remove := removed;
end;

(**
 * Returns the number of elements in this list.
 *
 * @return the number of elements in this list
 *)
function LinkedList.size() : longInt;
begin
  size := count;
end;

(**
 * Returns true if this list contains no elements.
 *
 * @return true if this list contains no elements
 *)
function LinkedList.isEmpty() : boolean;
begin
  isEmpty := (count = 0);
end;

(**
 * Removes all of the elements from this list.
 *)
procedure LinkedList.clear();
begin
  while first &lt;&gt; nil do begin
    remove(0);
  end;
end;

(**
 * Returns a string representation of the object.
 *
 * @return a string representation of the object.
 *)
function LinkedList.toString_() : String_;
begin
  toString_ := String_.create(ToString());
end;

function LinkedList.toString() : ansiString;
var
  sb: StringBuilder;
  str: String_;
  node: LinkedListNode;
begin
  sb := StringBuilder.create();
  str := '[';
  sb.append(str);
  freeAndNil(str);
  node := first;

  if first &lt;&gt; nil then begin
    str := node.value.toString();
    sb.append(str);
    freeAndNil(str);
    node := node.next;
  end;

  while node &lt;&gt; nil do begin
    str := ', ';
    sb.append(str);
    freeAndNil(str);
    str := node.value.toString();
    sb.append(str);
    freeAndNil(str);
    node := node.next;
  end;

  str := ']';
  sb.append(str);
  freeAndNil(str);
  str := sb.toString();
  freeAndNil(sb);
  toString := str.toString();
end;

end.

</code>

</codes>
