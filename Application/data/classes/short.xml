<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef SHORT_INCLUDED&#13;
#define SHORT_INCLUDED&#13;
&#13;
#include "String.h"&#13;
#include &lt;stdbool.h&gt;&#13;
#include &lt;stdint.h&gt;&#13;
&#13;
/**&#13;
 * The Short class wraps a value of primitive type short in an object.&#13;
 *&#13;
 * @author Petr Kozler (A13B0359P)&#13;
 */&#13;
&#13;
/**&#13;
 * A constant holding the maximum value a short can have, 2^15-1.&#13;
 */&#13;
#define Short_MAX_VALUE 32767&#13;
/**&#13;
 * A constant holding the minimum value a short can have, -2^15.&#13;
 */&#13;
#define Short_MIN_VALUE -32768&#13;
&#13;
typedef struct {&#13;
    int16_t v;&#13;
} Short;&#13;
&#13;
Short *new_Short(int16_t value);&#13;
int16_t shortValue(Short *ptr);&#13;
int32_t compareToS(Short *ptr, Short *anotherShort);&#13;
int32_t Short_compare(int16_t x, int16_t y);&#13;
bool equalsS(Short *ptr, Short *obj);&#13;
String *toStringS(Short *ptr);&#13;
String *Short_toString(int16_t s);&#13;
int16_t Short_parseShort(String *s);&#13;
&#13;
#endif /* SHORT_INCLUDED */&#13;
&#13;
#include "Short.h"&#13;
&#13;
#include &lt;stdio.h&gt;&#13;
#include &lt;stdlib.h&gt;&#13;
#include &lt;string.h&gt;&#13;
&#13;
#define _MAX_SHORT_STRLEN 6&#13;
&#13;
/**&#13;
 * Constructs a newly allocated Short object that represents the specified&#13;
 * short value.&#13;
 *&#13;
 * @param value the value to be represented by the Short.&#13;
 */&#13;
Short *new_Short(int16_t value) {&#13;
    Short *s = malloc(sizeof(Short));&#13;
    s-&gt;v = value;&#13;
&#13;
    return s;&#13;
}&#13;
&#13;
/**&#13;
 * Returns the value of this Short as a short.&#13;
 *&#13;
 * @return the numeric value represented by this object after conversion to&#13;
 * type short.&#13;
 */&#13;
int16_t shortValue(Short *ptr) {&#13;
    return ptr-&gt;v;&#13;
}&#13;
&#13;
/**&#13;
 * Compares two Short objects numerically.&#13;
 *&#13;
 * @param anotherShort the Short to be compared.&#13;
 * @return the value 0 if this Short is equal to the argument Short; a value&#13;
 * less than 0 if this Short is numerically less than the argument Short;&#13;
 * and a value greater than 0 if this Short is numerically greater than the&#13;
 * argument Short (signed comparison).&#13;
 */&#13;
int32_t compareToS(Short *ptr, Short *anotherShort) {&#13;
    return Short_compare(ptr-&gt;v, anotherShort-&gt;v);&#13;
}&#13;
&#13;
/**&#13;
 * Compares two short values numerically.&#13;
 *&#13;
 * @param x the first short to compare&#13;
 * @param y the second short to compare&#13;
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x&#13;
 * &gt; y&#13;
 */&#13;
int32_t Short_compare(int16_t x, int16_t y) {&#13;
    return x - y;&#13;
}&#13;
&#13;
/**&#13;
 * Compares this object to the specified object.&#13;
 *&#13;
 * @param obj the object to compare with&#13;
 * @return true if the objects are the same; false otherwise.&#13;
 */&#13;
bool equalsS(Short *ptr, Short *obj) {&#13;
    if (ptr == obj) {&#13;
        return true;&#13;
    }&#13;
&#13;
    if (ptr == NULL || obj == NULL) {&#13;
        return false;&#13;
    }&#13;
&#13;
    if (sizeof(*ptr) != sizeof(*obj)) {&#13;
        return false;&#13;
    }&#13;
&#13;
    return (ptr-&gt;v == obj-&gt;v);&#13;
}&#13;
&#13;
/**&#13;
 * Returns a String object representing this Short's value.&#13;
 *&#13;
 * @return a string representation of the value of this object in base 10.&#13;
 */&#13;
String *toStringS(Short *ptr) {&#13;
    return Short_toString(ptr-&gt;v);&#13;
}&#13;
&#13;
/**&#13;
 * Returns a new String object representing the specified short.&#13;
 *&#13;
 * @param s the short to be converted&#13;
 * @return the string representation of the specified short&#13;
 */&#13;
String *Short_toString(int16_t s) {&#13;
    char *str = malloc(_MAX_SHORT_STRLEN + 1);&#13;
    char buf[_MAX_SHORT_STRLEN];&#13;
&#13;
    str[0] = '\0';&#13;
    sprintf(buf, "%hd", s);&#13;
    strcat(str, buf);&#13;
&#13;
    return new_String(str);&#13;
}&#13;
&#13;
/**&#13;
 * Parses the string argument as a signed decimal short.&#13;
 *&#13;
 * @param s a String containing the short representation to be parsed&#13;
 * @return the short value represented by the argument in decimal.&#13;
 */&#13;
int16_t Short_parseShort(String *s) {&#13;
    return strtol(s-&gt;s, NULL, 10);&#13;
}&#13;
</code>
<code lang="C++">#ifndef SHORT_INCLUDED
#define SHORT_INCLUDED

#include "String.h"
#include &lt;cstdint&gt;

/**
 * The Short class wraps a value of primitive type short in an object.
 *
 * @author Petr Kozler (A13B0359P)
 */
class Short {
    int16_t v;
public:
    static const int16_t MIN_VALUE;
    static const int16_t MAX_VALUE;
    Short(int16_t value);
    int16_t shortValue();
    int32_t compareTo(Short *anotherShort);
    static int32_t compare(int16_t x, int16_t y);
    int16_t equals(Short *obj);
    String *toString();
    static String *toString(int16_t s);
    static int16_t parseShort(String *s);
    friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;s, Short &amp;obj);
};

#endif // SHORT_INCLUDED
&#13;
#include "Short.h"

#include &lt;string&gt;

/**
 * A constant holding the maximum value a short can have, 2^15-1.
 */
const int16_t Short::MAX_VALUE = 32767;
/**
 * A constant holding the minimum value a short can have, -2^15.
 */
const int16_t Short::MIN_VALUE = -32768;

/**
 * Constructs a newly allocated Short object that represents the specified
 * short value.
 *
 * @param value the value to be represented by the Short.
 */
Short::Short(int16_t value) {
    v = value;
}

/**
 * Returns the value of this Short as a short.
 *
 * @return the numeric value represented by this object after conversion to
 * type short.
 */
int16_t Short::shortValue() {
    return v;
}

/**
 * Compares two Short objects numerically.
 *
 * @param anotherShort the Short to be compared.
 * @return the value 0 if this Short is equal to the argument Short; a value
 * less than 0 if this Short is numerically less than the argument Short;
 * and a value greater than 0 if this Short is numerically greater than the
 * argument Short (signed comparison).
 */
int32_t Short::compareTo(Short *anotherShort) {
    return compare(v, anotherShort-&gt;v);
}

/**
 * Compares two short values numerically.
 *
 * @param x the first short to compare
 * @param y the second short to compare
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
 * &gt; y
 */
int32_t Short::compare(int16_t x, int16_t y) {
    return x - y;
}

/**
 * Compares this object to the specified object.
 *
 * @param obj the object to compare with
 * @return true if the objects are the same; false otherwise.
 */
int16_t Short::equals(Short *obj) {
    if (obj == nullptr) {
        return false;
    }

    if (sizeof(*this) != sizeof(*obj)) {
        return false;
    }
    
    return (v == obj-&gt;v);
}

/**
 * Returns a String object representing this Short's value.
 *
 * @return a string representation of the value of this object in base 10.
 */
String *Short::toString() {
    return toString(v);
}

/**
 * Returns a new String object representing the specified short.
 *
 * @param s the short to be converted
 * @return the string representation of the specified short
 */
String *Short::toString(int16_t s) {
    return new String(std::to_string(s));
}

/**
 * Parses the string argument as a signed decimal short.
 *
 * @param s a String containing the short representation to be parsed
 * @return the short value represented by the argument in decimal.
 */
int16_t Short::parseShort(String *s) {
    return (int16_t) std::stoi(s-&gt;toString(), nullptr, 10);
}

std::ostream &amp;operator&lt;&lt;(std::ostream &amp;s, Short &amp;obj) {
    return s &lt;&lt; obj.toString()-&gt;toString().c_str();
}
</code>
<code lang="C#">ï»¿using System;&#13;
&#13;
namespace JavaClasses {&#13;
&#13;
    /// &lt;summary&gt;&#13;
    /// The Short class wraps a value of primitive type short in an object.&#13;
    /// &lt;/summary&gt;&#13;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;&#13;
    public class Short {&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// A constant holding the maximum value a short can have, 2^15-1.&#13;
        /// &lt;/summary&gt;&#13;
        public const short MAX_VALUE = 32767;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// A constant holding the minimum value a short can have, -2^15.&#13;
        /// &lt;/summary&gt;&#13;
        public const short MIN_VALUE = -32768;&#13;
&#13;
        private short v;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Constructs a newly allocated Short object that represents the specified&#13;
        /// short value.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="value"&gt;the value to be represented by the Short.&#13;
        /// &lt;/param&gt;&#13;
        public Short(short value) {&#13;
            v = value;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns the value of this Short as a short.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;the numeric value represented by this object after conversion to&#13;
        /// type short.&#13;
        /// &lt;/returns&gt;&#13;
        public short shortValue() {&#13;
            return v;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Compares two Short objects numerically.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="anotherShort"&gt;the Short to be compared.&#13;
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if this Short is equal to the argument Short; a value&#13;
        /// less than 0 if this Short is numerically less than the argument Short;&#13;
        /// and a value greater than 0 if this Short is numerically greater than the&#13;
        /// argument Short (signed comparison).&#13;
        /// &lt;/returns&gt;&#13;
        public int compareTo(Short anotherShort) {&#13;
            return compare(v, anotherShort.v);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Compares two short values numerically.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="x"&gt;the first short to compare&#13;
        /// &lt;/param&gt;&lt;param name="y"&gt;the second short to compare&#13;
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x&#13;
        /// &gt; y&#13;
        /// &lt;/returns&gt;&#13;
        public static int compare(short x, short y) {&#13;
            return x - y;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Compares this object to the specified object.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="obj"&gt;the object to compare with&#13;
        /// &lt;/param&gt;&lt;returns&gt;true if the objects are the same; false otherwise.&#13;
        /// &lt;/returns&gt;&#13;
        public bool equals(Object obj) {&#13;
            if (obj == null) {&#13;
                return false;&#13;
            }&#13;
&#13;
            if (GetType() != obj.GetType()) {&#13;
                return false;&#13;
            }&#13;
&#13;
            return v.Equals((obj as  Short).v);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns a String object representing this Short's value.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;a string representation of the value of this object in base 10.&#13;
        /// &lt;/returns&gt;&#13;
        public String toString() {&#13;
            return Short.toString(v);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns a new String object representing the specified short.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="s"&gt;the short to be converted&#13;
        /// &lt;/param&gt;&lt;returns&gt;the string representation of the specified short&#13;
        /// &lt;/returns&gt;&#13;
        public static String toString(short s) {&#13;
            return s.ToString();&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Parses the string argument as a signed decimal short.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="s"&gt;a String containing the short representation to be parsed&#13;
        /// &lt;/param&gt;&lt;returns&gt;the short value represented by the argument in decimal.&#13;
        /// &lt;/returns&gt;&#13;
        public static short parseShort(String s) {&#13;
            return short.Parse(s.ToString());&#13;
        }&#13;
        &#13;
        public override string ToString() {&#13;
            return toString().ToString();&#13;
        }&#13;
&#13;
    }&#13;
&#13;
}&#13;
</code>
<code lang="Free Pascal">unit ShortUnit;

{$mode objfpc}{$H+}

interface

uses
  SysUtils, StringUnit;

type
  (**
   * The Short class wraps a value of primitive type short in an object.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  Short = class
    private
      var
        v: smallInt;
    public
      const
          (**
           * A constant holding the maximum value a short can have, 2^15-1.
           *)
           MAX_VALUE = 32767;
          (**
           * A constant holding the minimum value a short can have, -2^15.
           *)
           MIN_VALUE = -32768;
      constructor create(value: smallInt);
      function shortValue() : smallInt;
      function compareTo(anotherShort: Short) : longInt;
      class function compare(x, y: smallInt) : longInt;
      function equals(obj: TObject) : boolean; override;
      function toString_() : String_;
      class function toString_(s: smallInt) : String_;
      class function parseShort(s: String_) : smallInt;
      function toString() : ansiString; override;
  end;

implementation

(**
 * Constructs a newly allocated Short object that represents the specified
 * short value.
 *
 * @param value the value to be represented by the Short.
 *)
constructor Short.create(value: smallInt);
begin
  v := value;
end;

(**
 * Returns the value of this Short as a short.
 *
 * @return the numeric value represented by this object after conversion to
 * type short.
 *)
function Short.shortValue() : smallInt;
begin
  shortValue := v;
end;

(**
 * Compares two Short objects numerically.
 *
 * @param anotherShort the Short to be compared.
 * @return the value 0 if this Short is equal to the argument Short; a value
 * less than 0 if this Short is numerically less than the argument Short;
 * and a value greater than 0 if this Short is numerically greater than the
 * argument Short (signed comparison).
 *)
function Short.compareTo(anotherShort: Short) : longInt;
begin
  compareTo := compare(v, anotherShort.v);
end;

(**
 * Compares two short values numerically.
 *
 * @param x the first short to compare
 * @param y the second short to compare
 * @return the value 0 if x == y; a value less than 0 if x &lt; y; and a value greater than 0 if x
 * &gt; y
 *)
class function Short.compare(x, y: smallInt) : longInt;
begin
  compare := x - y;
end;

(**
 * Compares this object to the specified object.
 *
 * @param obj the object to compare with
 * @return true if the objects are the same; false otherwise.
 *)
function Short.equals(obj: TObject) : boolean;
begin
  if obj = nil then begin
    exit(false);
  end;

  if typeOf(self) &lt;&gt; typeOf(obj) then begin
    exit(false);
  end;

  equals := (v = (Short(obj)).v);
end;

(**
 * Returns a String object representing this Short's value.
 *
 * @return a string representation of the value of this object in base 10.
 *)
function Short.toString_() : String_;
begin
  toString_ := Short.toString_(v);
end;

(**
 * Returns a new String object representing the specified short.
 *
 * @param s the short to be converted
 * @return the string representation of the specified short
 *)
class function Short.toString_(s: smallInt) : String_;
begin
  toString_ := String_.create(IntToStr(s));
end;

(**
 * Parses the string argument as a signed decimal short.
 *
 * @param s a String containing the short representation to be parsed
 * @return the short value represented by the argument in decimal.
 *)
class function Short.parseShort(s: String_) : smallInt;
begin
  parseShort := strToInt(s.toString());
end;

function Short.toString() : ansiString;
var
  s: String_;
begin
  s := toString();
  toString := s.ToString();
end;

end.

</code>

</codes>
