<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<codes>
<code lang="C">#ifndef BOOLEAN_INCLUDED&#13;
#define BOOLEAN_INCLUDED&#13;
&#13;
#include "String.h"&#13;
#include &lt;stdbool.h&gt;&#13;
#include &lt;stdint.h&gt;&#13;
&#13;
/**&#13;
 * The Boolean class wraps a value of the primitive type boolean in an object.&#13;
 *&#13;
 * @author Petr Kozler (A13B0359P)&#13;
 */&#13;
&#13;
typedef struct {&#13;
    bool v;&#13;
} Boolean;&#13;
&#13;
Boolean *new_Boolean(bool value);&#13;
bool booleanValue(Boolean *ptr);&#13;
int32_t compareToBool(Boolean *ptr, Boolean *b);&#13;
int32_t Boolean_compare(bool x, bool y);&#13;
bool equalsBool(Boolean *ptr, Boolean *obj);&#13;
String *toStringBool(Boolean *ptr);&#13;
String *Boolean_toString(bool b);&#13;
bool Boolean_parseBoolean(String *s);&#13;
&#13;
#endif /* BOOLEAN_INCLUDED */&#13;
&#13;
#include "Boolean.h"&#13;
&#13;
#include &lt;stdio.h&gt;&#13;
#include &lt;stdlib.h&gt;&#13;
#include &lt;string.h&gt;&#13;
&#13;
#define _MAX_BOOL_STRLEN 5&#13;
&#13;
/**&#13;
 * Allocates a Boolean object representing the value argument.&#13;
 *&#13;
 * @param value the value of the Boolean.&#13;
 */&#13;
Boolean *new_Boolean(bool value) {&#13;
    Boolean *b = malloc(sizeof(Boolean));&#13;
    b-&gt;v = value;&#13;
&#13;
    return b;&#13;
}&#13;
&#13;
/**&#13;
 * Returns the value of this Boolean object as a boolean primitive.&#13;
 *&#13;
 * @return the primitive boolean value of this object.&#13;
 */&#13;
bool booleanValue(Boolean *ptr) {&#13;
    return ptr-&gt;v;&#13;
}&#13;
&#13;
/**&#13;
 * Compares this Boolean instance with another.&#13;
 *&#13;
 * @param b the Boolean instance to be compared&#13;
 * @return zero if this object represents the same boolean value as the&#13;
 * argument; a positive value if this object represents true and the&#13;
 * argument represents false; and a negative value if this object represents&#13;
 * false and the argument represents true&#13;
 */&#13;
int32_t compareToBool(Boolean *ptr, Boolean *b) {&#13;
    return Boolean_compare(ptr-&gt;v, b-&gt;v);&#13;
}&#13;
&#13;
/**&#13;
 * Compares two boolean values.&#13;
 *&#13;
 * @param x the first boolean to compare&#13;
 * @param y the second boolean to compare&#13;
 * @return the value 0 if x == y; a value less than 0 if !x &amp;&amp; y; and a&#13;
 * value greater than 0 if x &amp;&amp; !y&#13;
 */&#13;
int32_t Boolean_compare(bool x, bool y) {&#13;
    return (x == y) ? 0 : (x ? 1 : -1);&#13;
}&#13;
&#13;
/**&#13;
 * Returns true if and only if the argument is not null and is a Boolean&#13;
 * object that represents the same boolean value as this object.&#13;
 *&#13;
 * @param obj the object to compare with.&#13;
 * @return true if the Boolean objects represent the same value; false&#13;
 * otherwise.&#13;
 */&#13;
bool equalsBool(Boolean *ptr, Boolean *obj) {&#13;
    if (ptr == obj) {&#13;
        return true;&#13;
    }&#13;
    &#13;
    if (ptr == NULL || obj == NULL) {&#13;
        return false;&#13;
    }&#13;
    &#13;
    if (sizeof(*ptr) != sizeof(*obj)) {&#13;
        return false;&#13;
    }&#13;
&#13;
    return (ptr-&gt;v == obj-&gt;v);&#13;
}&#13;
&#13;
/**&#13;
 * Returns a String object representing this Boolean's value.&#13;
 * &#13;
 * @return a string representation of this object.&#13;
 */&#13;
String *toStringBool(Boolean *ptr) {&#13;
    return Boolean_toString(ptr-&gt;v);&#13;
}&#13;
&#13;
/**&#13;
 * Returns a String object representing the specified boolean.&#13;
 *&#13;
 * @param b the boolean to be converted&#13;
 * @return the string representation of the specified boolean&#13;
 */&#13;
String *Boolean_toString(bool b) {&#13;
    char *str = malloc(_MAX_BOOL_STRLEN + 1);&#13;
    char buf[_MAX_BOOL_STRLEN];&#13;
&#13;
    str[0] = '\0';&#13;
    sprintf(buf, "%s", b ? "true" : "false");&#13;
    strcat(str, buf);&#13;
&#13;
    return new_String(str);&#13;
}&#13;
&#13;
/**&#13;
 * Parses the string argument as a boolean.&#13;
 *&#13;
 * @param s the String containing the boolean representation to be parsed&#13;
 * @return the boolean represented by the string argument&#13;
 */&#13;
bool Boolean_parseBoolean(String *s) {&#13;
    String *trueStr = new_String("true");&#13;
    String *falseStr = new_String("false");&#13;
    bool value = false;&#13;
&#13;
    if (equals(toLowerCase(s), trueStr)) {&#13;
        value = true;&#13;
    }&#13;
    else if (equals(toLowerCase(s), falseStr)) {&#13;
        value = false;&#13;
    }&#13;
&#13;
    free(trueStr);&#13;
    free(falseStr);&#13;
&#13;
    return value;&#13;
}&#13;
</code>
<code lang="C++">#ifndef BOOLEAN_INCLUDED
#define BOOLEAN_INCLUDED

#include "String.h"
#include &lt;cstdint&gt;

/**
 * The Boolean class wraps a value of the primitive type boolean in an object.
 *
 * @author Petr Kozler (A13B0359P)
 */
class Boolean {
    bool v;
public:
    Boolean(bool value);
    bool booleanValue();
    int32_t compareTo(Boolean *b);
    static int32_t compare(bool x, bool y);
    bool equals(Boolean *obj);
    String *toString();
    static String *toString(bool b);
    static bool parseBoolean(String *s);
    friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;s, Boolean &amp;obj);
};

#endif // BOOLEAN_INCLUDED
&#13;
#include "Boolean.h"

/**
 * Allocates a Boolean object representing the value argument.
 *
 * @param value the value of the Boolean.
 */
Boolean::Boolean(bool value) {
    v = value;
}

/**
 * Returns the value of this Boolean object as a boolean primitive.
 *
 * @return the primitive boolean value of this object.
 */
bool Boolean::booleanValue() {
    return v;
}

/**
 * Compares this Boolean instance with another.
 *
 * @param b the Boolean instance to be compared
 * @return zero if this object represents the same boolean value as the
 * argument; a positive value if this object represents true and the
 * argument represents false; and a negative value if this object represents
 * false and the argument represents true
 */
int32_t Boolean::compareTo(Boolean *b) {
    return compare(v, b-&gt;v);
}

/**
 * Compares two boolean values.
 *
 * @param x the first boolean to compare
 * @param y the second boolean to compare
 * @return the value 0 if x == y; a value less than 0 if !x &amp;&amp; y; and a
 * value greater than 0 if x &amp;&amp; !y
 */
int32_t Boolean::compare(bool x, bool y) {
    return (x == y) ? 0 : (x ? 1 : -1);
}

/**
 * Returns true if and only if the argument is not null and is a Boolean
 * object that represents the same boolean value as this object.
 *
 * @param obj the object to compare with.
 * @return true if the Boolean objects represent the same value; false
 * otherwise.
 */
bool Boolean::equals(Boolean *obj) {
    if (obj == nullptr) {
        return false;
    }

    if (sizeof(*this) != sizeof(*obj)) {
        return false;
    }
    
    return (v == obj-&gt;v);
}

/**
 * Returns a String object representing this Boolean's value.
 * 
 * @return a string representation of this object.
 */
String *Boolean::toString() {
    return toString(v);
}

/**
 * Returns a String object representing the specified boolean.
 *
 * @param b the boolean to be converted
 * @return the string representation of the specified boolean
 */
String *Boolean::toString(bool b) {
    return new String(b ? "true" : "false");
}

/**
 * Parses the string argument as a boolean.
 *
 * @param s the String containing the boolean representation to be parsed
 * @return the boolean represented by the string argument
 */
bool Boolean::parseBoolean(String *s) {
    String *trueStr = new String("true");
    String *falseStr = new String("false");
    bool value = false;

    if (s-&gt;toLowerCase()-&gt;equals(trueStr)) {
        value = true;
    }
    else if (s-&gt;toLowerCase()-&gt;equals(falseStr)) {
        value = false;
    }

    delete trueStr;
    delete falseStr;

    return value;
}

std::ostream &amp;operator&lt;&lt;(std::ostream &amp;s, Boolean &amp;obj) {
    return s &lt;&lt; obj.toString()-&gt;toString().c_str();
}
</code>
<code lang="C#">ï»¿using System;&#13;
&#13;
namespace JavaClasses {&#13;
&#13;
    /// &lt;summary&gt;&#13;
    /// The Boolean class wraps a value of the primitive type boolean in an object.&#13;
    /// &lt;/summary&gt;&#13;
    /// &lt;author&gt;Petr Kozler (A13B0359P)&lt;/author&gt;&#13;
    public class Boolean {&#13;
&#13;
        private bool v;&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Allocates a Boolean object representing the value argument.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="value"&gt;the value of the Boolean.&#13;
        /// &lt;/param&gt;&#13;
        public Boolean(bool value) {&#13;
            v = value;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns the value of this Boolean object as a boolean primitive.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;the primitive boolean value of this object.&#13;
        /// &lt;/returns&gt;&#13;
        public bool booleanValue() {&#13;
            return v;&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Compares this Boolean instance with another.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="b"&gt;the Boolean instance to be compared&#13;
        /// &lt;/param&gt;&lt;returns&gt;zero if this object represents the same boolean value as the&#13;
        /// argument; a positive value if this object represents true and the&#13;
        /// argument represents false; and a negative value if this object represents&#13;
        /// false and the argument represents true&#13;
        /// &lt;/returns&gt;&#13;
        public int compareTo(Boolean b) {&#13;
            return compare(v, b.v);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Compares two boolean values.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="x"&gt;the first boolean to compare&#13;
        /// &lt;/param&gt;&lt;param name="y"&gt;the second boolean to compare&#13;
        /// &lt;/param&gt;&lt;returns&gt;the value 0 if x == y; a value less than 0 if !x &amp;&amp; y; and a&#13;
        /// value greater than 0 if x &amp;&amp; !y&#13;
        /// &lt;/returns&gt;&#13;
        public static int compare(bool x, bool y) {&#13;
            /* 0 if x equals y, 1 if x is TRUE and y is FALSE, -1 otherwise &#13;
             (analogical for integer values) */&#13;
            return (x == y) ? 0 : (x ? 1 : -1);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns true if and only if the argument is not null and is a Boolean&#13;
        /// object that represents the same boolean value as this object.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="obj"&gt;the object to compare with.&#13;
        /// &lt;/param&gt;&lt;returns&gt;true if the Boolean objects represent the same value; false&#13;
        /// otherwise.&#13;
        /// &lt;/returns&gt;&#13;
        public bool equals(Object obj) {&#13;
            // testing another object reference for a NULL value&#13;
            if (obj == null) {&#13;
                return false;&#13;
            }&#13;
&#13;
            // testing object class equality&#13;
            if (GetType() != obj.GetType()) {&#13;
                return false;&#13;
            }&#13;
&#13;
            // testing object fields equality&#13;
            return v.Equals((obj as  Boolean).v);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns a String object representing this Boolean's value.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;returns&gt;a string representation of this object.&#13;
        /// &lt;/returns&gt;&#13;
        public String toString() {&#13;
            return Boolean.toString(v);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Returns a String object representing the specified boolean.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="b"&gt;the boolean to be converted&#13;
        /// &lt;/param&gt;&lt;returns&gt;the string representation of the specified boolean&#13;
        /// &lt;/returns&gt;&#13;
        public static String toString(bool b) {&#13;
            return b.ToString();&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// Parses the string argument as a boolean.&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name="s"&gt;the String containing the boolean representation to be parsed&#13;
        /// &lt;/param&gt;&lt;returns&gt;the boolean represented by the string argument&#13;
        /// &lt;/returns&gt;&#13;
        public static bool parseBoolean(String s) {&#13;
            return bool.Parse(s.ToString());&#13;
        }&#13;
&#13;
    }&#13;
&#13;
}&#13;
</code>
<code lang="Free Pascal">unit BooleanUnit;

{$mode objfpc}{$H+}

interface

uses
  SysUtils, StringUnit;

type
  (**
   * The Boolean class wraps a value of the primitive type boolean in an object.
   *
   * @author Petr Kozler (A13B0359P)
   *)
  Boolean_ = class
    private
      var
        v : boolean;
    public
      constructor create(value: boolean);
      function booleanValue() : boolean;
      function compareTo(b: Boolean_) : longInt;
      class function compare(x, y: boolean) : longInt;
      function equals(obj: TObject) : boolean; override;
      function toString_() : String_;
      class function toString_(b: boolean) : String_;
      class function parseBoolean(s: String_) : boolean;
      function toString() : ansiString; override;
  end;

implementation

(**
 * Allocates a Boolean object representing the value argument.
 *
 * @param value the value of the Boolean.
 *)
constructor Boolean_.create(value: boolean);
begin
  v := value;
end;

(**
 * Returns the value of this Boolean object as a boolean primitive.
 *
 * @return the primitive boolean value of this object.
 *)
function Boolean_.booleanValue() : boolean;
begin
  booleanValue := v;
end;

(**
 * Compares this Boolean instance with another.
 *
 * @param b the Boolean instance to be compared
 * @return zero if this object represents the same boolean value as the
 * argument; a positive value if this object represents true and the
 * argument represents false; and a negative value if this object represents
 * false and the argument represents true
 *)
function Boolean_.compareTo(b: Boolean_) : longInt;
begin
  compareTo := compare(v, anotherBoolean.v);
end;

(**
 * Compares two boolean values.
 *
 * @param x the first boolean to compare
 * @param y the second boolean to compare
 * @return the value 0 if x == y; a value less than 0 if !x &amp;&amp; y; and a
 * value greater than 0 if x &amp;&amp; !y
 *)
class function Boolean_.compare(x, y: boolean) : longInt;
begin
  if x = y then begin
    compare := 0;
  end
  else if x then begin
    compare := 1;
  end
  else begin
    compare := -1;
  end;
end;

(**
 * Returns true if and only if the argument is not null and is a Boolean
 * object that represents the same boolean value as this object.
 *
 * @param obj the object to compare with.
 * @return true if the Boolean objects represent the same value; false
 * otherwise.
 *)
function Boolean_.equals(obj: TObject) : boolean;
begin
  if obj = nil then begin
    exit(false);
  end;

  if typeOf(self) &lt;&gt; typeOf(obj) then begin
    exit(false);
  end;

  equals := (v = (Boolean_(obj)).v);
end;

(**
 * Returns a String object representing this Boolean's value.
 *
 * @return a string representation of this object.
 *)
function Boolean_.toString_() : String_;
begin
  toString_ := Boolean_.toString_(v);
end;

(**
 * Returns a String object representing the specified boolean.
 *
 * @param b the boolean to be converted
 * @return the string representation of the specified boolean
 *)
class function Boolean_.toString_(b: boolean) : String_;
begin
  toString_ := String_.create(BoolToStr(b));
end;

(**
 * Parses the string argument as a boolean.
 *
 * @param s the String containing the boolean representation to be parsed
 * @return the boolean represented by the string argument
 *)
class function Boolean_.parseBoolean(s: String_) : boolean;
begin
  parseBoolean := strToBool(s.toString());
end;

function Boolean_.toString() : ansiString;
var
  s: String_;
begin
  s := toString();
  toString := s.ToString();
end;

end.
</code>

</codes>
